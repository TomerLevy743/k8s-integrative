apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/default-container: alertmanager
    creationTimestamp: "2025-03-04T01:03:56Z"
    generateName: alertmanager-tomer-prom-kube-prometheus-alertmanager-
    labels:
      alertmanager: tomer-prom-kube-prometheus-alertmanager
      app.kubernetes.io/instance: tomer-prom-kube-prometheus-alertmanager
      app.kubernetes.io/managed-by: prometheus-operator
      app.kubernetes.io/name: alertmanager
      app.kubernetes.io/version: 0.28.0
      apps.kubernetes.io/pod-index: "0"
      controller-revision-hash: alertmanager-tomer-prom-kube-prometheus-alertmanager-6c977cc745
      statefulset.kubernetes.io/pod-name: alertmanager-tomer-prom-kube-prometheus-alertmanager-0
    name: alertmanager-tomer-prom-kube-prometheus-alertmanager-0
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: alertmanager-tomer-prom-kube-prometheus-alertmanager
      uid: fc95e2a2-efa1-41c4-a829-246d9671fe49
    resourceVersion: "2632412"
    uid: 0d83fef0-af85-40c7-93ab-1b97aebd7d4e
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - alertmanager
              - key: alertmanager
                operator: In
                values:
                - tomer-prom-kube-prometheus-alertmanager
            topologyKey: kubernetes.io/hostname
          weight: 100
    automountServiceAccountToken: true
    containers:
    - args:
      - --config.file=/etc/alertmanager/config_out/alertmanager.env.yaml
      - --storage.path=/alertmanager
      - --data.retention=120h
      - --cluster.listen-address=
      - --web.listen-address=:9093
      - --web.external-url=http://tomer-prom-kube-prometheus-alertmanager.tomer:9093
      - --web.route-prefix=/
      - --cluster.label=tomer/tomer-prom-kube-prometheus-alertmanager
      - --cluster.peer=alertmanager-tomer-prom-kube-prometheus-alertmanager-0.alertmanager-operated:9094
      - --cluster.reconnect-timeout=5m
      - --web.config.file=/etc/alertmanager/web_config/web-config.yaml
      env:
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      image: quay.io/prometheus/alertmanager:v0.28.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 10
        httpGet:
          path: /-/healthy
          port: http-web
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 3
      name: alertmanager
      ports:
      - containerPort: 9093
        name: http-web
        protocol: TCP
      - containerPort: 9094
        name: mesh-tcp
        protocol: TCP
      - containerPort: 9094
        name: mesh-udp
        protocol: UDP
      readinessProbe:
        failureThreshold: 10
        httpGet:
          path: /-/ready
          port: http-web
          scheme: HTTP
        initialDelaySeconds: 3
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 3
      resources:
        requests:
          memory: 200Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/alertmanager/config
        name: config-volume
      - mountPath: /etc/alertmanager/config_out
        name: config-out
        readOnly: true
      - mountPath: /etc/alertmanager/certs
        name: tls-assets
        readOnly: true
      - mountPath: /alertmanager
        name: alertmanager-tomer-prom-kube-prometheus-alertmanager-db
      - mountPath: /etc/alertmanager/web_config/web-config.yaml
        name: web-config
        readOnly: true
        subPath: web-config.yaml
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-gbv2l
        readOnly: true
    - args:
      - --listen-address=:8080
      - --web-config-file=/etc/alertmanager/web_config/web-config.yaml
      - --reload-url=http://127.0.0.1:9093/-/reload
      - --config-file=/etc/alertmanager/config/alertmanager.yaml.gz
      - --config-envsubst-file=/etc/alertmanager/config_out/alertmanager.env.yaml
      - --watched-dir=/etc/alertmanager/config
      command:
      - /bin/prometheus-config-reloader
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: SHARD
        value: "-1"
      image: quay.io/prometheus-operator/prometheus-config-reloader:v0.80.1
      imagePullPolicy: IfNotPresent
      name: config-reloader
      ports:
      - containerPort: 8080
        name: reloader-web
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/alertmanager/config
        name: config-volume
        readOnly: true
      - mountPath: /etc/alertmanager/config_out
        name: config-out
      - mountPath: /etc/alertmanager/web_config/web-config.yaml
        name: web-config
        readOnly: true
        subPath: web-config.yaml
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-gbv2l
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: alertmanager-tomer-prom-kube-prometheus-alertmanager-0
    initContainers:
    - args:
      - --watch-interval=0
      - --listen-address=:8081
      - --config-file=/etc/alertmanager/config/alertmanager.yaml.gz
      - --config-envsubst-file=/etc/alertmanager/config_out/alertmanager.env.yaml
      - --watched-dir=/etc/alertmanager/config
      command:
      - /bin/prometheus-config-reloader
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: SHARD
        value: "-1"
      image: quay.io/prometheus-operator/prometheus-config-reloader:v0.80.1
      imagePullPolicy: IfNotPresent
      name: init-config-reloader
      ports:
      - containerPort: 8081
        name: reloader-web
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/alertmanager/config
        name: config-volume
        readOnly: true
      - mountPath: /etc/alertmanager/config_out
        name: config-out
      - mountPath: /etc/alertmanager/web_config/web-config.yaml
        name: web-config
        readOnly: true
        subPath: web-config.yaml
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-gbv2l
        readOnly: true
    nodeName: ip-192-168-31-152.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 2000
      runAsGroup: 2000
      runAsNonRoot: true
      runAsUser: 1000
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: tomer-prom-kube-prometheus-alertmanager
    serviceAccountName: tomer-prom-kube-prometheus-alertmanager
    subdomain: alertmanager-operated
    terminationGracePeriodSeconds: 120
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: config-volume
      secret:
        defaultMode: 420
        secretName: alertmanager-tomer-prom-kube-prometheus-alertmanager-generated
    - name: tls-assets
      projected:
        defaultMode: 420
        sources:
        - secret:
            name: alertmanager-tomer-prom-kube-prometheus-alertmanager-tls-assets-0
    - emptyDir:
        medium: Memory
      name: config-out
    - name: web-config
      secret:
        defaultMode: 420
        secretName: alertmanager-tomer-prom-kube-prometheus-alertmanager-web-config
    - emptyDir: {}
      name: alertmanager-tomer-prom-kube-prometheus-alertmanager-db
    - name: kube-api-access-gbv2l
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T01:03:57Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T01:03:58Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T01:04:02Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T01:04:02Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T01:03:56Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://68f6384641dfe59563442dfbbf91c8f1371b6ba6ed37e29b34bbb03c576ed351
      image: quay.io/prometheus/alertmanager:v0.28.0
      imageID: quay.io/prometheus/alertmanager@sha256:d5155cfac40a6d9250ffc97c19db2c5e190c7bc57c6b67125c94903358f8c7d8
      lastState: {}
      name: alertmanager
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-04T01:03:58Z"
    - containerID: containerd://ee2c312cf4273212a781dfd25d2d509c40e1eabaac772da004f71887534add34
      image: quay.io/prometheus-operator/prometheus-config-reloader:v0.80.1
      imageID: quay.io/prometheus-operator/prometheus-config-reloader@sha256:125886af6555c1d9726bef0ebc845e922e0f227bba68e0c70fb661295da96bfe
      lastState: {}
      name: config-reloader
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-04T01:03:58Z"
    hostIP: 192.168.31.152
    hostIPs:
    - ip: 192.168.31.152
    initContainerStatuses:
    - containerID: containerd://95ed0a00b8795a48bfbfa7cd2e06524d700f3aec250a089e535653bab9471812
      image: quay.io/prometheus-operator/prometheus-config-reloader:v0.80.1
      imageID: quay.io/prometheus-operator/prometheus-config-reloader@sha256:125886af6555c1d9726bef0ebc845e922e0f227bba68e0c70fb661295da96bfe
      lastState: {}
      name: init-config-reloader
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://95ed0a00b8795a48bfbfa7cd2e06524d700f3aec250a089e535653bab9471812
          exitCode: 0
          finishedAt: "2025-03-04T01:03:57Z"
          reason: Completed
          startedAt: "2025-03-04T01:03:57Z"
    phase: Running
    podIP: 192.168.2.42
    podIPs:
    - ip: 192.168.2.42
    qosClass: Burstable
    startTime: "2025-03-04T01:03:56Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-03-04T06:34:52Z"
    generateName: mariadb-tomer-
    labels:
      app: mariadb-tomer
      apps.kubernetes.io/pod-index: "0"
      controller-revision-hash: mariadb-tomer-64d8b7f6fc
      statefulset.kubernetes.io/pod-name: mariadb-tomer-0
    name: mariadb-tomer-0
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: mariadb-tomer
      uid: 825162db-a59b-4017-bfe9-a45920118263
    resourceVersion: "2989678"
    uid: f5e98b4c-8aa6-411b-8520-4ff1eddb945c
  spec:
    containers:
    - args:
      - --default-authentication-plugin=mysql_native_password
      env:
      - name: MYSQL_ROOT_PASSWORD
        value: somewordpress
      - name: MYSQL_DATABASE
        value: wordpress
      - name: MYSQL_USER
        value: wordpress
      - name: MYSQL_PASSWORD
        value: wordpress
      image: public.ecr.aws/c0m6s3p2/tomer-k8s-inegrative/db:latest
      imagePullPolicy: Always
      name: mariadb-tomer
      ports:
      - containerPort: 3306
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/mysql
        name: mariadb-storage
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-npp4q
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: mariadb-tomer-0
    nodeName: ip-192-168-9-180.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: mariadb-tomer
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mariadb-storage
      persistentVolumeClaim:
        claimName: mariadb-pvc
    - name: kube-api-access-npp4q
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T06:40:50Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T06:40:29Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T06:40:50Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T06:40:50Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T06:40:29Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://7ab73ecc2456b9abd9ce5252e9d4da14c6a52d67da2aeff6e7985b221399d962
      image: public.ecr.aws/c0m6s3p2/tomer-k8s-inegrative/db:latest
      imageID: public.ecr.aws/c0m6s3p2/tomer-k8s-inegrative/db@sha256:dd08274a61f912b78facb7d144f898c0fd53da4f0c2fcf8ea80cd05f22577221
      lastState: {}
      name: mariadb-tomer
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-04T06:40:50Z"
    hostIP: 192.168.9.180
    hostIPs:
    - ip: 192.168.9.180
    phase: Running
    podIP: 192.168.22.7
    podIPs:
    - ip: 192.168.22.7
    qosClass: BestEffort
    startTime: "2025-03-04T06:40:29Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/default-container: prometheus
    creationTimestamp: "2025-03-04T06:35:54Z"
    generateName: prometheus-tomer-prom-kube-prometheus-prometheus-
    labels:
      app.kubernetes.io/instance: tomer-prom-kube-prometheus-prometheus
      app.kubernetes.io/managed-by: prometheus-operator
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/version: 3.2.1
      apps.kubernetes.io/pod-index: "0"
      controller-revision-hash: prometheus-tomer-prom-kube-prometheus-prometheus-78648548c
      operator.prometheus.io/name: tomer-prom-kube-prometheus-prometheus
      operator.prometheus.io/shard: "0"
      prometheus: tomer-prom-kube-prometheus-prometheus
      statefulset.kubernetes.io/pod-name: prometheus-tomer-prom-kube-prometheus-prometheus-0
    name: prometheus-tomer-prom-kube-prometheus-prometheus-0
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: prometheus-tomer-prom-kube-prometheus-prometheus
      uid: d73b48fa-129d-4da0-bc51-3b658ce83468
    resourceVersion: "2984901"
    uid: 2da08d86-d9c8-486a-a925-b8350746258a
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - prometheus
              - key: prometheus
                operator: In
                values:
                - tomer-prom-kube-prometheus-prometheus
            topologyKey: kubernetes.io/hostname
          weight: 100
    automountServiceAccountToken: true
    containers:
    - args:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --config.file=/etc/prometheus/config_out/prometheus.env.yaml
      - --web.enable-lifecycle
      - --web.external-url=http://tomer-prom-kube-prometheus-prometheus.tomer:9090
      - --web.route-prefix=/
      - --storage.tsdb.retention.time=10d
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.wal-compression
      - --web.config.file=/etc/prometheus/web_config/web-config.yaml
      image: quay.io/prometheus/prometheus:v3.2.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 6
        httpGet:
          path: /-/healthy
          port: http-web
          scheme: HTTP
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 3
      name: prometheus
      ports:
      - containerPort: 9090
        name: http-web
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /-/ready
          port: http-web
          scheme: HTTP
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 3
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      startupProbe:
        failureThreshold: 60
        httpGet:
          path: /-/ready
          port: http-web
          scheme: HTTP
        periodSeconds: 15
        successThreshold: 1
        timeoutSeconds: 3
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/prometheus/config_out
        name: config-out
        readOnly: true
      - mountPath: /etc/prometheus/certs
        name: tls-assets
        readOnly: true
      - mountPath: /prometheus
        name: prometheus-tomer-prom-kube-prometheus-prometheus-db
      - mountPath: /etc/prometheus/rules/prometheus-tomer-prom-kube-prometheus-prometheus-rulefiles-0
        name: prometheus-tomer-prom-kube-prometheus-prometheus-rulefiles-0
      - mountPath: /etc/prometheus/web_config/web-config.yaml
        name: web-config
        readOnly: true
        subPath: web-config.yaml
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-fdsm8
        readOnly: true
    - args:
      - --listen-address=:8080
      - --reload-url=http://127.0.0.1:9090/-/reload
      - --config-file=/etc/prometheus/config/prometheus.yaml.gz
      - --config-envsubst-file=/etc/prometheus/config_out/prometheus.env.yaml
      - --watched-dir=/etc/prometheus/rules/prometheus-tomer-prom-kube-prometheus-prometheus-rulefiles-0
      command:
      - /bin/prometheus-config-reloader
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: SHARD
        value: "0"
      image: quay.io/prometheus-operator/prometheus-config-reloader:v0.80.1
      imagePullPolicy: IfNotPresent
      name: config-reloader
      ports:
      - containerPort: 8080
        name: reloader-web
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/prometheus/config
        name: config
      - mountPath: /etc/prometheus/config_out
        name: config-out
      - mountPath: /etc/prometheus/rules/prometheus-tomer-prom-kube-prometheus-prometheus-rulefiles-0
        name: prometheus-tomer-prom-kube-prometheus-prometheus-rulefiles-0
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-fdsm8
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: prometheus-tomer-prom-kube-prometheus-prometheus-0
    initContainers:
    - args:
      - --watch-interval=0
      - --listen-address=:8081
      - --config-file=/etc/prometheus/config/prometheus.yaml.gz
      - --config-envsubst-file=/etc/prometheus/config_out/prometheus.env.yaml
      - --watched-dir=/etc/prometheus/rules/prometheus-tomer-prom-kube-prometheus-prometheus-rulefiles-0
      command:
      - /bin/prometheus-config-reloader
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: SHARD
        value: "0"
      image: quay.io/prometheus-operator/prometheus-config-reloader:v0.80.1
      imagePullPolicy: IfNotPresent
      name: init-config-reloader
      ports:
      - containerPort: 8081
        name: reloader-web
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/prometheus/config
        name: config
      - mountPath: /etc/prometheus/config_out
        name: config-out
      - mountPath: /etc/prometheus/rules/prometheus-tomer-prom-kube-prometheus-prometheus-rulefiles-0
        name: prometheus-tomer-prom-kube-prometheus-prometheus-rulefiles-0
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-fdsm8
        readOnly: true
    nodeName: ip-192-168-61-123.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 2000
      runAsGroup: 2000
      runAsNonRoot: true
      runAsUser: 1000
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: tomer-prom-kube-prometheus-prometheus
    serviceAccountName: tomer-prom-kube-prometheus-prometheus
    shareProcessNamespace: false
    subdomain: prometheus-operated
    terminationGracePeriodSeconds: 600
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: config
      secret:
        defaultMode: 420
        secretName: prometheus-tomer-prom-kube-prometheus-prometheus
    - name: tls-assets
      projected:
        defaultMode: 420
        sources:
        - secret:
            name: prometheus-tomer-prom-kube-prometheus-prometheus-tls-assets-0
    - emptyDir:
        medium: Memory
      name: config-out
    - configMap:
        defaultMode: 420
        name: prometheus-tomer-prom-kube-prometheus-prometheus-rulefiles-0
      name: prometheus-tomer-prom-kube-prometheus-prometheus-rulefiles-0
    - name: web-config
      secret:
        defaultMode: 420
        secretName: prometheus-tomer-prom-kube-prometheus-prometheus-web-config
    - emptyDir: {}
      name: prometheus-tomer-prom-kube-prometheus-prometheus-db
    - name: kube-api-access-fdsm8
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T06:35:55Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T06:35:55Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T06:36:10Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T06:36:10Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T06:35:54Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://2a546490e9ebfaf398a5fea9d55bed37aa99aa42d4ccb14b113dbdc9940ab214
      image: quay.io/prometheus-operator/prometheus-config-reloader:v0.80.1
      imageID: quay.io/prometheus-operator/prometheus-config-reloader@sha256:125886af6555c1d9726bef0ebc845e922e0f227bba68e0c70fb661295da96bfe
      lastState: {}
      name: config-reloader
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-04T06:36:00Z"
    - containerID: containerd://ba269c795df3fd68bf7b2d4d93b5051dbd65f2aa3a470c1877874856425fd4cd
      image: quay.io/prometheus/prometheus:v3.2.1
      imageID: quay.io/prometheus/prometheus@sha256:6927e0919a144aa7616fd0137d4816816d42f6b816de3af269ab065250859a62
      lastState: {}
      name: prometheus
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-04T06:36:00Z"
    hostIP: 192.168.61.123
    hostIPs:
    - ip: 192.168.61.123
    initContainerStatuses:
    - containerID: containerd://3fe93438e0638fcbd1d3e63786e5b1a0ffa97cfde670ccbae2430e6d8a3cba96
      image: quay.io/prometheus-operator/prometheus-config-reloader:v0.80.1
      imageID: quay.io/prometheus-operator/prometheus-config-reloader@sha256:125886af6555c1d9726bef0ebc845e922e0f227bba68e0c70fb661295da96bfe
      lastState: {}
      name: init-config-reloader
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://3fe93438e0638fcbd1d3e63786e5b1a0ffa97cfde670ccbae2430e6d8a3cba96
          exitCode: 0
          finishedAt: "2025-03-04T06:35:54Z"
          reason: Completed
          startedAt: "2025-03-04T06:35:54Z"
    phase: Running
    podIP: 192.168.45.81
    podIPs:
    - ip: 192.168.45.81
    qosClass: BestEffort
    startTime: "2025-03-04T06:35:54Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-03-04T01:12:46Z"
    generateName: tomer-ingress-ingress-nginx-controller-ccbfffdfb-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: tomer-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: ccbfffdfb
    name: tomer-ingress-ingress-nginx-controller-ccbfffdfb-pl2qt
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: tomer-ingress-ingress-nginx-controller-ccbfffdfb
      uid: d63e3a04-22da-4d27-8e5f-310d9abebde1
    resourceVersion: "2642287"
    uid: 268ccda7-3813-423a-ac00-1fb3face2de0
  spec:
    containers:
    - args:
      - /nginx-ingress-controller
      - --publish-service=$(POD_NAMESPACE)/tomer-ingress-ingress-nginx-controller
      - --election-id=tomer-ingress-ingress-nginx-leader
      - --controller-class=k8s.io/ingress-nginx
      - --ingress-class=nginx
      - --configmap=$(POD_NAMESPACE)/tomer-ingress-ingress-nginx-controller
      - --watch-namespace=tomer
      - --validating-webhook=:8443
      - --validating-webhook-certificate=/usr/local/certificates/cert
      - --validating-webhook-key=/usr/local/certificates/key
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: LD_PRELOAD
        value: /usr/local/lib/libmimalloc.so
      image: registry.k8s.io/ingress-nginx/controller:v1.12.0@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /wait-shutdown
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        name: https
        protocol: TCP
      - containerPort: 8443
        name: webhook
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 100m
          memory: 90Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: false
        runAsGroup: 82
        runAsNonRoot: true
        runAsUser: 101
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-pkk4p
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-6-218.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: tomer-ingress-ingress-nginx
    serviceAccountName: tomer-ingress-ingress-nginx
    terminationGracePeriodSeconds: 300
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: webhook-cert
      secret:
        defaultMode: 420
        secretName: tomer-ingress-ingress-nginx-admission
    - name: kube-api-access-pkk4p
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T01:12:55Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T01:12:46Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T01:13:06Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T01:13:06Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T01:12:46Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://5a4defb3d14d7b859385d36f522e25c6ed383e530049bbfe494b688ae61e9acc
      image: sha256:a4a8af0db08902e65347157c5efef6d1f9e261f03c8aa14b1b40bc182b947fe7
      imageID: registry.k8s.io/ingress-nginx/controller@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
      lastState: {}
      name: controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-04T01:12:55Z"
    hostIP: 192.168.6.218
    hostIPs:
    - ip: 192.168.6.218
    phase: Running
    podIP: 192.168.8.93
    podIPs:
    - ip: 192.168.8.93
    qosClass: Burstable
    startTime: "2025-03-04T01:12:46Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/config: 0e9cbd0ea8e24e32f7dfca5bab17a2ba05652642f0a09a4882833ae88e4cc4a3
      checksum/sc-dashboard-provider-config: e70bf6a851099d385178a76de9757bb0bef8299da6d8443602590e44f05fdf24
      checksum/secret: 032056e9c62bbe9d1daa41ee49cd3d9524c076f51ca4c65adadf4ef08ef28712
      kubectl.kubernetes.io/default-container: grafana
    creationTimestamp: "2025-03-03T21:21:13Z"
    generateName: tomer-prom-grafana-ff9df6d5b-
    labels:
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/name: grafana
      app.kubernetes.io/version: 11.5.2
      helm.sh/chart: grafana-8.10.1
      pod-template-hash: ff9df6d5b
    name: tomer-prom-grafana-ff9df6d5b-vp9bp
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: tomer-prom-grafana-ff9df6d5b
      uid: 88ed0bd8-cd76-445f-b48a-cb1b9e04434c
    resourceVersion: "2398385"
    uid: 74fff784-085c-4c59-a772-198012d8288b
  spec:
    automountServiceAccountToken: true
    containers:
    - env:
      - name: METHOD
        value: WATCH
      - name: LABEL
        value: grafana_dashboard
      - name: LABEL_VALUE
        value: "1"
      - name: FOLDER
        value: /tmp/dashboards
      - name: RESOURCE
        value: both
      - name: NAMESPACE
        value: ALL
      - name: REQ_USERNAME
        valueFrom:
          secretKeyRef:
            key: admin-user
            name: tomer-prom-grafana
      - name: REQ_PASSWORD
        valueFrom:
          secretKeyRef:
            key: admin-password
            name: tomer-prom-grafana
      - name: REQ_URL
        value: http://localhost:3000/api/admin/provisioning/dashboards/reload
      - name: REQ_METHOD
        value: POST
      image: quay.io/kiwigrid/k8s-sidecar:1.30.0
      imagePullPolicy: IfNotPresent
      name: grafana-sc-dashboard
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp/dashboards
        name: sc-dashboard-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-2sjzn
        readOnly: true
    - env:
      - name: METHOD
        value: WATCH
      - name: LABEL
        value: grafana_datasource
      - name: LABEL_VALUE
        value: "1"
      - name: FOLDER
        value: /etc/grafana/provisioning/datasources
      - name: RESOURCE
        value: both
      - name: REQ_USERNAME
        valueFrom:
          secretKeyRef:
            key: admin-user
            name: tomer-prom-grafana
      - name: REQ_PASSWORD
        valueFrom:
          secretKeyRef:
            key: admin-password
            name: tomer-prom-grafana
      - name: REQ_URL
        value: http://localhost:3000/api/admin/provisioning/datasources/reload
      - name: REQ_METHOD
        value: POST
      image: quay.io/kiwigrid/k8s-sidecar:1.30.0
      imagePullPolicy: IfNotPresent
      name: grafana-sc-datasources
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/grafana/provisioning/datasources
        name: sc-datasources-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-2sjzn
        readOnly: true
    - env:
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: GF_SECURITY_ADMIN_USER
        valueFrom:
          secretKeyRef:
            key: admin-user
            name: tomer-prom-grafana
      - name: GF_SECURITY_ADMIN_PASSWORD
        valueFrom:
          secretKeyRef:
            key: admin-password
            name: tomer-prom-grafana
      - name: GF_PATHS_DATA
        value: /var/lib/grafana/
      - name: GF_PATHS_LOGS
        value: /var/log/grafana
      - name: GF_PATHS_PLUGINS
        value: /var/lib/grafana/plugins
      - name: GF_PATHS_PROVISIONING
        value: /etc/grafana/provisioning
      image: docker.io/grafana/grafana:11.5.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 10
        httpGet:
          path: /api/health
          port: 3000
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 30
      name: grafana
      ports:
      - containerPort: 3000
        name: grafana
        protocol: TCP
      - containerPort: 9094
        name: gossip-tcp
        protocol: TCP
      - containerPort: 9094
        name: gossip-udp
        protocol: UDP
      - containerPort: 6060
        name: profiling
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /api/health
          port: 3000
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/grafana/grafana.ini
        name: config
        subPath: grafana.ini
      - mountPath: /var/lib/grafana
        name: storage
      - mountPath: /tmp/dashboards
        name: sc-dashboard-volume
      - mountPath: /etc/grafana/provisioning/dashboards/sc-dashboardproviders.yaml
        name: sc-dashboard-provider
        subPath: provider.yaml
      - mountPath: /etc/grafana/provisioning/datasources
        name: sc-datasources-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-2sjzn
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-26-200.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 472
      runAsGroup: 472
      runAsNonRoot: true
      runAsUser: 472
    serviceAccount: tomer-prom-grafana
    serviceAccountName: tomer-prom-grafana
    shareProcessNamespace: false
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: tomer-prom-grafana
      name: config
    - emptyDir: {}
      name: storage
    - emptyDir: {}
      name: sc-dashboard-volume
    - configMap:
        defaultMode: 420
        name: tomer-prom-grafana-config-dashboards
      name: sc-dashboard-provider
    - emptyDir: {}
      name: sc-datasources-volume
    - name: kube-api-access-2sjzn
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T21:21:29Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T21:21:13Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T21:21:33Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T21:21:33Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T21:21:13Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://4b708bd784fa42cdf1d8b60f38547f32c7b23cc3a5a108e30b1afdffd083c913
      image: docker.io/grafana/grafana:11.5.2
      imageID: docker.io/grafana/grafana@sha256:8b37a2f028f164ce7b9889e1765b9d6ee23fec80f871d156fbf436d6198d32b7
      lastState: {}
      name: grafana
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-03T21:21:28Z"
    - containerID: containerd://828f657f4b9c54fd1cbe1a0e2e3547ffd6cee435ddc882241c0c1bf51540ac3a
      image: quay.io/kiwigrid/k8s-sidecar:1.30.0
      imageID: quay.io/kiwigrid/k8s-sidecar@sha256:9a326271c439b6f9e174f3b48ed132bbff71c00592c7dbd072ccdc334445bde2
      lastState: {}
      name: grafana-sc-dashboard
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-03T21:21:15Z"
    - containerID: containerd://548a0f4bd7e40262bef1e969192ba725df03263cb7b6cb9484d0e7058bcfc8c3
      image: quay.io/kiwigrid/k8s-sidecar:1.30.0
      imageID: quay.io/kiwigrid/k8s-sidecar@sha256:9a326271c439b6f9e174f3b48ed132bbff71c00592c7dbd072ccdc334445bde2
      lastState: {}
      name: grafana-sc-datasources
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-03T21:21:15Z"
    hostIP: 192.168.26.200
    hostIPs:
    - ip: 192.168.26.200
    phase: Running
    podIP: 192.168.10.32
    podIPs:
    - ip: 192.168.10.32
    qosClass: BestEffort
    startTime: "2025-03-03T21:21:13Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/restartedAt: "2025-03-03T20:01:56Z"
    creationTimestamp: "2025-03-04T00:47:23Z"
    generateName: tomer-prom-kube-prometheus-operator-565866ff5b-
    labels:
      app: kube-prometheus-stack-operator
      app.kubernetes.io/component: prometheus-operator
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kube-prometheus-stack-prometheus-operator
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      heritage: Helm
      pod-template-hash: 565866ff5b
      release: tomer-prom
    name: tomer-prom-kube-prometheus-operator-565866ff5b-7m8qn
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: tomer-prom-kube-prometheus-operator-565866ff5b
      uid: 9aa6fb1f-f9db-4f24-a0e5-3a059a22c04b
    resourceVersion: "2613766"
    uid: 90ad1721-4241-4e86-a181-23625007ed42
  spec:
    automountServiceAccountToken: true
    containers:
    - args:
      - --kubelet-service=kube-system/tomer-prom-kube-prometheus-kubelet
      - --kubelet-endpoints=true
      - --kubelet-endpointslice=false
      - --localhost=127.0.0.1
      - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.80.1
      - --config-reloader-cpu-request=0
      - --config-reloader-cpu-limit=0
      - --config-reloader-memory-request=0
      - --config-reloader-memory-limit=0
      - --thanos-default-base-image=quay.io/thanos/thanos:v0.37.2
      - --secret-field-selector=type!=kubernetes.io/dockercfg,type!=kubernetes.io/service-account-token,type!=helm.sh/release.v1
      - --web.enable-tls=true
      - --web.cert-file=/cert/cert
      - --web.key-file=/cert/key
      - --web.listen-address=:10250
      - --web.tls-min-version=VersionTLS13
      env:
      - name: GOGC
        value: "30"
      image: quay.io/prometheus-operator/prometheus-operator:v0.80.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: https
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: kube-prometheus-stack
      ports:
      - containerPort: 10250
        name: https
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: https
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /cert
        name: tls-secret
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-pb6f2
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-26-200.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: tomer-prom-kube-prometheus-operator
    serviceAccountName: tomer-prom-kube-prometheus-operator
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: tls-secret
      secret:
        defaultMode: 420
        secretName: tomer-prom-kube-prometheus-admission
    - name: kube-api-access-pb6f2
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:47:25Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:47:23Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:47:26Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:47:26Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:47:23Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://8c3924ffe19c6e998754283716d83abe62d3259f2401bf33929a5f544d3bd4b3
      image: quay.io/prometheus-operator/prometheus-operator:v0.80.1
      imageID: quay.io/prometheus-operator/prometheus-operator@sha256:4636654efb15f52de0f2f07a97673492bd06b6688b9fcbb10ba147fd596d7949
      lastState: {}
      name: kube-prometheus-stack
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-04T00:47:25Z"
    hostIP: 192.168.26.200
    hostIPs:
    - ip: 192.168.26.200
    phase: Running
    podIP: 192.168.26.37
    podIPs:
    - ip: 192.168.26.37
    qosClass: BestEffort
    startTime: "2025-03-04T00:47:23Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-03-04T01:42:19Z"
    generateName: tomer-prom-kube-state-metrics-66f858fb5b-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kube-state-metrics
      app.kubernetes.io/part-of: kube-state-metrics
      app.kubernetes.io/version: 2.15.0
      helm.sh/chart: kube-state-metrics-5.30.0
      pod-template-hash: 66f858fb5b
      release: tomer-prom
    name: tomer-prom-kube-state-metrics-66f858fb5b-grsz9
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: tomer-prom-kube-state-metrics-66f858fb5b
      uid: 3df05e88-c7a5-40f5-9dda-789c588177ef
    resourceVersion: "2677494"
    uid: 7b374697-952e-4f2e-8e78-aad8134e0931
  spec:
    automountServiceAccountToken: true
    containers:
    - args:
      - --port=8080
      - --resources=certificatesigningrequests,configmaps,cronjobs,daemonsets,deployments,endpoints,horizontalpodautoscalers,ingresses,jobs,leases,limitranges,mutatingwebhookconfigurations,namespaces,networkpolicies,nodes,persistentvolumeclaims,persistentvolumes,poddisruptionbudgets,pods,replicasets,replicationcontrollers,resourcequotas,secrets,services,statefulsets,storageclasses,validatingwebhookconfigurations,volumeattachments
      image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.15.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /livez
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: kube-state-metrics
      ports:
      - containerPort: 8080
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz
          port: 8081
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-kz4cb
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-39-234.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: tomer-prom-kube-state-metrics
    serviceAccountName: tomer-prom-kube-state-metrics
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-kz4cb
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T01:42:19Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T01:42:19Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T01:42:29Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T01:42:29Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T01:42:19Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://edd19c8f57996508d5e5427e40f4b5bd7c51daf4055212f6b6606ca401ea995f
      image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.15.0
      imageID: registry.k8s.io/kube-state-metrics/kube-state-metrics@sha256:db384bf43222b066c378e77027a675d4cd9911107adba46c2922b3a55e10d6fb
      lastState: {}
      name: kube-state-metrics
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-04T01:42:19Z"
    hostIP: 192.168.39.234
    hostIPs:
    - ip: 192.168.39.234
    phase: Running
    podIP: 192.168.44.189
    podIPs:
    - ip: 192.168.44.189
    qosClass: BestEffort
    startTime: "2025-03-04T01:42:19Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-03T20:39:11Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-2rj8h
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2356421"
    uid: ca17b7c2-ce48-4bf2-88aa-58c7f3828480
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-55-101.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-55-101.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T20:39:16Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T20:39:12Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T20:39:16Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T20:39:16Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T20:39:11Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://d4f58e416b1c0595690871539f509a2064e75f9e2ad0ffbf783fd5c7918fd2b5
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState: {}
      name: node-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-03T20:39:15Z"
    hostIP: 192.168.55.101
    hostIPs:
    - ip: 192.168.55.101
    phase: Running
    podIP: 192.168.55.101
    podIPs:
    - ip: 192.168.55.101
    qosClass: BestEffort
    startTime: "2025-03-03T20:39:12Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-04T05:29:32Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-4h9zs
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2971944"
    uid: d1d46829-f3dd-4a0b-a21a-fe76f7f8b89d
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-18-38.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-18-38.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T05:29:37Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T05:29:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T06:23:32Z"
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T05:29:37Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T05:29:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://3b87463d42a20ac37fb9ca73047c1d167ea18d1afd596b8c0df55434a1ac1f27
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState: {}
      name: node-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-04T05:29:37Z"
    hostIP: 192.168.18.38
    hostIPs:
    - ip: 192.168.18.38
    phase: Running
    podIP: 192.168.18.38
    podIPs:
    - ip: 192.168.18.38
    qosClass: BestEffort
    startTime: "2025-03-04T05:29:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-03T21:21:16Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-9smtw
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2397711"
    uid: 2b190b03-aa08-467a-847e-b219a5c21778
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-40-107.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-40-107.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T21:21:20Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T21:21:16Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T21:21:20Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T21:21:20Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T21:21:16Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://dcabe52fe81b6003df4c0a80a371075b83164319ad476bea1b66f65c45fe3792
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState: {}
      name: node-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-03T21:21:19Z"
    hostIP: 192.168.40.107
    hostIPs:
    - ip: 192.168.40.107
    phase: Running
    podIP: 192.168.40.107
    podIPs:
    - ip: 192.168.40.107
    qosClass: BestEffort
    startTime: "2025-03-03T21:21:16Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-03T19:50:32Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-bmkzx
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2298289"
    uid: 235f79e7-75aa-4a32-bda0-7c8f628ec9ec
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-50-44.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-50-44.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:34Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:43Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:43Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://f6a109615b5ea79566c960155181a9fb3fc410743d4a7d1ce19068e108d67609
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState: {}
      name: node-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-03T19:50:33Z"
    hostIP: 192.168.50.44
    hostIPs:
    - ip: 192.168.50.44
    phase: Running
    podIP: 192.168.50.44
    podIPs:
    - ip: 192.168.50.44
    qosClass: BestEffort
    startTime: "2025-03-03T19:50:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-03T19:50:32Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-csw7z
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2669631"
    uid: 2dec7fbb-ccc7-481a-b201-3022dcd70797
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-39-234.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-39-234.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:34Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:24:52Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:24:52Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://ede311c4ad3eaee534783a0b498302d7877a67344c4f82228728b7fdda85339c
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState:
        terminated:
          containerID: containerd://7149af461221a2604b9875d40a18c2c82140751439872dbda33c34f8fffb145b
          exitCode: 143
          finishedAt: "2025-03-03T22:40:21Z"
          reason: Error
          startedAt: "2025-03-03T22:06:27Z"
      name: node-exporter
      ready: true
      restartCount: 5
      started: true
      state:
        running:
          startedAt: "2025-03-03T22:40:27Z"
    hostIP: 192.168.39.234
    hostIPs:
    - ip: 192.168.39.234
    phase: Running
    podIP: 192.168.39.234
    podIPs:
    - ip: 192.168.39.234
    qosClass: BestEffort
    startTime: "2025-03-03T19:50:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-03T19:50:32Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-cxbh7
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2414845"
    uid: 63e8b749-5cb2-4f1d-af81-a4e6642e8e54
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-30-85.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-30-85.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:34Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T21:36:29Z"
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T21:15:53Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://53003e031b1d7a84fab869b50f5753c84ac47c85d4b55019f625f952866f6d18
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState:
        terminated:
          containerID: containerd://48baf082e894523c4c3051960023aa2bcb66f035262e7f0060252ec22bab75d7
          exitCode: 143
          finishedAt: "2025-03-03T21:15:47Z"
          reason: Error
          startedAt: "2025-03-03T19:50:33Z"
      name: node-exporter
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2025-03-03T21:15:53Z"
    hostIP: 192.168.30.85
    hostIPs:
    - ip: 192.168.30.85
    phase: Running
    podIP: 192.168.30.85
    podIPs:
    - ip: 192.168.30.85
    qosClass: BestEffort
    startTime: "2025-03-03T19:50:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-04T06:43:08Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-d2968
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2992610"
    uid: 90f1c86f-8cb6-410d-aeca-b0ac6005a5c7
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-40-80.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-40-80.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T06:43:11Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T06:43:09Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T06:43:22Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T06:43:22Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T06:43:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://daff8b813e8c120ba1def3f09a9f1d3d4af39d1477648e5366fb914190f7fa70
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState: {}
      name: node-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-04T06:43:22Z"
    hostIP: 192.168.40.80
    hostIPs:
    - ip: 192.168.40.80
    phase: Running
    podIP: 192.168.40.80
    podIPs:
    - ip: 192.168.40.80
    qosClass: BestEffort
    startTime: "2025-03-04T06:43:09Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-03T19:50:32Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-d45bf
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2448209"
    uid: b3e03863-4a7a-4e5d-aa8a-979ce2bc87fa
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-33-5.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-33-5.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:34Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T22:06:52Z"
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T22:04:03Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://4ef9309d681f317bf7b894bd8f571daf6ec93bcaacb9be6b2deb267bcbf77707
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState:
        terminated:
          containerID: containerd://780f8699400ee0376229155e52aaf1ff99e7ee04d6d6e67de8f365296498a81e
          exitCode: 143
          finishedAt: "2025-03-03T21:26:20Z"
          reason: Error
          startedAt: "2025-03-03T21:12:53Z"
      name: node-exporter
      ready: true
      restartCount: 4
      started: true
      state:
        running:
          startedAt: "2025-03-03T22:04:02Z"
    hostIP: 192.168.33.5
    hostIPs:
    - ip: 192.168.33.5
    phase: Running
    podIP: 192.168.33.5
    podIPs:
    - ip: 192.168.33.5
    qosClass: BestEffort
    startTime: "2025-03-03T19:50:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-04T00:25:19Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-d9ksf
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2589184"
    uid: 27477a2e-5afc-4a28-9479-35319b7c70c9
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-20-215.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-20-215.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:25:25Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:25:20Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:25:28Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:25:28Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:25:19Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://ebab7d38201df69d6315ddc4ec8be204b08cc7b87ae47c8c0f9c733d48bddf48
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState: {}
      name: node-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-04T00:25:24Z"
    hostIP: 192.168.20.215
    hostIPs:
    - ip: 192.168.20.215
    phase: Running
    podIP: 192.168.20.215
    podIPs:
    - ip: 192.168.20.215
    qosClass: BestEffort
    startTime: "2025-03-04T00:25:20Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-04T01:11:08Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-dw7vh
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2640127"
    uid: 88d1b805-c629-425e-8ff1-b73c83209bdf
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-6-218.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-6-218.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T01:11:12Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T01:11:08Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T01:11:12Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T01:11:12Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T01:11:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://a82f0d120140052fc0fa70c58ff63f20f191a4090c2a24a33847501595203907
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState: {}
      name: node-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-04T01:11:12Z"
    hostIP: 192.168.6.218
    hostIPs:
    - ip: 192.168.6.218
    phase: Running
    podIP: 192.168.6.218
    podIPs:
    - ip: 192.168.6.218
    qosClass: BestEffort
    startTime: "2025-03-04T01:11:08Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-04T05:51:24Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-jnt6j
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2949889"
    uid: d4f37a55-fed0-42aa-a84f-a1a9f88f84cf
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-38-66.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-38-66.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T05:51:27Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T05:51:24Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T06:03:11Z"
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T05:51:42Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T05:51:24Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://ddb4c8039e135a4a784bbb14744e3a2d1e4b71c2359dc210b4bef438c172c1e3
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState: {}
      name: node-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-04T05:51:42Z"
    hostIP: 192.168.38.66
    hostIPs:
    - ip: 192.168.38.66
    phase: Running
    podIP: 192.168.38.66
    podIPs:
    - ip: 192.168.38.66
    qosClass: BestEffort
    startTime: "2025-03-04T05:51:24Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-03T19:50:32Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-k9p5n
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2633173"
    uid: 1af66098-3e2d-4369-9e70-c3a7801ef558
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-39-115.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-39-115.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:34Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T01:04:45Z"
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:50:15Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://60becf9227d32d31e577b2feb5470e170d7978a36c3064ba4b7b1882b2e5a642
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState:
        terminated:
          containerID: containerd://6dc6f3a27a32964292580a8c09b8439e56957d3c774bc06608d6a9f5eb293fa5
          exitCode: 143
          finishedAt: "2025-03-04T00:50:12Z"
          reason: Error
          startedAt: "2025-03-03T21:34:01Z"
      name: node-exporter
      ready: true
      restartCount: 4
      started: true
      state:
        running:
          startedAt: "2025-03-04T00:50:15Z"
    hostIP: 192.168.39.115
    hostIPs:
    - ip: 192.168.39.115
    phase: Running
    podIP: 192.168.39.115
    podIPs:
    - ip: 192.168.39.115
    qosClass: BestEffort
    startTime: "2025-03-03T19:50:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-03T21:20:18Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-lkz64
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2395873"
    uid: 159acb72-04b8-4ece-a719-e029fadf1ef2
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-26-200.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-26-200.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T21:20:23Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T21:20:18Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T21:20:23Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T21:20:23Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T21:20:18Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://c2eb97d5cd991f770b3fe497e7fc12cde07df41a3a161ceb2ef568f16a3ebc6b
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState: {}
      name: node-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-03T21:20:23Z"
    hostIP: 192.168.26.200
    hostIPs:
    - ip: 192.168.26.200
    phase: Running
    podIP: 192.168.26.200
    podIPs:
    - ip: 192.168.26.200
    qosClass: BestEffort
    startTime: "2025-03-03T21:20:18Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-04T02:58:23Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-mgv4r
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2973760"
    uid: 03bee5e2-cd30-45a4-a33c-46aed9763eef
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-61-108.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-61-108.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T02:58:29Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T02:58:23Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T06:25:27Z"
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T06:00:26Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T02:58:23Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://8743b7ba4f13c1863f9e1fb975914a96800a8428c10f3f20b6839ed516dcbfac
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState:
        terminated:
          containerID: containerd://57f3f3aa25a71cfe9d7445e2c4b4565bfa4a1ef937da28aeab1347190b9ff343
          exitCode: 143
          finishedAt: "2025-03-04T06:00:23Z"
          reason: OOMKilled
          startedAt: "2025-03-04T02:58:28Z"
      name: node-exporter
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2025-03-04T06:00:26Z"
    hostIP: 192.168.61.108
    hostIPs:
    - ip: 192.168.61.108
    phase: Running
    podIP: 192.168.61.108
    podIPs:
    - ip: 192.168.61.108
    qosClass: BestEffort
    startTime: "2025-03-04T02:58:23Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-03T19:50:32Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-nb82b
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2298060"
    uid: e1d16c5f-292d-4a19-aedf-b8b844010718
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-2-164.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-2-164.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:36Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:36Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:36Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://c83ca0161ab778e309e9a04cd57a2ab246200394ebdae8e4a81dd01512caee79
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState: {}
      name: node-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-03T19:50:34Z"
    hostIP: 192.168.2.164
    hostIPs:
    - ip: 192.168.2.164
    phase: Running
    podIP: 192.168.2.164
    podIPs:
    - ip: 192.168.2.164
    qosClass: BestEffort
    startTime: "2025-03-03T19:50:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-03T19:50:32Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-p9lpq
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2704500"
    uid: f3d82a9a-6bcd-4b07-b911-ea656fb38a0c
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-22-135.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-22-135.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:33Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T02:08:05Z"
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T02:03:39Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://27d4cbdf9fc2d40f7c8cc04c33d88f185a9d20bdd4d7daf1cba70bcfd0c9b040
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState:
        waiting: {}
      name: node-exporter
      ready: true
      restartCount: 3
      started: true
      state:
        running:
          startedAt: "2025-03-04T02:03:38Z"
    hostIP: 192.168.22.135
    hostIPs:
    - ip: 192.168.22.135
    phase: Running
    podIP: 192.168.22.135
    podIPs:
    - ip: 192.168.22.135
    qosClass: BestEffort
    startTime: "2025-03-03T19:50:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-03T19:50:32Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-plqdp
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2471358"
    uid: 1e795f67-dff4-4558-9309-ced954b82d6e
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-26-38.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-26-38.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T22:28:24Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T22:28:20Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T22:30:39Z"
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T22:28:24Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://2d67060bc3934932bc95a3f6945257cd6126f00fe74fefae6757f8613a2206a2
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState: {}
      name: node-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-03T22:28:24Z"
    hostIP: 192.168.26.38
    hostIPs:
    - ip: 192.168.26.38
    phase: Running
    podIP: 192.168.26.38
    podIPs:
    - ip: 192.168.26.38
    qosClass: BestEffort
    startTime: "2025-03-03T22:28:20Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-03T19:50:32Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-psshs
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2297816"
    uid: eba471f2-cce9-4d6e-8a69-2529eb1792b3
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-18-180.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-18-180.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:33Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:33Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:33Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://a8a40d84e2703e910315e8991812478e46344f1ddf9733c66fa28085cc5ec055
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState: {}
      name: node-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-03T19:50:33Z"
    hostIP: 192.168.18.180
    hostIPs:
    - ip: 192.168.18.180
    phase: Running
    podIP: 192.168.18.180
    podIPs:
    - ip: 192.168.18.180
    qosClass: BestEffort
    startTime: "2025-03-03T19:50:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-04T00:49:10Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-qxxxf
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2616537"
    uid: 38b457ab-a06c-4797-a278-5e5c87d7b8b1
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-31-152.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-31-152.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:49:16Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:49:10Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:49:16Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:49:16Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:49:10Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://bd235802e749dea8e5775e50deec2bb0d1aee5dd822be4822fd3b06d0152f286
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState: {}
      name: node-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-04T00:49:16Z"
    hostIP: 192.168.31.152
    hostIPs:
    - ip: 192.168.31.152
    phase: Running
    podIP: 192.168.31.152
    podIPs:
    - ip: 192.168.31.152
    qosClass: BestEffort
    startTime: "2025-03-04T00:49:10Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-03T19:50:32Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-sr9x8
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2523337"
    uid: 0317d34c-565d-4ae7-b67b-6b0fb25d5f3f
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-38-247.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-38-247.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:33Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T23:21:23Z"
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:33Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://3fdf83fba73a648a074add201154cb267b2af209cbb0d47a231fe71512085376
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState: {}
      name: node-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-03T19:50:33Z"
    hostIP: 192.168.38.247
    hostIPs:
    - ip: 192.168.38.247
    phase: Running
    podIP: 192.168.38.247
    podIPs:
    - ip: 192.168.38.247
    qosClass: BestEffort
    startTime: "2025-03-03T19:50:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-03T19:50:32Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-srp4k
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2297621"
    uid: 3566fcac-ed65-47ff-87fe-9ebe8396d1ff
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-50-53.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-50-53.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: PodScheduled
    phase: Pending
    qosClass: BestEffort
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-03T19:50:32Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-sv9z4
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2493034"
    uid: aad4c299-e6da-4aa8-aa76-1df4ad9f9517
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-6-239.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-6-239.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:34Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T22:52:06Z"
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T22:48:46Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://1650da9c001f7d16926f48741825f3f886cb030a318f38dedb94df1f057c7f95
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState:
        terminated:
          containerID: containerd://7086cf93625c58561e5c0bb7aff0817acd95c923df4a22061d390f00154e2186
          exitCode: 143
          finishedAt: "2025-03-03T22:48:45Z"
          reason: Error
          startedAt: "2025-03-03T22:47:37Z"
      name: node-exporter
      ready: true
      restartCount: 4
      started: true
      state:
        running:
          startedAt: "2025-03-03T22:48:45Z"
    hostIP: 192.168.6.239
    hostIPs:
    - ip: 192.168.6.239
    phase: Running
    podIP: 192.168.6.239
    podIPs:
    - ip: 192.168.6.239
    qosClass: BestEffort
    startTime: "2025-03-03T19:50:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-03T19:50:32Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-t8wgz
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2297521"
    uid: d9cf31e9-aaad-40cb-92c1-7163c57e4001
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-6-62.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-6-62.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: PodScheduled
    phase: Pending
    qosClass: BestEffort
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-04T04:10:16Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-vbc8n
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2931358"
    uid: 2e970b21-452f-47a3-9aa6-5e5c9994fe2f
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-5-29.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-5-29.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T04:10:21Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T04:10:16Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T05:46:15Z"
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T04:10:21Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T04:10:16Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://d935df2adf0455e6c73357e64f3340563db1bbb52ebd934353e2fa42ca845e5d
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState: {}
      name: node-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-04T04:10:20Z"
    hostIP: 192.168.5.29
    hostIPs:
    - ip: 192.168.5.29
    phase: Running
    podIP: 192.168.5.29
    podIPs:
    - ip: 192.168.5.29
    qosClass: BestEffort
    startTime: "2025-03-04T04:10:16Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-04T00:11:16Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-wmzvv
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2572552"
    uid: f9676d4a-584a-4f6e-9719-c0a8e8e42325
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-32-113.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-32-113.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:11:22Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:11:16Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:11:22Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:11:22Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:11:16Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://ed8208bc390ba33c6f20ac67fb16089844f996672181722f84a8fb40bbb0596f
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState: {}
      name: node-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-04T00:11:21Z"
    hostIP: 192.168.32.113
    hostIPs:
    - ip: 192.168.32.113
    phase: Running
    podIP: 192.168.32.113
    podIPs:
    - ip: 192.168.32.113
    qosClass: BestEffort
    startTime: "2025-03-04T00:11:16Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-03T19:50:32Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-xh9c9
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2297831"
    uid: c7e74eef-dcdf-43ef-8fdc-0172b5151c31
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-9-180.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-9-180.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:33Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:33Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:33Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://1424934cfec00fc01a9c61d4d57335e8f9d88f8b362c6b3f1612155e5e189d43
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState: {}
      name: node-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-03T19:50:33Z"
    hostIP: 192.168.9.180
    hostIPs:
    - ip: 192.168.9.180
    phase: Running
    podIP: 192.168.9.180
    podIPs:
    - ip: 192.168.9.180
    qosClass: BestEffort
    startTime: "2025-03-03T19:50:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-04T00:13:26Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-xvkcn
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2575135"
    uid: f7cc890d-8087-4cca-a2c3-00a139a78a3c
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-61-123.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-61-123.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:13:29Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:13:27Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:13:41Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:13:41Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T00:13:26Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://47b581c11e062e8891c70c4b5f564292c526ba18cb2d6f980486e972bdaa9958
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState: {}
      name: node-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-04T00:13:41Z"
    hostIP: 192.168.61.123
    hostIPs:
    - ip: 192.168.61.123
    phase: Running
    podIP: 192.168.61.123
    podIPs:
    - ip: 192.168.61.123
    qosClass: BestEffort
    startTime: "2025-03-04T00:13:27Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-03T19:50:32Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-z64lb
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2823265"
    uid: 83319624-67d2-4bb4-813d-1328777ba507
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-47-192.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-47-192.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:34Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T04:02:05Z"
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T04:00:45Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-03T19:50:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://c65f08c3a5182475b210b2d6a2360b3cf11b1bd1a1ac44e754b9209d5d644493
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState:
        terminated:
          containerID: containerd://959fb227f351a08807853a5637fb699667d5c5aa07528f208e723850f34c8df5
          exitCode: 143
          finishedAt: "2025-03-04T04:00:40Z"
          reason: Error
          startedAt: "2025-03-04T03:27:38Z"
      name: node-exporter
      ready: true
      restartCount: 3
      started: true
      state:
        running:
          startedAt: "2025-03-04T04:00:45Z"
    hostIP: 192.168.47.192
    hostIPs:
    - ip: 192.168.47.192
    phase: Running
    podIP: 192.168.47.192
    podIPs:
    - ip: 192.168.47.192
    qosClass: BestEffort
    startTime: "2025-03-03T19:50:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-03-04T05:33:25Z"
    generateName: tomer-prom-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      controller-revision-hash: 6667f8b999
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      pod-template-generation: "1"
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter-zr82h
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: tomer-prom-prometheus-node-exporter
      uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
    resourceVersion: "2936301"
    uid: 4c737587-aaf7-479b-8318-cdf6d217dbb5
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-48-65.ec2.internal
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9107
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9107
        hostPort: 9107
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9107
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-192-168-48-65.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: tomer-prom-prometheus-node-exporter
    serviceAccountName: tomer-prom-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T05:33:31Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T05:33:25Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T05:50:40Z"
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T05:33:34Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T05:33:25Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://06eb1857a1fe8bedfeb854ea6a12aef7dbcb5c0d543737ddff749dcfc8c45633
      image: quay.io/prometheus/node-exporter:v1.9.0
      imageID: quay.io/prometheus/node-exporter@sha256:c99d7ee4d12a38661788f60d9eca493f08584e2e544bbd3b3fca64749f86b848
      lastState: {}
      name: node-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-04T05:33:30Z"
    hostIP: 192.168.48.65
    hostIPs:
    - ip: 192.168.48.65
    phase: Running
    podIP: 192.168.48.65
    podIPs:
    - ip: 192.168.48.65
    qosClass: BestEffort
    startTime: "2025-03-04T05:33:25Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-03-04T06:34:02Z"
    generateName: wordpress-tomer-684b75c784-
    labels:
      app: wordpress-tomer
      pod-template-hash: 684b75c784
    name: wordpress-tomer-684b75c784-2kz5z
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: wordpress-tomer-684b75c784
      uid: 6685e2e0-ea98-4d58-ad81-17f4f3f85e7a
    resourceVersion: "2989401"
    uid: e3e06bb4-d141-48f9-9615-ace14e2a2ff6
  spec:
    containers:
    - env:
      - name: WORDPRESS_DB_HOST
        value: mariadb-tomer
      - name: WORDPRESS_DB_USER
        value: wordpress
      - name: WORDPRESS_DB_PASSWORD
        value: wordpress
      - name: WORDPRESS_DB_NAME
        value: wordpress
      image: public.ecr.aws/c0m6s3p2/tomer-k8s-inegrative/wordpress:latest
      imagePullPolicy: Always
      name: wordpress-tomer
      ports:
      - containerPort: 80
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/www/html
        name: wordpress-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-d7wv2
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-9-180.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: wordpress-volume
      persistentVolumeClaim:
        claimName: wp-pv-claim-tomer
    - name: kube-api-access-d7wv2
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T06:40:30Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T06:40:23Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T06:40:30Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T06:40:30Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-04T06:40:23Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://10fadeb565d978ecf46796b35db32e1da26ec76232d34c4a77d02ffde186ee8e
      image: 992382545251.dkr.ecr.us-east-1.amazonaws.com/avior:wordpress-latest
      imageID: 992382545251.dkr.ecr.us-east-1.amazonaws.com/avior@sha256:68b1d7a10a51317d67493d1451c11aaaa57ae74875079eaf07e00a9b65d48055
      lastState: {}
      name: wordpress-tomer
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-03-04T06:40:29Z"
    hostIP: 192.168.9.180
    hostIPs:
    - ip: 192.168.9.180
    phase: Running
    podIP: 192.168.13.13
    podIPs:
    - ip: 192.168.13.13
    qosClass: BestEffort
    startTime: "2025-03-04T06:40:23Z"
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2025-03-03T19:50:33Z"
    labels:
      managed-by: prometheus-operator
      operated-alertmanager: "true"
    name: alertmanager-operated
    namespace: tomer
    ownerReferences:
    - apiVersion: monitoring.coreos.com/v1
      kind: Alertmanager
      name: tomer-prom-kube-prometheus-alertmanager
      uid: fc624fc7-4a6f-4d77-91de-80b9eafb56cb
    resourceVersion: "2297836"
    uid: 81fcd5cb-00ae-4cb4-a9bc-40060762dfb5
  spec:
    clusterIP: None
    clusterIPs:
    - None
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http-web
      port: 9093
      protocol: TCP
      targetPort: http-web
    - name: tcp-mesh
      port: 9094
      protocol: TCP
      targetPort: 9094
    - name: udp-mesh
      port: 9094
      protocol: UDP
      targetPort: 9094
    publishNotReadyAddresses: true
    selector:
      app.kubernetes.io/name: alertmanager
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"mariadb-tomer","namespace":"tomer"},"spec":{"ports":[{"port":3306,"protocol":"TCP","targetPort":3306}],"selector":{"app":"mariadb-tomer"},"type":"ClusterIP"}}
    creationTimestamp: "2025-03-03T18:52:15Z"
    name: mariadb-tomer
    namespace: tomer
    resourceVersion: "2243259"
    uid: fd54d62e-22ae-4268-8e5f-ecf4c75cf20a
  spec:
    clusterIP: 10.100.113.183
    clusterIPs:
    - 10.100.113.183
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 3306
      protocol: TCP
      targetPort: 3306
    selector:
      app: mariadb-tomer
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2025-03-03T19:50:35Z"
    labels:
      managed-by: prometheus-operator
      operated-prometheus: "true"
    name: prometheus-operated
    namespace: tomer
    ownerReferences:
    - apiVersion: monitoring.coreos.com/v1
      kind: Prometheus
      name: tomer-prom-kube-prometheus-prometheus
      uid: c567f2d1-7eb0-4d57-9d49-a147ae4e8d98
    resourceVersion: "2298021"
    uid: e4756ab9-a51d-43ee-a3d6-c2dd9c5dcece
  spec:
    clusterIP: None
    clusterIPs:
    - None
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http-web
      port: 9090
      protocol: TCP
      targetPort: http-web
    selector:
      app.kubernetes.io/name: prometheus
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-ingress
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T18:33:36Z"
    finalizers:
    - service.kubernetes.io/load-balancer-cleanup
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: tomer-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
    name: tomer-ingress-ingress-nginx-controller
    namespace: tomer
    resourceVersion: "2223902"
    uid: ab8b1519-715e-49cb-8ff7-49459d702cce
  spec:
    allocateLoadBalancerNodePorts: true
    clusterIP: 10.100.170.242
    clusterIPs:
    - 10.100.170.242
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - appProtocol: http
      name: http
      nodePort: 30296
      port: 80
      protocol: TCP
      targetPort: http
    - appProtocol: https
      name: https
      nodePort: 30802
      port: 443
      protocol: TCP
      targetPort: https
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: tomer-ingress
      app.kubernetes.io/name: ingress-nginx
    sessionAffinity: None
    type: LoadBalancer
  status:
    loadBalancer:
      ingress:
      - hostname: aab8b1519715e49cb8ff749459d702cc-1018892589.us-east-1.elb.amazonaws.com
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-ingress
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T18:33:36Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: tomer-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
    name: tomer-ingress-ingress-nginx-controller-admission
    namespace: tomer
    resourceVersion: "2223454"
    uid: 11550c2f-2bd0-47fe-8a12-efb457b7ce76
  spec:
    clusterIP: 10.100.81.86
    clusterIPs:
    - 10.100.81.86
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - appProtocol: https
      name: https-webhook
      port: 443
      protocol: TCP
      targetPort: webhook
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: tomer-ingress
      app.kubernetes.io/name: ingress-nginx
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: grafana
      app.kubernetes.io/version: 11.5.2
      helm.sh/chart: grafana-8.10.1
    name: tomer-prom-grafana
    namespace: tomer
    resourceVersion: "2297473"
    uid: 7dded5a6-21e8-420f-ba62-1fe78cd87284
  spec:
    clusterIP: 10.100.123.231
    clusterIPs:
    - 10.100.123.231
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http-web
      port: 80
      protocol: TCP
      targetPort: 3000
    selector:
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/name: grafana
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-alertmanager
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      heritage: Helm
      release: tomer-prom
      self-monitor: "true"
    name: tomer-prom-kube-prometheus-alertmanager
    namespace: tomer
    resourceVersion: "2297499"
    uid: 25b3958d-9d80-44c7-9aa0-940a2577fc44
  spec:
    clusterIP: 10.100.6.224
    clusterIPs:
    - 10.100.6.224
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http-web
      port: 9093
      protocol: TCP
      targetPort: 9093
    - appProtocol: http
      name: reloader-web
      port: 8080
      protocol: TCP
      targetPort: reloader-web
    selector:
      alertmanager: tomer-prom-kube-prometheus-alertmanager
      app.kubernetes.io/name: alertmanager
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-operator
      app.kubernetes.io/component: prometheus-operator
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kube-prometheus-stack-prometheus-operator
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-operator
    namespace: tomer
    resourceVersion: "2297490"
    uid: e632cbd3-4064-4f72-b131-1636652231c6
  spec:
    clusterIP: 10.100.245.0
    clusterIPs:
    - 10.100.245.0
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
    selector:
      app: kube-prometheus-stack-operator
      release: tomer-prom
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-prometheus
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      heritage: Helm
      release: tomer-prom
      self-monitor: "true"
    name: tomer-prom-kube-prometheus-prometheus
    namespace: tomer
    resourceVersion: "2297482"
    uid: 5c41829e-4ace-4cd5-b478-383315c81c71
  spec:
    clusterIP: 10.100.51.130
    clusterIPs:
    - 10.100.51.130
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http-web
      port: 9090
      protocol: TCP
      targetPort: 9090
    - appProtocol: http
      name: reloader-web
      port: 8080
      protocol: TCP
      targetPort: reloader-web
    selector:
      app.kubernetes.io/name: prometheus
      operator.prometheus.io/name: tomer-prom-kube-prometheus-prometheus
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kube-state-metrics
      app.kubernetes.io/part-of: kube-state-metrics
      app.kubernetes.io/version: 2.15.0
      helm.sh/chart: kube-state-metrics-5.30.0
      release: tomer-prom
    name: tomer-prom-kube-state-metrics
    namespace: tomer
    resourceVersion: "2297495"
    uid: 36863c42-e893-4fe9-acee-d90aedc1c059
  spec:
    clusterIP: 10.100.81.167
    clusterIPs:
    - 10.100.81.167
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/name: kube-state-metrics
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
      prometheus.io/scrape: "true"
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      helm.sh/chart: prometheus-node-exporter-4.44.1
      jobLabel: node-exporter
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter
    namespace: tomer
    resourceVersion: "2297486"
    uid: fb3f1ec3-6603-4a21-adf4-3b4de9f166ab
  spec:
    clusterIP: 10.100.209.163
    clusterIPs:
    - 10.100.209.163
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http-metrics
      port: 9107
      protocol: TCP
      targetPort: 9107
    selector:
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/name: prometheus-node-exporter
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"wordpress-tomer"},"name":"wordpress-tomer","namespace":"tomer"},"spec":{"ports":[{"port":80,"protocol":"TCP","targetPort":80}],"selector":{"app":"wordpress-tomer"},"type":"ClusterIP"}}
    creationTimestamp: "2025-03-03T18:52:09Z"
    labels:
      app: wordpress-tomer
    name: wordpress-tomer
    namespace: tomer
    resourceVersion: "2240698"
    uid: cc25a4a1-02aa-4355-9415-26297b6b0cb0
  spec:
    clusterIP: 10.100.6.142
    clusterIPs:
    - 10.100.6.142
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 80
      protocol: TCP
      targetPort: 80
    selector:
      app: wordpress-tomer
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    generation: 1
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.9.0
      helm.sh/chart: prometheus-node-exporter-4.44.1
      release: tomer-prom
    name: tomer-prom-prometheus-node-exporter
    namespace: tomer
    resourceVersion: "2992613"
    uid: f8c658fe-17f8-4320-9180-445ca0d0b29e
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: tomer-prom
        app.kubernetes.io/name: prometheus-node-exporter
    template:
      metadata:
        annotations:
          cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: metrics
          app.kubernetes.io/instance: tomer-prom
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: prometheus-node-exporter
          app.kubernetes.io/part-of: prometheus-node-exporter
          app.kubernetes.io/version: 1.9.0
          helm.sh/chart: prometheus-node-exporter-4.44.1
          jobLabel: node-exporter
          release: tomer-prom
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: eks.amazonaws.com/compute-type
                  operator: NotIn
                  values:
                  - fargate
                - key: type
                  operator: NotIn
                  values:
                  - virtual-kubelet
        automountServiceAccountToken: false
        containers:
        - args:
          - --path.procfs=/host/proc
          - --path.sysfs=/host/sys
          - --path.rootfs=/host/root
          - --path.udev.data=/host/root/run/udev/data
          - --web.listen-address=[$(HOST_IP)]:9107
          - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
          - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
          env:
          - name: HOST_IP
            value: 0.0.0.0
          image: quay.io/prometheus/node-exporter:v1.9.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 9107
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: node-exporter
          ports:
          - containerPort: 9107
            name: http-metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 9107
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/proc
            name: proc
            readOnly: true
          - mountPath: /host/sys
            name: sys
            readOnly: true
          - mountPath: /host/root
            mountPropagation: HostToContainer
            name: root
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        hostPID: true
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
        serviceAccount: tomer-prom-prometheus-node-exporter
        serviceAccountName: tomer-prom-prometheus-node-exporter
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          operator: Exists
        volumes:
        - hostPath:
            path: /proc
            type: ""
          name: proc
        - hostPath:
            path: /sys
            type: ""
          name: sys
        - hostPath:
            path: /
            type: ""
          name: root
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 29
    desiredNumberScheduled: 29
    numberAvailable: 14
    numberMisscheduled: 0
    numberReady: 14
    numberUnavailable: 15
    observedGeneration: 1
    updatedNumberScheduled: 29
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: tomer-ingress
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T18:33:36Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: tomer-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
    name: tomer-ingress-ingress-nginx-controller
    namespace: tomer
    resourceVersion: "2642294"
    uid: deb1c3ad-6e21-4415-bb7e-ea9ac49bba6a
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: tomer-ingress
        app.kubernetes.io/name: ingress-nginx
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: tomer-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.12.0
          helm.sh/chart: ingress-nginx-4.12.0
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/tomer-ingress-ingress-nginx-controller
          - --election-id=tomer-ingress-ingress-nginx-leader
          - --controller-class=k8s.io/ingress-nginx
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/tomer-ingress-ingress-nginx-controller
          - --watch-namespace=tomer
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.12.0@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsGroup: 82
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: tomer-ingress-ingress-nginx
        serviceAccountName: tomer-ingress-ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: tomer-ingress-ingress-nginx-admission
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-03-03T18:33:36Z"
      lastUpdateTime: "2025-03-03T18:33:57Z"
      message: ReplicaSet "tomer-ingress-ingress-nginx-controller-ccbfffdfb" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-03-04T01:13:06Z"
      lastUpdateTime: "2025-03-04T01:13:06Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: grafana
      app.kubernetes.io/version: 11.5.2
      helm.sh/chart: grafana-8.10.1
    name: tomer-prom-grafana
    namespace: tomer
    resourceVersion: "2398390"
    uid: 4d6c40a8-dbfb-4a2c-9bdf-66b53d856b7d
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: tomer-prom
        app.kubernetes.io/name: grafana
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          checksum/config: 0e9cbd0ea8e24e32f7dfca5bab17a2ba05652642f0a09a4882833ae88e4cc4a3
          checksum/sc-dashboard-provider-config: e70bf6a851099d385178a76de9757bb0bef8299da6d8443602590e44f05fdf24
          checksum/secret: 032056e9c62bbe9d1daa41ee49cd3d9524c076f51ca4c65adadf4ef08ef28712
          kubectl.kubernetes.io/default-container: grafana
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: tomer-prom
          app.kubernetes.io/name: grafana
          app.kubernetes.io/version: 11.5.2
          helm.sh/chart: grafana-8.10.1
      spec:
        automountServiceAccountToken: true
        containers:
        - env:
          - name: METHOD
            value: WATCH
          - name: LABEL
            value: grafana_dashboard
          - name: LABEL_VALUE
            value: "1"
          - name: FOLDER
            value: /tmp/dashboards
          - name: RESOURCE
            value: both
          - name: NAMESPACE
            value: ALL
          - name: REQ_USERNAME
            valueFrom:
              secretKeyRef:
                key: admin-user
                name: tomer-prom-grafana
          - name: REQ_PASSWORD
            valueFrom:
              secretKeyRef:
                key: admin-password
                name: tomer-prom-grafana
          - name: REQ_URL
            value: http://localhost:3000/api/admin/provisioning/dashboards/reload
          - name: REQ_METHOD
            value: POST
          image: quay.io/kiwigrid/k8s-sidecar:1.30.0
          imagePullPolicy: IfNotPresent
          name: grafana-sc-dashboard
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/dashboards
            name: sc-dashboard-volume
        - env:
          - name: METHOD
            value: WATCH
          - name: LABEL
            value: grafana_datasource
          - name: LABEL_VALUE
            value: "1"
          - name: FOLDER
            value: /etc/grafana/provisioning/datasources
          - name: RESOURCE
            value: both
          - name: REQ_USERNAME
            valueFrom:
              secretKeyRef:
                key: admin-user
                name: tomer-prom-grafana
          - name: REQ_PASSWORD
            valueFrom:
              secretKeyRef:
                key: admin-password
                name: tomer-prom-grafana
          - name: REQ_URL
            value: http://localhost:3000/api/admin/provisioning/datasources/reload
          - name: REQ_METHOD
            value: POST
          image: quay.io/kiwigrid/k8s-sidecar:1.30.0
          imagePullPolicy: IfNotPresent
          name: grafana-sc-datasources
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/grafana/provisioning/datasources
            name: sc-datasources-volume
        - env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: GF_SECURITY_ADMIN_USER
            valueFrom:
              secretKeyRef:
                key: admin-user
                name: tomer-prom-grafana
          - name: GF_SECURITY_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: admin-password
                name: tomer-prom-grafana
          - name: GF_PATHS_DATA
            value: /var/lib/grafana/
          - name: GF_PATHS_LOGS
            value: /var/log/grafana
          - name: GF_PATHS_PLUGINS
            value: /var/lib/grafana/plugins
          - name: GF_PATHS_PROVISIONING
            value: /etc/grafana/provisioning
          image: docker.io/grafana/grafana:11.5.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: grafana
          ports:
          - containerPort: 3000
            name: grafana
            protocol: TCP
          - containerPort: 9094
            name: gossip-tcp
            protocol: TCP
          - containerPort: 9094
            name: gossip-udp
            protocol: UDP
          - containerPort: 6060
            name: profiling
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/health
              port: 3000
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/grafana/grafana.ini
            name: config
            subPath: grafana.ini
          - mountPath: /var/lib/grafana
            name: storage
          - mountPath: /tmp/dashboards
            name: sc-dashboard-volume
          - mountPath: /etc/grafana/provisioning/dashboards/sc-dashboardproviders.yaml
            name: sc-dashboard-provider
            subPath: provider.yaml
          - mountPath: /etc/grafana/provisioning/datasources
            name: sc-datasources-volume
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 472
          runAsGroup: 472
          runAsNonRoot: true
          runAsUser: 472
        serviceAccount: tomer-prom-grafana
        serviceAccountName: tomer-prom-grafana
        shareProcessNamespace: false
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: tomer-prom-grafana
          name: config
        - emptyDir: {}
          name: storage
        - emptyDir: {}
          name: sc-dashboard-volume
        - configMap:
            defaultMode: 420
            name: tomer-prom-grafana-config-dashboards
          name: sc-dashboard-provider
        - emptyDir: {}
          name: sc-datasources-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-03-03T19:50:32Z"
      lastUpdateTime: "2025-03-03T19:51:14Z"
      message: ReplicaSet "tomer-prom-grafana-ff9df6d5b" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-03-03T21:21:33Z"
      lastUpdateTime: "2025-03-03T21:21:33Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    generation: 2
    labels:
      app: kube-prometheus-stack-operator
      app.kubernetes.io/component: prometheus-operator
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kube-prometheus-stack-prometheus-operator
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-operator
    namespace: tomer
    resourceVersion: "2613772"
    uid: 3f136773-ad03-4574-9e5a-70bd9f361b17
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: kube-prometheus-stack-operator
        release: tomer-prom
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2025-03-03T20:01:56Z"
        creationTimestamp: null
        labels:
          app: kube-prometheus-stack-operator
          app.kubernetes.io/component: prometheus-operator
          app.kubernetes.io/instance: tomer-prom
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: kube-prometheus-stack-prometheus-operator
          app.kubernetes.io/part-of: kube-prometheus-stack
          app.kubernetes.io/version: 69.6.0
          chart: kube-prometheus-stack-69.6.0
          heritage: Helm
          release: tomer-prom
      spec:
        automountServiceAccountToken: true
        containers:
        - args:
          - --kubelet-service=kube-system/tomer-prom-kube-prometheus-kubelet
          - --kubelet-endpoints=true
          - --kubelet-endpointslice=false
          - --localhost=127.0.0.1
          - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.80.1
          - --config-reloader-cpu-request=0
          - --config-reloader-cpu-limit=0
          - --config-reloader-memory-request=0
          - --config-reloader-memory-limit=0
          - --thanos-default-base-image=quay.io/thanos/thanos:v0.37.2
          - --secret-field-selector=type!=kubernetes.io/dockercfg,type!=kubernetes.io/service-account-token,type!=helm.sh/release.v1
          - --web.enable-tls=true
          - --web.cert-file=/cert/cert
          - --web.key-file=/cert/key
          - --web.listen-address=:10250
          - --web.tls-min-version=VersionTLS13
          env:
          - name: GOGC
            value: "30"
          image: quay.io/prometheus-operator/prometheus-operator:v0.80.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: kube-prometheus-stack
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /cert
            name: tls-secret
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: tomer-prom-kube-prometheus-operator
        serviceAccountName: tomer-prom-kube-prometheus-operator
        terminationGracePeriodSeconds: 30
        volumes:
        - name: tls-secret
          secret:
            defaultMode: 420
            secretName: tomer-prom-kube-prometheus-admission
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-03-03T19:50:32Z"
      lastUpdateTime: "2025-03-03T20:01:58Z"
      message: ReplicaSet "tomer-prom-kube-prometheus-operator-565866ff5b" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-03-04T00:47:26Z"
      lastUpdateTime: "2025-03-04T00:47:26Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    generation: 1
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kube-state-metrics
      app.kubernetes.io/part-of: kube-state-metrics
      app.kubernetes.io/version: 2.15.0
      helm.sh/chart: kube-state-metrics-5.30.0
      release: tomer-prom
    name: tomer-prom-kube-state-metrics
    namespace: tomer
    resourceVersion: "2677498"
    uid: f7135e73-db21-4c6f-92da-c41b4f005060
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: tomer-prom
        app.kubernetes.io/name: kube-state-metrics
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: metrics
          app.kubernetes.io/instance: tomer-prom
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: kube-state-metrics
          app.kubernetes.io/part-of: kube-state-metrics
          app.kubernetes.io/version: 2.15.0
          helm.sh/chart: kube-state-metrics-5.30.0
          release: tomer-prom
      spec:
        automountServiceAccountToken: true
        containers:
        - args:
          - --port=8080
          - --resources=certificatesigningrequests,configmaps,cronjobs,daemonsets,deployments,endpoints,horizontalpodautoscalers,ingresses,jobs,leases,limitranges,mutatingwebhookconfigurations,namespaces,networkpolicies,nodes,persistentvolumeclaims,persistentvolumes,poddisruptionbudgets,pods,replicasets,replicationcontrollers,resourcequotas,secrets,services,statefulsets,storageclasses,validatingwebhookconfigurations,volumeattachments
          image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.15.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: kube-state-metrics
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: tomer-prom-kube-state-metrics
        serviceAccountName: tomer-prom-kube-state-metrics
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-03-03T19:50:32Z"
      lastUpdateTime: "2025-03-03T19:50:41Z"
      message: ReplicaSet "tomer-prom-kube-state-metrics-66f858fb5b" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-03-04T01:42:29Z"
      lastUpdateTime: "2025-03-04T01:42:29Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"name":"wordpress-tomer","namespace":"tomer"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"wordpress-tomer"}},"template":{"metadata":{"labels":{"app":"wordpress-tomer"}},"spec":{"containers":[{"env":[{"name":"WORDPRESS_DB_HOST","value":"mariadb-tomer"},{"name":"WORDPRESS_DB_USER","value":"wordpress"},{"name":"WORDPRESS_DB_PASSWORD","value":"wordpress"},{"name":"WORDPRESS_DB_NAME","value":"wordpress"}],"image":"public.ecr.aws/c0m6s3p2/tomer-k8s-inegrative/wordpress:latest","name":"wordpress-tomer","ports":[{"containerPort":80}],"volumeMounts":[{"mountPath":"/var/www/html","name":"wordpress-volume"}]}],"volumes":[{"name":"wordpress-volume","persistentVolumeClaim":{"claimName":"wp-pv-claim-tomer"}}]}}}}
    creationTimestamp: "2025-03-03T18:52:09Z"
    generation: 3
    name: wordpress-tomer
    namespace: tomer
    resourceVersion: "2989405"
    uid: c2adbd2f-e923-49ef-a4ec-784710d56928
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: wordpress-tomer
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: wordpress-tomer
      spec:
        containers:
        - env:
          - name: WORDPRESS_DB_HOST
            value: mariadb-tomer
          - name: WORDPRESS_DB_USER
            value: wordpress
          - name: WORDPRESS_DB_PASSWORD
            value: wordpress
          - name: WORDPRESS_DB_NAME
            value: wordpress
          image: public.ecr.aws/c0m6s3p2/tomer-k8s-inegrative/wordpress:latest
          imagePullPolicy: Always
          name: wordpress-tomer
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/www/html
            name: wordpress-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: wordpress-volume
          persistentVolumeClaim:
            claimName: wp-pv-claim-tomer
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-03-03T18:52:09Z"
      lastUpdateTime: "2025-03-03T18:52:22Z"
      message: ReplicaSet "wordpress-tomer-684b75c784" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-03-04T06:40:30Z"
      lastUpdateTime: "2025-03-04T06:40:30Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: tomer-ingress
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T18:33:36Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: tomer-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: ccbfffdfb
    name: tomer-ingress-ingress-nginx-controller-ccbfffdfb
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: tomer-ingress-ingress-nginx-controller
      uid: deb1c3ad-6e21-4415-bb7e-ea9ac49bba6a
    resourceVersion: "2642292"
    uid: d63e3a04-22da-4d27-8e5f-310d9abebde1
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: tomer-ingress
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: ccbfffdfb
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: tomer-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.12.0
          helm.sh/chart: ingress-nginx-4.12.0
          pod-template-hash: ccbfffdfb
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/tomer-ingress-ingress-nginx-controller
          - --election-id=tomer-ingress-ingress-nginx-leader
          - --controller-class=k8s.io/ingress-nginx
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/tomer-ingress-ingress-nginx-controller
          - --watch-namespace=tomer
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.12.0@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsGroup: 82
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: tomer-ingress-ingress-nginx
        serviceAccountName: tomer-ingress-ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: tomer-ingress-ingress-nginx-admission
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/name: grafana
      app.kubernetes.io/version: 11.5.2
      helm.sh/chart: grafana-8.10.1
      pod-template-hash: ff9df6d5b
    name: tomer-prom-grafana-ff9df6d5b
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: tomer-prom-grafana
      uid: 4d6c40a8-dbfb-4a2c-9bdf-66b53d856b7d
    resourceVersion: "2398389"
    uid: 88ed0bd8-cd76-445f-b48a-cb1b9e04434c
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: tomer-prom
        app.kubernetes.io/name: grafana
        pod-template-hash: ff9df6d5b
    template:
      metadata:
        annotations:
          checksum/config: 0e9cbd0ea8e24e32f7dfca5bab17a2ba05652642f0a09a4882833ae88e4cc4a3
          checksum/sc-dashboard-provider-config: e70bf6a851099d385178a76de9757bb0bef8299da6d8443602590e44f05fdf24
          checksum/secret: 032056e9c62bbe9d1daa41ee49cd3d9524c076f51ca4c65adadf4ef08ef28712
          kubectl.kubernetes.io/default-container: grafana
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: tomer-prom
          app.kubernetes.io/name: grafana
          app.kubernetes.io/version: 11.5.2
          helm.sh/chart: grafana-8.10.1
          pod-template-hash: ff9df6d5b
      spec:
        automountServiceAccountToken: true
        containers:
        - env:
          - name: METHOD
            value: WATCH
          - name: LABEL
            value: grafana_dashboard
          - name: LABEL_VALUE
            value: "1"
          - name: FOLDER
            value: /tmp/dashboards
          - name: RESOURCE
            value: both
          - name: NAMESPACE
            value: ALL
          - name: REQ_USERNAME
            valueFrom:
              secretKeyRef:
                key: admin-user
                name: tomer-prom-grafana
          - name: REQ_PASSWORD
            valueFrom:
              secretKeyRef:
                key: admin-password
                name: tomer-prom-grafana
          - name: REQ_URL
            value: http://localhost:3000/api/admin/provisioning/dashboards/reload
          - name: REQ_METHOD
            value: POST
          image: quay.io/kiwigrid/k8s-sidecar:1.30.0
          imagePullPolicy: IfNotPresent
          name: grafana-sc-dashboard
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/dashboards
            name: sc-dashboard-volume
        - env:
          - name: METHOD
            value: WATCH
          - name: LABEL
            value: grafana_datasource
          - name: LABEL_VALUE
            value: "1"
          - name: FOLDER
            value: /etc/grafana/provisioning/datasources
          - name: RESOURCE
            value: both
          - name: REQ_USERNAME
            valueFrom:
              secretKeyRef:
                key: admin-user
                name: tomer-prom-grafana
          - name: REQ_PASSWORD
            valueFrom:
              secretKeyRef:
                key: admin-password
                name: tomer-prom-grafana
          - name: REQ_URL
            value: http://localhost:3000/api/admin/provisioning/datasources/reload
          - name: REQ_METHOD
            value: POST
          image: quay.io/kiwigrid/k8s-sidecar:1.30.0
          imagePullPolicy: IfNotPresent
          name: grafana-sc-datasources
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/grafana/provisioning/datasources
            name: sc-datasources-volume
        - env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: GF_SECURITY_ADMIN_USER
            valueFrom:
              secretKeyRef:
                key: admin-user
                name: tomer-prom-grafana
          - name: GF_SECURITY_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: admin-password
                name: tomer-prom-grafana
          - name: GF_PATHS_DATA
            value: /var/lib/grafana/
          - name: GF_PATHS_LOGS
            value: /var/log/grafana
          - name: GF_PATHS_PLUGINS
            value: /var/lib/grafana/plugins
          - name: GF_PATHS_PROVISIONING
            value: /etc/grafana/provisioning
          image: docker.io/grafana/grafana:11.5.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: grafana
          ports:
          - containerPort: 3000
            name: grafana
            protocol: TCP
          - containerPort: 9094
            name: gossip-tcp
            protocol: TCP
          - containerPort: 9094
            name: gossip-udp
            protocol: UDP
          - containerPort: 6060
            name: profiling
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/health
              port: 3000
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/grafana/grafana.ini
            name: config
            subPath: grafana.ini
          - mountPath: /var/lib/grafana
            name: storage
          - mountPath: /tmp/dashboards
            name: sc-dashboard-volume
          - mountPath: /etc/grafana/provisioning/dashboards/sc-dashboardproviders.yaml
            name: sc-dashboard-provider
            subPath: provider.yaml
          - mountPath: /etc/grafana/provisioning/datasources
            name: sc-datasources-volume
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 472
          runAsGroup: 472
          runAsNonRoot: true
          runAsUser: 472
        serviceAccount: tomer-prom-grafana
        serviceAccountName: tomer-prom-grafana
        shareProcessNamespace: false
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: tomer-prom-grafana
          name: config
        - emptyDir: {}
          name: storage
        - emptyDir: {}
          name: sc-dashboard-volume
        - configMap:
            defaultMode: 420
            name: tomer-prom-grafana-config-dashboards
          name: sc-dashboard-provider
        - emptyDir: {}
          name: sc-datasources-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T20:01:56Z"
    generation: 1
    labels:
      app: kube-prometheus-stack-operator
      app.kubernetes.io/component: prometheus-operator
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kube-prometheus-stack-prometheus-operator
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      heritage: Helm
      pod-template-hash: 565866ff5b
      release: tomer-prom
    name: tomer-prom-kube-prometheus-operator-565866ff5b
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: tomer-prom-kube-prometheus-operator
      uid: 3f136773-ad03-4574-9e5a-70bd9f361b17
    resourceVersion: "2613771"
    uid: 9aa6fb1f-f9db-4f24-a0e5-3a059a22c04b
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: kube-prometheus-stack-operator
        pod-template-hash: 565866ff5b
        release: tomer-prom
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2025-03-03T20:01:56Z"
        creationTimestamp: null
        labels:
          app: kube-prometheus-stack-operator
          app.kubernetes.io/component: prometheus-operator
          app.kubernetes.io/instance: tomer-prom
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: kube-prometheus-stack-prometheus-operator
          app.kubernetes.io/part-of: kube-prometheus-stack
          app.kubernetes.io/version: 69.6.0
          chart: kube-prometheus-stack-69.6.0
          heritage: Helm
          pod-template-hash: 565866ff5b
          release: tomer-prom
      spec:
        automountServiceAccountToken: true
        containers:
        - args:
          - --kubelet-service=kube-system/tomer-prom-kube-prometheus-kubelet
          - --kubelet-endpoints=true
          - --kubelet-endpointslice=false
          - --localhost=127.0.0.1
          - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.80.1
          - --config-reloader-cpu-request=0
          - --config-reloader-cpu-limit=0
          - --config-reloader-memory-request=0
          - --config-reloader-memory-limit=0
          - --thanos-default-base-image=quay.io/thanos/thanos:v0.37.2
          - --secret-field-selector=type!=kubernetes.io/dockercfg,type!=kubernetes.io/service-account-token,type!=helm.sh/release.v1
          - --web.enable-tls=true
          - --web.cert-file=/cert/cert
          - --web.key-file=/cert/key
          - --web.listen-address=:10250
          - --web.tls-min-version=VersionTLS13
          env:
          - name: GOGC
            value: "30"
          image: quay.io/prometheus-operator/prometheus-operator:v0.80.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: kube-prometheus-stack
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /cert
            name: tls-secret
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: tomer-prom-kube-prometheus-operator
        serviceAccountName: tomer-prom-kube-prometheus-operator
        terminationGracePeriodSeconds: 30
        volumes:
        - name: tls-secret
          secret:
            defaultMode: 420
            secretName: tomer-prom-kube-prometheus-admission
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    generation: 2
    labels:
      app: kube-prometheus-stack-operator
      app.kubernetes.io/component: prometheus-operator
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kube-prometheus-stack-prometheus-operator
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      heritage: Helm
      pod-template-hash: 74f6d4f94
      release: tomer-prom
    name: tomer-prom-kube-prometheus-operator-74f6d4f94
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: tomer-prom-kube-prometheus-operator
      uid: 3f136773-ad03-4574-9e5a-70bd9f361b17
    resourceVersion: "2316593"
    uid: 5c2ce1a3-2f2d-45a4-b0e4-e81a44d62de7
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: kube-prometheus-stack-operator
        pod-template-hash: 74f6d4f94
        release: tomer-prom
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kube-prometheus-stack-operator
          app.kubernetes.io/component: prometheus-operator
          app.kubernetes.io/instance: tomer-prom
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: kube-prometheus-stack-prometheus-operator
          app.kubernetes.io/part-of: kube-prometheus-stack
          app.kubernetes.io/version: 69.6.0
          chart: kube-prometheus-stack-69.6.0
          heritage: Helm
          pod-template-hash: 74f6d4f94
          release: tomer-prom
      spec:
        automountServiceAccountToken: true
        containers:
        - args:
          - --kubelet-service=kube-system/tomer-prom-kube-prometheus-kubelet
          - --kubelet-endpoints=true
          - --kubelet-endpointslice=false
          - --localhost=127.0.0.1
          - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.80.1
          - --config-reloader-cpu-request=0
          - --config-reloader-cpu-limit=0
          - --config-reloader-memory-request=0
          - --config-reloader-memory-limit=0
          - --thanos-default-base-image=quay.io/thanos/thanos:v0.37.2
          - --secret-field-selector=type!=kubernetes.io/dockercfg,type!=kubernetes.io/service-account-token,type!=helm.sh/release.v1
          - --web.enable-tls=true
          - --web.cert-file=/cert/cert
          - --web.key-file=/cert/key
          - --web.listen-address=:10250
          - --web.tls-min-version=VersionTLS13
          env:
          - name: GOGC
            value: "30"
          image: quay.io/prometheus-operator/prometheus-operator:v0.80.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: kube-prometheus-stack
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /cert
            name: tls-secret
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: tomer-prom-kube-prometheus-operator
        serviceAccountName: tomer-prom-kube-prometheus-operator
        terminationGracePeriodSeconds: 30
        volumes:
        - name: tls-secret
          secret:
            defaultMode: 420
            secretName: tomer-prom-kube-prometheus-admission
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    generation: 1
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kube-state-metrics
      app.kubernetes.io/part-of: kube-state-metrics
      app.kubernetes.io/version: 2.15.0
      helm.sh/chart: kube-state-metrics-5.30.0
      pod-template-hash: 66f858fb5b
      release: tomer-prom
    name: tomer-prom-kube-state-metrics-66f858fb5b
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: tomer-prom-kube-state-metrics
      uid: f7135e73-db21-4c6f-92da-c41b4f005060
    resourceVersion: "2677497"
    uid: 3df05e88-c7a5-40f5-9dda-789c588177ef
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: tomer-prom
        app.kubernetes.io/name: kube-state-metrics
        pod-template-hash: 66f858fb5b
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: metrics
          app.kubernetes.io/instance: tomer-prom
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: kube-state-metrics
          app.kubernetes.io/part-of: kube-state-metrics
          app.kubernetes.io/version: 2.15.0
          helm.sh/chart: kube-state-metrics-5.30.0
          pod-template-hash: 66f858fb5b
          release: tomer-prom
      spec:
        automountServiceAccountToken: true
        containers:
        - args:
          - --port=8080
          - --resources=certificatesigningrequests,configmaps,cronjobs,daemonsets,deployments,endpoints,horizontalpodautoscalers,ingresses,jobs,leases,limitranges,mutatingwebhookconfigurations,namespaces,networkpolicies,nodes,persistentvolumeclaims,persistentvolumes,poddisruptionbudgets,pods,replicasets,replicationcontrollers,resourcequotas,secrets,services,statefulsets,storageclasses,validatingwebhookconfigurations,volumeattachments
          image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.15.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: kube-state-metrics
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: tomer-prom-kube-state-metrics
        serviceAccountName: tomer-prom-kube-state-metrics
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-03-03T18:52:09Z"
    generation: 3
    labels:
      app: wordpress-tomer
      pod-template-hash: 684b75c784
    name: wordpress-tomer-684b75c784
    namespace: tomer
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: wordpress-tomer
      uid: c2adbd2f-e923-49ef-a4ec-784710d56928
    resourceVersion: "2989404"
    uid: 6685e2e0-ea98-4d58-ad81-17f4f3f85e7a
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: wordpress-tomer
        pod-template-hash: 684b75c784
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: wordpress-tomer
          pod-template-hash: 684b75c784
      spec:
        containers:
        - env:
          - name: WORDPRESS_DB_HOST
            value: mariadb-tomer
          - name: WORDPRESS_DB_USER
            value: wordpress
          - name: WORDPRESS_DB_PASSWORD
            value: wordpress
          - name: WORDPRESS_DB_NAME
            value: wordpress
          image: public.ecr.aws/c0m6s3p2/tomer-k8s-inegrative/wordpress:latest
          imagePullPolicy: Always
          name: wordpress-tomer
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/www/html
            name: wordpress-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: wordpress-volume
          persistentVolumeClaim:
            claimName: wp-pv-claim-tomer
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
      prometheus-operator-input-hash: "17679994672540126005"
    creationTimestamp: "2025-03-03T19:50:33Z"
    generation: 1
    labels:
      app: kube-prometheus-stack-alertmanager
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      heritage: Helm
      managed-by: prometheus-operator
      release: tomer-prom
    name: alertmanager-tomer-prom-kube-prometheus-alertmanager
    namespace: tomer
    ownerReferences:
    - apiVersion: monitoring.coreos.com/v1
      blockOwnerDeletion: true
      controller: true
      kind: Alertmanager
      name: tomer-prom-kube-prometheus-alertmanager
      uid: fc624fc7-4a6f-4d77-91de-80b9eafb56cb
    resourceVersion: "2632416"
    uid: fc95e2a2-efa1-41c4-a829-246d9671fe49
  spec:
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
    podManagementPolicy: Parallel
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        alertmanager: tomer-prom-kube-prometheus-alertmanager
        app.kubernetes.io/instance: tomer-prom-kube-prometheus-alertmanager
        app.kubernetes.io/managed-by: prometheus-operator
        app.kubernetes.io/name: alertmanager
    serviceName: alertmanager-operated
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: alertmanager
        creationTimestamp: null
        labels:
          alertmanager: tomer-prom-kube-prometheus-alertmanager
          app.kubernetes.io/instance: tomer-prom-kube-prometheus-alertmanager
          app.kubernetes.io/managed-by: prometheus-operator
          app.kubernetes.io/name: alertmanager
          app.kubernetes.io/version: 0.28.0
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - alertmanager
                  - key: alertmanager
                    operator: In
                    values:
                    - tomer-prom-kube-prometheus-alertmanager
                topologyKey: kubernetes.io/hostname
              weight: 100
        automountServiceAccountToken: true
        containers:
        - args:
          - --config.file=/etc/alertmanager/config_out/alertmanager.env.yaml
          - --storage.path=/alertmanager
          - --data.retention=120h
          - --cluster.listen-address=
          - --web.listen-address=:9093
          - --web.external-url=http://tomer-prom-kube-prometheus-alertmanager.tomer:9093
          - --web.route-prefix=/
          - --cluster.label=tomer/tomer-prom-kube-prometheus-alertmanager
          - --cluster.peer=alertmanager-tomer-prom-kube-prometheus-alertmanager-0.alertmanager-operated:9094
          - --cluster.reconnect-timeout=5m
          - --web.config.file=/etc/alertmanager/web_config/web-config.yaml
          env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          image: quay.io/prometheus/alertmanager:v0.28.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /-/healthy
              port: http-web
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          name: alertmanager
          ports:
          - containerPort: 9093
            name: http-web
            protocol: TCP
          - containerPort: 9094
            name: mesh-tcp
            protocol: TCP
          - containerPort: 9094
            name: mesh-udp
            protocol: UDP
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /-/ready
              port: http-web
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            requests:
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/alertmanager/config
            name: config-volume
          - mountPath: /etc/alertmanager/config_out
            name: config-out
            readOnly: true
          - mountPath: /etc/alertmanager/certs
            name: tls-assets
            readOnly: true
          - mountPath: /alertmanager
            name: alertmanager-tomer-prom-kube-prometheus-alertmanager-db
          - mountPath: /etc/alertmanager/web_config/web-config.yaml
            name: web-config
            readOnly: true
            subPath: web-config.yaml
        - args:
          - --listen-address=:8080
          - --web-config-file=/etc/alertmanager/web_config/web-config.yaml
          - --reload-url=http://127.0.0.1:9093/-/reload
          - --config-file=/etc/alertmanager/config/alertmanager.yaml.gz
          - --config-envsubst-file=/etc/alertmanager/config_out/alertmanager.env.yaml
          - --watched-dir=/etc/alertmanager/config
          command:
          - /bin/prometheus-config-reloader
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: SHARD
            value: "-1"
          image: quay.io/prometheus-operator/prometheus-config-reloader:v0.80.1
          imagePullPolicy: IfNotPresent
          name: config-reloader
          ports:
          - containerPort: 8080
            name: reloader-web
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/alertmanager/config
            name: config-volume
            readOnly: true
          - mountPath: /etc/alertmanager/config_out
            name: config-out
          - mountPath: /etc/alertmanager/web_config/web-config.yaml
            name: web-config
            readOnly: true
            subPath: web-config.yaml
        dnsPolicy: ClusterFirst
        initContainers:
        - args:
          - --watch-interval=0
          - --listen-address=:8081
          - --config-file=/etc/alertmanager/config/alertmanager.yaml.gz
          - --config-envsubst-file=/etc/alertmanager/config_out/alertmanager.env.yaml
          - --watched-dir=/etc/alertmanager/config
          command:
          - /bin/prometheus-config-reloader
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: SHARD
            value: "-1"
          image: quay.io/prometheus-operator/prometheus-config-reloader:v0.80.1
          imagePullPolicy: IfNotPresent
          name: init-config-reloader
          ports:
          - containerPort: 8081
            name: reloader-web
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/alertmanager/config
            name: config-volume
            readOnly: true
          - mountPath: /etc/alertmanager/config_out
            name: config-out
          - mountPath: /etc/alertmanager/web_config/web-config.yaml
            name: web-config
            readOnly: true
            subPath: web-config.yaml
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 2000
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: tomer-prom-kube-prometheus-alertmanager
        serviceAccountName: tomer-prom-kube-prometheus-alertmanager
        terminationGracePeriodSeconds: 120
        volumes:
        - name: config-volume
          secret:
            defaultMode: 420
            secretName: alertmanager-tomer-prom-kube-prometheus-alertmanager-generated
        - name: tls-assets
          projected:
            defaultMode: 420
            sources:
            - secret:
                name: alertmanager-tomer-prom-kube-prometheus-alertmanager-tls-assets-0
        - emptyDir:
            medium: Memory
          name: config-out
        - name: web-config
          secret:
            defaultMode: 420
            secretName: alertmanager-tomer-prom-kube-prometheus-alertmanager-web-config
        - emptyDir: {}
          name: alertmanager-tomer-prom-kube-prometheus-alertmanager-db
    updateStrategy:
      type: RollingUpdate
  status:
    availableReplicas: 1
    collisionCount: 0
    currentReplicas: 1
    currentRevision: alertmanager-tomer-prom-kube-prometheus-alertmanager-6c977cc745
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: alertmanager-tomer-prom-kube-prometheus-alertmanager-6c977cc745
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"StatefulSet","metadata":{"annotations":{},"name":"mariadb-tomer","namespace":"tomer"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"mariadb-tomer"}},"serviceName":"mariadb-tomer","template":{"metadata":{"labels":{"app":"mariadb-tomer"}},"spec":{"containers":[{"args":["--default-authentication-plugin=mysql_native_password"],"env":[{"name":"MYSQL_ROOT_PASSWORD","value":"somewordpress"},{"name":"MYSQL_DATABASE","value":"wordpress"},{"name":"MYSQL_USER","value":"wordpress"},{"name":"MYSQL_PASSWORD","value":"wordpress"}],"image":"public.ecr.aws/c0m6s3p2/tomer-k8s-inegrative/db:latest","name":"mariadb-tomer","ports":[{"containerPort":3306}],"volumeMounts":[{"mountPath":"/var/lib/mysql","name":"mariadb-storage"}]}],"volumes":[{"name":"mariadb-storage","persistentVolumeClaim":{"claimName":"mariadb-pvc"}}]}}}}
    creationTimestamp: "2025-03-03T18:52:15Z"
    generation: 1
    name: mariadb-tomer
    namespace: tomer
    resourceVersion: "2989681"
    uid: 825162db-a59b-4017-bfe9-a45920118263
  spec:
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: mariadb-tomer
    serviceName: mariadb-tomer
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mariadb-tomer
      spec:
        containers:
        - args:
          - --default-authentication-plugin=mysql_native_password
          env:
          - name: MYSQL_ROOT_PASSWORD
            value: somewordpress
          - name: MYSQL_DATABASE
            value: wordpress
          - name: MYSQL_USER
            value: wordpress
          - name: MYSQL_PASSWORD
            value: wordpress
          image: public.ecr.aws/c0m6s3p2/tomer-k8s-inegrative/db:latest
          imagePullPolicy: Always
          name: mariadb-tomer
          ports:
          - containerPort: 3306
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/mysql
            name: mariadb-storage
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: mariadb-storage
          persistentVolumeClaim:
            claimName: mariadb-pvc
    updateStrategy:
      rollingUpdate:
        partition: 0
      type: RollingUpdate
  status:
    availableReplicas: 1
    collisionCount: 0
    currentReplicas: 1
    currentRevision: mariadb-tomer-64d8b7f6fc
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: mariadb-tomer-64d8b7f6fc
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
      prometheus-operator-input-hash: "9315398928790810677"
    creationTimestamp: "2025-03-03T19:50:35Z"
    generation: 1
    labels:
      app: kube-prometheus-stack-prometheus
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      heritage: Helm
      managed-by: prometheus-operator
      operator.prometheus.io/mode: server
      operator.prometheus.io/name: tomer-prom-kube-prometheus-prometheus
      operator.prometheus.io/shard: "0"
      release: tomer-prom
    name: prometheus-tomer-prom-kube-prometheus-prometheus
    namespace: tomer
    ownerReferences:
    - apiVersion: monitoring.coreos.com/v1
      blockOwnerDeletion: true
      controller: true
      kind: Prometheus
      name: tomer-prom-kube-prometheus-prometheus
      uid: c567f2d1-7eb0-4d57-9d49-a147ae4e8d98
    resourceVersion: "2984907"
    uid: d73b48fa-129d-4da0-bc51-3b658ce83468
  spec:
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
    podManagementPolicy: Parallel
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: tomer-prom-kube-prometheus-prometheus
        app.kubernetes.io/managed-by: prometheus-operator
        app.kubernetes.io/name: prometheus
        operator.prometheus.io/name: tomer-prom-kube-prometheus-prometheus
        operator.prometheus.io/shard: "0"
        prometheus: tomer-prom-kube-prometheus-prometheus
    serviceName: prometheus-operated
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: prometheus
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: tomer-prom-kube-prometheus-prometheus
          app.kubernetes.io/managed-by: prometheus-operator
          app.kubernetes.io/name: prometheus
          app.kubernetes.io/version: 3.2.1
          operator.prometheus.io/name: tomer-prom-kube-prometheus-prometheus
          operator.prometheus.io/shard: "0"
          prometheus: tomer-prom-kube-prometheus-prometheus
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - prometheus
                  - key: prometheus
                    operator: In
                    values:
                    - tomer-prom-kube-prometheus-prometheus
                topologyKey: kubernetes.io/hostname
              weight: 100
        automountServiceAccountToken: true
        containers:
        - args:
          - --web.console.templates=/etc/prometheus/consoles
          - --web.console.libraries=/etc/prometheus/console_libraries
          - --config.file=/etc/prometheus/config_out/prometheus.env.yaml
          - --web.enable-lifecycle
          - --web.external-url=http://tomer-prom-kube-prometheus-prometheus.tomer:9090
          - --web.route-prefix=/
          - --storage.tsdb.retention.time=10d
          - --storage.tsdb.path=/prometheus
          - --storage.tsdb.wal-compression
          - --web.config.file=/etc/prometheus/web_config/web-config.yaml
          image: quay.io/prometheus/prometheus:v3.2.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /-/healthy
              port: http-web
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          name: prometheus
          ports:
          - containerPort: 9090
            name: http-web
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: http-web
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          startupProbe:
            failureThreshold: 60
            httpGet:
              path: /-/ready
              port: http-web
              scheme: HTTP
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 3
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/prometheus/config_out
            name: config-out
            readOnly: true
          - mountPath: /etc/prometheus/certs
            name: tls-assets
            readOnly: true
          - mountPath: /prometheus
            name: prometheus-tomer-prom-kube-prometheus-prometheus-db
          - mountPath: /etc/prometheus/rules/prometheus-tomer-prom-kube-prometheus-prometheus-rulefiles-0
            name: prometheus-tomer-prom-kube-prometheus-prometheus-rulefiles-0
          - mountPath: /etc/prometheus/web_config/web-config.yaml
            name: web-config
            readOnly: true
            subPath: web-config.yaml
        - args:
          - --listen-address=:8080
          - --reload-url=http://127.0.0.1:9090/-/reload
          - --config-file=/etc/prometheus/config/prometheus.yaml.gz
          - --config-envsubst-file=/etc/prometheus/config_out/prometheus.env.yaml
          - --watched-dir=/etc/prometheus/rules/prometheus-tomer-prom-kube-prometheus-prometheus-rulefiles-0
          command:
          - /bin/prometheus-config-reloader
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: SHARD
            value: "0"
          image: quay.io/prometheus-operator/prometheus-config-reloader:v0.80.1
          imagePullPolicy: IfNotPresent
          name: config-reloader
          ports:
          - containerPort: 8080
            name: reloader-web
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/prometheus/config
            name: config
          - mountPath: /etc/prometheus/config_out
            name: config-out
          - mountPath: /etc/prometheus/rules/prometheus-tomer-prom-kube-prometheus-prometheus-rulefiles-0
            name: prometheus-tomer-prom-kube-prometheus-prometheus-rulefiles-0
        dnsPolicy: ClusterFirst
        initContainers:
        - args:
          - --watch-interval=0
          - --listen-address=:8081
          - --config-file=/etc/prometheus/config/prometheus.yaml.gz
          - --config-envsubst-file=/etc/prometheus/config_out/prometheus.env.yaml
          - --watched-dir=/etc/prometheus/rules/prometheus-tomer-prom-kube-prometheus-prometheus-rulefiles-0
          command:
          - /bin/prometheus-config-reloader
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: SHARD
            value: "0"
          image: quay.io/prometheus-operator/prometheus-config-reloader:v0.80.1
          imagePullPolicy: IfNotPresent
          name: init-config-reloader
          ports:
          - containerPort: 8081
            name: reloader-web
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/prometheus/config
            name: config
          - mountPath: /etc/prometheus/config_out
            name: config-out
          - mountPath: /etc/prometheus/rules/prometheus-tomer-prom-kube-prometheus-prometheus-rulefiles-0
            name: prometheus-tomer-prom-kube-prometheus-prometheus-rulefiles-0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 2000
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: tomer-prom-kube-prometheus-prometheus
        serviceAccountName: tomer-prom-kube-prometheus-prometheus
        shareProcessNamespace: false
        terminationGracePeriodSeconds: 600
        volumes:
        - name: config
          secret:
            defaultMode: 420
            secretName: prometheus-tomer-prom-kube-prometheus-prometheus
        - name: tls-assets
          projected:
            defaultMode: 420
            sources:
            - secret:
                name: prometheus-tomer-prom-kube-prometheus-prometheus-tls-assets-0
        - emptyDir:
            medium: Memory
          name: config-out
        - configMap:
            defaultMode: 420
            name: prometheus-tomer-prom-kube-prometheus-prometheus-rulefiles-0
          name: prometheus-tomer-prom-kube-prometheus-prometheus-rulefiles-0
        - name: web-config
          secret:
            defaultMode: 420
            secretName: prometheus-tomer-prom-kube-prometheus-prometheus-web-config
        - emptyDir: {}
          name: prometheus-tomer-prom-kube-prometheus-prometheus-db
    updateStrategy:
      type: RollingUpdate
  status:
    availableReplicas: 1
    collisionCount: 0
    currentReplicas: 1
    currentRevision: prometheus-tomer-prom-kube-prometheus-prometheus-78648548c
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: prometheus-tomer-prom-kube-prometheus-prometheus-78648548c
    updatedReplicas: 1
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDBTCCAe2gAwIBAgIIMMixBFGmp7UwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
      AxMKa3ViZXJuZXRlczAeFw0yNTAyMjcxNzE2NDFaFw0zNTAyMjUxNzIxNDFaMBUx
      EzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
      AoIBAQDACr7UoI7iTW4i4NyXLSxI8jx52IdRAe+/P+zW0ITq8j7BQxV08Qk7gvM9
      +ub4dSLMlsQbSzYQBcLCWuKsnV8w0f0HKaDyvVENaIs86jToGZi9iZ6s/ebRwxY2
      THsSe99kt1OcExVsfq61HaAqbdzGyfj5C6MPvUVOf0IE2dULuxYuok5sLeaWhMzJ
      XiS9Kl6/bK+MKsBXAElh9EbHahW+AeqamvRcfzdFHXUjoSvcrp0YNO5F1KJnxQ59
      KtZbQOpMRu4+H9ZgP9m/Ct9fpI010srVA/goOoeedAM9gZg+yHkVM0oSNujrkygh
      dbFFv68zWj0FJSDdOM8nPihOq5QBAgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP
      BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBS4E/xESoBZh6YWzlr0G0CtcbH0xDAV
      BgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQBU8knRibt+
      SYlzEkBcDf97kZ2Jz7NoDtOJx4Zm80ZAVnMh8hie4nzpkpcudEJxJKmlOWkzUlRs
      TqjVx4W85bzouv9UvYmmQ0tpLCNTkVAjSLRXlmkJ5rOoUW/jH9PAZcCoryMwldpF
      +ePpmWX3/GcGV744NLpTV1UD26wvqfx8vRM6x9v1j4Nt+HlwwLBlcI6A1UcJ/DZA
      WL3AJwsIeiwE/mHZYFSGGKPO9Px250KAWXlOwNnMqN+Hid79lr353rhwnKY4sv1G
      ULVSc81q/lLwrkYp/6/uLbOpIR4LU0eFs+7hxyQ4r/NXTTBGjC+fnHXEJAj8f/2W
      Wro6O4DCXSRA
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2025-02-28T11:09:58Z"
    name: kube-root-ca.crt
    namespace: tomer
    resourceVersion: "176559"
    uid: b08f84cc-cc69-4719-b8cd-5fe15a340515
- apiVersion: v1
  data:
    tomer-tomer-prom-kube-prometheus-alertmanager.rules-2507d18b-a5a9-4d91-9378-2207ca53a1aa.yaml: |
      groups:
      - name: alertmanager.rules
        rules:
        - alert: AlertmanagerFailedReload
          annotations:
            description: Configuration has failed to load for {{ $labels.namespace }}/{{
              $labels.pod}}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/alertmanager/alertmanagerfailedreload
            summary: Reloading an Alertmanager configuration has failed.
          expr: |-
            # Without max_over_time, failed scrapes could create false negatives, see
            # https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.
            max_over_time(alertmanager_config_last_reload_successful{job="tomer-prom-kube-prometheus-alertmanager",namespace="tomer"}[5m]) == 0
          for: 10m
          labels:
            severity: critical
        - alert: AlertmanagerMembersInconsistent
          annotations:
            description: Alertmanager {{ $labels.namespace }}/{{ $labels.pod}} has only
              found {{ $value }} members of the {{$labels.job}} cluster.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/alertmanager/alertmanagermembersinconsistent
            summary: A member of an Alertmanager cluster has not found all other cluster
              members.
          expr: |-
            # Without max_over_time, failed scrapes could create false negatives, see
            # https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.
              max_over_time(alertmanager_cluster_members{job="tomer-prom-kube-prometheus-alertmanager",namespace="tomer"}[5m])
            < on (namespace,service,cluster) group_left
              count by (namespace,service,cluster) (max_over_time(alertmanager_cluster_members{job="tomer-prom-kube-prometheus-alertmanager",namespace="tomer"}[5m]))
          for: 15m
          labels:
            severity: critical
        - alert: AlertmanagerFailedToSendAlerts
          annotations:
            description: Alertmanager {{ $labels.namespace }}/{{ $labels.pod}} failed to
              send {{ $value | humanizePercentage }} of notifications to {{ $labels.integration
              }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/alertmanager/alertmanagerfailedtosendalerts
            summary: An Alertmanager instance failed to send notifications.
          expr: |-
            (
              rate(alertmanager_notifications_failed_total{job="tomer-prom-kube-prometheus-alertmanager",namespace="tomer"}[5m])
            /
              ignoring (reason) group_left rate(alertmanager_notifications_total{job="tomer-prom-kube-prometheus-alertmanager",namespace="tomer"}[5m])
            )
            > 0.01
          for: 5m
          labels:
            severity: warning
        - alert: AlertmanagerClusterFailedToSendAlerts
          annotations:
            description: The minimum notification failure rate to {{ $labels.integration
              }} sent from any instance in the {{$labels.job}} cluster is {{ $value | humanizePercentage
              }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/alertmanager/alertmanagerclusterfailedtosendalerts
            summary: All Alertmanager instances in a cluster failed to send notifications
              to a critical integration.
          expr: |-
            min by (namespace,service, integration) (
              rate(alertmanager_notifications_failed_total{job="tomer-prom-kube-prometheus-alertmanager",namespace="tomer", integration=~`.*`}[5m])
            /
              ignoring (reason) group_left rate(alertmanager_notifications_total{job="tomer-prom-kube-prometheus-alertmanager",namespace="tomer", integration=~`.*`}[5m])
            )
            > 0.01
          for: 5m
          labels:
            severity: critical
        - alert: AlertmanagerClusterFailedToSendAlerts
          annotations:
            description: The minimum notification failure rate to {{ $labels.integration
              }} sent from any instance in the {{$labels.job}} cluster is {{ $value | humanizePercentage
              }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/alertmanager/alertmanagerclusterfailedtosendalerts
            summary: All Alertmanager instances in a cluster failed to send notifications
              to a non-critical integration.
          expr: |-
            min by (namespace,service, integration) (
              rate(alertmanager_notifications_failed_total{job="tomer-prom-kube-prometheus-alertmanager",namespace="tomer", integration!~`.*`}[5m])
            /
              ignoring (reason) group_left rate(alertmanager_notifications_total{job="tomer-prom-kube-prometheus-alertmanager",namespace="tomer", integration!~`.*`}[5m])
            )
            > 0.01
          for: 5m
          labels:
            severity: warning
        - alert: AlertmanagerConfigInconsistent
          annotations:
            description: Alertmanager instances within the {{$labels.job}} cluster have
              different configurations.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/alertmanager/alertmanagerconfiginconsistent
            summary: Alertmanager instances within the same cluster have different configurations.
          expr: |-
            count by (namespace,service,cluster) (
              count_values by (namespace,service,cluster) ("config_hash", alertmanager_config_hash{job="tomer-prom-kube-prometheus-alertmanager",namespace="tomer"})
            )
            != 1
          for: 20m
          labels:
            severity: critical
        - alert: AlertmanagerClusterDown
          annotations:
            description: '{{ $value | humanizePercentage }} of Alertmanager instances within
              the {{$labels.job}} cluster have been up for less than half of the last 5m.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/alertmanager/alertmanagerclusterdown
            summary: Half or more of the Alertmanager instances within the same cluster
              are down.
          expr: |-
            (
              count by (namespace,service,cluster) (
                avg_over_time(up{job="tomer-prom-kube-prometheus-alertmanager",namespace="tomer"}[5m]) < 0.5
              )
            /
              count by (namespace,service,cluster) (
                up{job="tomer-prom-kube-prometheus-alertmanager",namespace="tomer"}
              )
            )
            >= 0.5
          for: 5m
          labels:
            severity: critical
        - alert: AlertmanagerClusterCrashlooping
          annotations:
            description: '{{ $value | humanizePercentage }} of Alertmanager instances within
              the {{$labels.job}} cluster have restarted at least 5 times in the last 10m.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/alertmanager/alertmanagerclustercrashlooping
            summary: Half or more of the Alertmanager instances within the same cluster
              are crashlooping.
          expr: |-
            (
              count by (namespace,service,cluster) (
                changes(process_start_time_seconds{job="tomer-prom-kube-prometheus-alertmanager",namespace="tomer"}[10m]) > 4
              )
            /
              count by (namespace,service,cluster) (
                up{job="tomer-prom-kube-prometheus-alertmanager",namespace="tomer"}
              )
            )
            >= 0.5
          for: 5m
          labels:
            severity: critical
    tomer-tomer-prom-kube-prometheus-config-reloaders-60e98950-3db6-45bf-86f5-1ef8ba5b0490.yaml: |
      groups:
      - name: config-reloaders
        rules:
        - alert: ConfigReloaderSidecarErrors
          annotations:
            description: |-
              Errors encountered while the {{$labels.pod}} config-reloader sidecar attempts to sync config in {{$labels.namespace}} namespace.
              As a result, configuration for service running in {{$labels.pod}} may be stale and cannot be updated anymore.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus-operator/configreloadersidecarerrors
            summary: config-reloader sidecar has not had a successful reload for 10m
          expr: max_over_time(reloader_last_reload_successful{namespace=~".+"}[5m]) == 0
          for: 10m
          labels:
            severity: warning
    tomer-tomer-prom-kube-prometheus-etcd-f0a21d68-d75d-4e63-a6ab-d078c7bb709b.yaml: |
      groups:
      - name: etcd
        rules:
        - alert: etcdMembersDown
          annotations:
            description: 'etcd cluster "{{ $labels.job }}": members are down ({{ $value
              }}).'
            summary: etcd cluster members are down.
          expr: |-
            max without (endpoint) (
              sum without (instance, pod) (up{job=~".*etcd.*"} == bool 0)
            or
              count without (To) (
                sum without (instance, pod) (rate(etcd_network_peer_sent_failures_total{job=~".*etcd.*"}[120s])) > 0.01
              )
            )
            > 0
          for: 20m
          labels:
            severity: warning
        - alert: etcdInsufficientMembers
          annotations:
            description: 'etcd cluster "{{ $labels.job }}": insufficient members ({{ $value
              }}).'
            summary: etcd cluster has insufficient number of members.
          expr: sum(up{job=~".*etcd.*"} == bool 1) without (instance, pod) < ((count(up{job=~".*etcd.*"})
            without (instance, pod) + 1) / 2)
          for: 3m
          labels:
            severity: critical
        - alert: etcdNoLeader
          annotations:
            description: 'etcd cluster "{{ $labels.job }}": member {{ $labels.instance }}
              has no leader.'
            summary: etcd cluster has no leader.
          expr: etcd_server_has_leader{job=~".*etcd.*"} == 0
          for: 1m
          labels:
            severity: critical
        - alert: etcdHighNumberOfLeaderChanges
          annotations:
            description: 'etcd cluster "{{ $labels.job }}": {{ $value }} leader changes
              within the last 15 minutes. Frequent elections may be a sign of insufficient
              resources, high network latency, or disruptions by other components and should
              be investigated.'
            summary: etcd cluster has high number of leader changes.
          expr: increase((max without (instance, pod) (etcd_server_leader_changes_seen_total{job=~".*etcd.*"})
            or 0*absent(etcd_server_leader_changes_seen_total{job=~".*etcd.*"}))[15m:1m])
            >= 4
          for: 5m
          labels:
            severity: warning
        - alert: etcdHighNumberOfFailedGRPCRequests
          annotations:
            description: 'etcd cluster "{{ $labels.job }}": {{ $value }}% of requests for
              {{ $labels.grpc_method }} failed on etcd instance {{ $labels.instance }}.'
            summary: etcd cluster has high number of failed grpc requests.
          expr: |-
            100 * sum(rate(grpc_server_handled_total{job=~".*etcd.*", grpc_code=~"Unknown|FailedPrecondition|ResourceExhausted|Internal|Unavailable|DataLoss|DeadlineExceeded"}[5m])) without (grpc_type, grpc_code)
              /
            sum(rate(grpc_server_handled_total{job=~".*etcd.*"}[5m])) without (grpc_type, grpc_code)
              > 1
          for: 10m
          labels:
            severity: warning
        - alert: etcdHighNumberOfFailedGRPCRequests
          annotations:
            description: 'etcd cluster "{{ $labels.job }}": {{ $value }}% of requests for
              {{ $labels.grpc_method }} failed on etcd instance {{ $labels.instance }}.'
            summary: etcd cluster has high number of failed grpc requests.
          expr: |-
            100 * sum(rate(grpc_server_handled_total{job=~".*etcd.*", grpc_code=~"Unknown|FailedPrecondition|ResourceExhausted|Internal|Unavailable|DataLoss|DeadlineExceeded"}[5m])) without (grpc_type, grpc_code)
              /
            sum(rate(grpc_server_handled_total{job=~".*etcd.*"}[5m])) without (grpc_type, grpc_code)
              > 5
          for: 5m
          labels:
            severity: critical
        - alert: etcdGRPCRequestsSlow
          annotations:
            description: 'etcd cluster "{{ $labels.job }}": 99th percentile of gRPC requests
              is {{ $value }}s on etcd instance {{ $labels.instance }} for {{ $labels.grpc_method
              }} method.'
            summary: etcd grpc requests are slow
          expr: |-
            histogram_quantile(0.99, sum(rate(grpc_server_handling_seconds_bucket{job=~".*etcd.*", grpc_method!="Defragment", grpc_type="unary"}[5m])) without(grpc_type))
            > 0.15
          for: 10m
          labels:
            severity: critical
        - alert: etcdMemberCommunicationSlow
          annotations:
            description: 'etcd cluster "{{ $labels.job }}": member communication with {{
              $labels.To }} is taking {{ $value }}s on etcd instance {{ $labels.instance
              }}.'
            summary: etcd cluster member communication is slow.
          expr: |-
            histogram_quantile(0.99, rate(etcd_network_peer_round_trip_time_seconds_bucket{job=~".*etcd.*"}[5m]))
            > 0.15
          for: 10m
          labels:
            severity: warning
        - alert: etcdHighNumberOfFailedProposals
          annotations:
            description: 'etcd cluster "{{ $labels.job }}": {{ $value }} proposal failures
              within the last 30 minutes on etcd instance {{ $labels.instance }}.'
            summary: etcd cluster has high number of proposal failures.
          expr: rate(etcd_server_proposals_failed_total{job=~".*etcd.*"}[15m]) > 5
          for: 15m
          labels:
            severity: warning
        - alert: etcdHighFsyncDurations
          annotations:
            description: 'etcd cluster "{{ $labels.job }}": 99th percentile fsync durations
              are {{ $value }}s on etcd instance {{ $labels.instance }}.'
            summary: etcd cluster 99th percentile fsync durations are too high.
          expr: |-
            histogram_quantile(0.99, rate(etcd_disk_wal_fsync_duration_seconds_bucket{job=~".*etcd.*"}[5m]))
            > 0.5
          for: 10m
          labels:
            severity: warning
        - alert: etcdHighFsyncDurations
          annotations:
            description: 'etcd cluster "{{ $labels.job }}": 99th percentile fsync durations
              are {{ $value }}s on etcd instance {{ $labels.instance }}.'
            summary: etcd cluster 99th percentile fsync durations are too high.
          expr: |-
            histogram_quantile(0.99, rate(etcd_disk_wal_fsync_duration_seconds_bucket{job=~".*etcd.*"}[5m]))
            > 1
          for: 10m
          labels:
            severity: critical
        - alert: etcdHighCommitDurations
          annotations:
            description: 'etcd cluster "{{ $labels.job }}": 99th percentile commit durations
              {{ $value }}s on etcd instance {{ $labels.instance }}.'
            summary: etcd cluster 99th percentile commit durations are too high.
          expr: |-
            histogram_quantile(0.99, rate(etcd_disk_backend_commit_duration_seconds_bucket{job=~".*etcd.*"}[5m]))
            > 0.25
          for: 10m
          labels:
            severity: warning
        - alert: etcdDatabaseQuotaLowSpace
          annotations:
            description: 'etcd cluster "{{ $labels.job }}": database size exceeds the defined
              quota on etcd instance {{ $labels.instance }}, please defrag or increase the
              quota as the writes to etcd will be disabled when it is full.'
            summary: etcd cluster database is running full.
          expr: (last_over_time(etcd_mvcc_db_total_size_in_bytes{job=~".*etcd.*"}[5m]) /
            last_over_time(etcd_server_quota_backend_bytes{job=~".*etcd.*"}[5m]))*100 >
            95
          for: 10m
          labels:
            severity: critical
        - alert: etcdExcessiveDatabaseGrowth
          annotations:
            description: 'etcd cluster "{{ $labels.job }}": Predicting running out of disk
              space in the next four hours, based on write observations within the past
              four hours on etcd instance {{ $labels.instance }}, please check as it might
              be disruptive.'
            summary: etcd cluster database growing very fast.
          expr: predict_linear(etcd_mvcc_db_total_size_in_bytes{job=~".*etcd.*"}[4h], 4*60*60)
            > etcd_server_quota_backend_bytes{job=~".*etcd.*"}
          for: 10m
          labels:
            severity: warning
        - alert: etcdDatabaseHighFragmentationRatio
          annotations:
            description: 'etcd cluster "{{ $labels.job }}": database size in use on instance
              {{ $labels.instance }} is {{ $value | humanizePercentage }} of the actual
              allocated disk space, please run defragmentation (e.g. etcdctl defrag) to
              retrieve the unused fragmented disk space.'
            runbook_url: https://etcd.io/docs/v3.5/op-guide/maintenance/#defragmentation
            summary: etcd database size in use is less than 50% of the actual allocated
              storage.
          expr: (last_over_time(etcd_mvcc_db_total_size_in_use_in_bytes{job=~".*etcd.*"}[5m])
            / last_over_time(etcd_mvcc_db_total_size_in_bytes{job=~".*etcd.*"}[5m])) < 0.5
            and etcd_mvcc_db_total_size_in_use_in_bytes{job=~".*etcd.*"} > 104857600
          for: 10m
          labels:
            severity: warning
    tomer-tomer-prom-kube-prometheus-general.rules-f073cc56-6ec1-485e-a6f7-199cd7598e60.yaml: |
      groups:
      - name: general.rules
        rules:
        - alert: TargetDown
          annotations:
            description: '{{ printf "%.4g" $value }}% of the {{ $labels.job }}/{{ $labels.service
              }} targets in {{ $labels.namespace }} namespace are down.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/general/targetdown
            summary: One or more targets are unreachable.
          expr: 100 * (count(up == 0) BY (cluster, job, namespace, service) / count(up)
            BY (cluster, job, namespace, service)) > 10
          for: 10m
          labels:
            severity: warning
        - alert: Watchdog
          annotations:
            description: |
              This is an alert meant to ensure that the entire alerting pipeline is functional.
              This alert is always firing, therefore it should always be firing in Alertmanager
              and always fire against a receiver. There are integrations with various notification
              mechanisms that send a notification when this alert is not firing. For example the
              "DeadMansSnitch" integration in PagerDuty.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/general/watchdog
            summary: An alert that should always be firing to certify that Alertmanager
              is working properly.
          expr: vector(1)
          labels:
            severity: none
        - alert: InfoInhibitor
          annotations:
            description: |
              This is an alert that is used to inhibit info alerts.
              By themselves, the info-level alerts are sometimes very noisy, but they are relevant when combined with
              other alerts.
              This alert fires whenever there's a severity="info" alert, and stops firing when another alert with a
              severity of 'warning' or 'critical' starts firing on the same namespace.
              This alert should be routed to a null receiver and configured to inhibit alerts with severity="info".
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/general/infoinhibitor
            summary: Info-level alert inhibition.
          expr: ALERTS{severity = "info"} == 1 unless on (namespace) ALERTS{alertname !=
            "InfoInhibitor", severity =~ "warning|critical", alertstate="firing"} == 1
          labels:
            severity: none
    tomer-tomer-prom-kube-prometheus-k8s.rules.container-cpu-usage-second-8c836848-6c2e-4b7f-8680-f96174067614.yaml: |
      groups:
      - name: k8s.rules.container_cpu_usage_seconds_total
        rules:
        - expr: |-
            sum by (cluster, namespace, pod, container) (
              irate(container_cpu_usage_seconds_total{job="kubelet", metrics_path="/metrics/cadvisor", image!=""}[5m])
            ) * on (cluster, namespace, pod) group_left(node) topk by (cluster, namespace, pod) (
              1, max by (cluster, namespace, pod, node) (kube_pod_info{node!=""})
            )
          record: node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate
    tomer-tomer-prom-kube-prometheus-k8s.rules.container-memory-cache-b3a29a66-c7c1-45e6-b986-627ce1c4c6eb.yaml: |
      groups:
      - name: k8s.rules.container_memory_cache
        rules:
        - expr: |-
            container_memory_cache{job="kubelet", metrics_path="/metrics/cadvisor", image!=""}
            * on (cluster, namespace, pod) group_left(node) topk by (cluster, namespace, pod) (1,
              max by (cluster, namespace, pod, node) (kube_pod_info{node!=""})
            )
          record: node_namespace_pod_container:container_memory_cache
    tomer-tomer-prom-kube-prometheus-k8s.rules.container-memory-rss-eeb12999-c97b-4009-926b-b4007c54fb6f.yaml: |
      groups:
      - name: k8s.rules.container_memory_rss
        rules:
        - expr: |-
            container_memory_rss{job="kubelet", metrics_path="/metrics/cadvisor", image!=""}
            * on (cluster, namespace, pod) group_left(node) topk by (cluster, namespace, pod) (1,
              max by (cluster, namespace, pod, node) (kube_pod_info{node!=""})
            )
          record: node_namespace_pod_container:container_memory_rss
    tomer-tomer-prom-kube-prometheus-k8s.rules.container-memory-swap-1331f14f-3a01-436e-b748-495119fd73c2.yaml: |
      groups:
      - name: k8s.rules.container_memory_swap
        rules:
        - expr: |-
            container_memory_swap{job="kubelet", metrics_path="/metrics/cadvisor", image!=""}
            * on (cluster, namespace, pod) group_left(node) topk by (cluster, namespace, pod) (1,
              max by (cluster, namespace, pod, node) (kube_pod_info{node!=""})
            )
          record: node_namespace_pod_container:container_memory_swap
    tomer-tomer-prom-kube-prometheus-k8s.rules.container-memory-working-s-45c72cff-2faa-4054-b491-d71ba90c79d2.yaml: |
      groups:
      - name: k8s.rules.container_memory_working_set_bytes
        rules:
        - expr: |-
            container_memory_working_set_bytes{job="kubelet", metrics_path="/metrics/cadvisor", image!=""}
            * on (cluster, namespace, pod) group_left(node) topk by (cluster, namespace, pod) (1,
              max by (cluster, namespace, pod, node) (kube_pod_info{node!=""})
            )
          record: node_namespace_pod_container:container_memory_working_set_bytes
    tomer-tomer-prom-kube-prometheus-k8s.rules.container-resource-86d73038-71b6-49af-a8cf-dd29d1e991b9.yaml: |
      groups:
      - name: k8s.rules.container_resource
        rules:
        - expr: |-
            kube_pod_container_resource_requests{resource="memory",job="kube-state-metrics"}  * on (namespace, pod, cluster)
            group_left() max by (namespace, pod, cluster) (
              (kube_pod_status_phase{phase=~"Pending|Running"} == 1)
            )
          record: cluster:namespace:pod_memory:active:kube_pod_container_resource_requests
        - expr: |-
            sum by (namespace, cluster) (
                sum by (namespace, pod, cluster) (
                    max by (namespace, pod, container, cluster) (
                      kube_pod_container_resource_requests{resource="memory",job="kube-state-metrics"}
                    ) * on (namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (
                      kube_pod_status_phase{phase=~"Pending|Running"} == 1
                    )
                )
            )
          record: namespace_memory:kube_pod_container_resource_requests:sum
        - expr: |-
            kube_pod_container_resource_requests{resource="cpu",job="kube-state-metrics"}  * on (namespace, pod, cluster)
            group_left() max by (namespace, pod, cluster) (
              (kube_pod_status_phase{phase=~"Pending|Running"} == 1)
            )
          record: cluster:namespace:pod_cpu:active:kube_pod_container_resource_requests
        - expr: |-
            sum by (namespace, cluster) (
                sum by (namespace, pod, cluster) (
                    max by (namespace, pod, container, cluster) (
                      kube_pod_container_resource_requests{resource="cpu",job="kube-state-metrics"}
                    ) * on (namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (
                      kube_pod_status_phase{phase=~"Pending|Running"} == 1
                    )
                )
            )
          record: namespace_cpu:kube_pod_container_resource_requests:sum
        - expr: |-
            kube_pod_container_resource_limits{resource="memory",job="kube-state-metrics"}  * on (namespace, pod, cluster)
            group_left() max by (namespace, pod, cluster) (
              (kube_pod_status_phase{phase=~"Pending|Running"} == 1)
            )
          record: cluster:namespace:pod_memory:active:kube_pod_container_resource_limits
        - expr: |-
            sum by (namespace, cluster) (
                sum by (namespace, pod, cluster) (
                    max by (namespace, pod, container, cluster) (
                      kube_pod_container_resource_limits{resource="memory",job="kube-state-metrics"}
                    ) * on (namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (
                      kube_pod_status_phase{phase=~"Pending|Running"} == 1
                    )
                )
            )
          record: namespace_memory:kube_pod_container_resource_limits:sum
        - expr: |-
            kube_pod_container_resource_limits{resource="cpu",job="kube-state-metrics"}  * on (namespace, pod, cluster)
            group_left() max by (namespace, pod, cluster) (
             (kube_pod_status_phase{phase=~"Pending|Running"} == 1)
             )
          record: cluster:namespace:pod_cpu:active:kube_pod_container_resource_limits
        - expr: |-
            sum by (namespace, cluster) (
                sum by (namespace, pod, cluster) (
                    max by (namespace, pod, container, cluster) (
                      kube_pod_container_resource_limits{resource="cpu",job="kube-state-metrics"}
                    ) * on (namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (
                      kube_pod_status_phase{phase=~"Pending|Running"} == 1
                    )
                )
            )
          record: namespace_cpu:kube_pod_container_resource_limits:sum
    tomer-tomer-prom-kube-prometheus-k8s.rules.pod-owner-e51868c1-b733-441a-bc59-9930c7c9c0ec.yaml: |
      groups:
      - name: k8s.rules.pod_owner
        rules:
        - expr: |-
            max by (cluster, namespace, workload, pod) (
              label_replace(
                label_replace(
                  kube_pod_owner{job="kube-state-metrics", owner_kind="ReplicaSet"},
                  "replicaset", "$1", "owner_name", "(.*)"
                ) * on (replicaset, namespace) group_left(owner_name) topk by (replicaset, namespace) (
                  1, max by (replicaset, namespace, owner_name) (
                    kube_replicaset_owner{job="kube-state-metrics"}
                  )
                ),
                "workload", "$1", "owner_name", "(.*)"
              )
            )
          labels:
            workload_type: deployment
          record: namespace_workload_pod:kube_pod_owner:relabel
        - expr: |-
            max by (cluster, namespace, workload, pod) (
              label_replace(
                kube_pod_owner{job="kube-state-metrics", owner_kind="DaemonSet"},
                "workload", "$1", "owner_name", "(.*)"
              )
            )
          labels:
            workload_type: daemonset
          record: namespace_workload_pod:kube_pod_owner:relabel
        - expr: |-
            max by (cluster, namespace, workload, pod) (
              label_replace(
                kube_pod_owner{job="kube-state-metrics", owner_kind="StatefulSet"},
                "workload", "$1", "owner_name", "(.*)"
              )
            )
          labels:
            workload_type: statefulset
          record: namespace_workload_pod:kube_pod_owner:relabel
        - expr: |-
            max by (cluster, namespace, workload, pod) (
              label_replace(
                kube_pod_owner{job="kube-state-metrics", owner_kind="Job"},
                "workload", "$1", "owner_name", "(.*)"
              )
            )
          labels:
            workload_type: job
          record: namespace_workload_pod:kube_pod_owner:relabel
    tomer-tomer-prom-kube-prometheus-kube-apiserver-availability.rules-67ee4b39-13be-46f5-98a0-7c7c690493f8.yaml: |
      groups:
      - interval: 3m
        name: kube-apiserver-availability.rules
        rules:
        - expr: avg_over_time(code_verb:apiserver_request_total:increase1h[30d]) * 24 *
            30
          record: code_verb:apiserver_request_total:increase30d
        - expr: sum by (cluster, code) (code_verb:apiserver_request_total:increase30d{verb=~"LIST|GET"})
          labels:
            verb: read
          record: code:apiserver_request_total:increase30d
        - expr: sum by (cluster, code) (code_verb:apiserver_request_total:increase30d{verb=~"POST|PUT|PATCH|DELETE"})
          labels:
            verb: write
          record: code:apiserver_request_total:increase30d
        - expr: sum by (cluster, verb, scope, le) (increase(apiserver_request_sli_duration_seconds_bucket[1h]))
          record: cluster_verb_scope_le:apiserver_request_sli_duration_seconds_bucket:increase1h
        - expr: sum by (cluster, verb, scope, le) (avg_over_time(cluster_verb_scope_le:apiserver_request_sli_duration_seconds_bucket:increase1h[30d])
            * 24 * 30)
          record: cluster_verb_scope_le:apiserver_request_sli_duration_seconds_bucket:increase30d
        - expr: sum by (cluster, verb, scope) (cluster_verb_scope_le:apiserver_request_sli_duration_seconds_bucket:increase1h{le="+Inf"})
          record: cluster_verb_scope:apiserver_request_sli_duration_seconds_count:increase1h
        - expr: sum by (cluster, verb, scope) (cluster_verb_scope_le:apiserver_request_sli_duration_seconds_bucket:increase30d{le="+Inf"})
          record: cluster_verb_scope:apiserver_request_sli_duration_seconds_count:increase30d
        - expr: |-
            1 - (
              (
                # write too slow
                sum by (cluster) (cluster_verb_scope:apiserver_request_sli_duration_seconds_count:increase30d{verb=~"POST|PUT|PATCH|DELETE"})
                -
                sum by (cluster) (cluster_verb_scope_le:apiserver_request_sli_duration_seconds_bucket:increase30d{verb=~"POST|PUT|PATCH|DELETE",le=~"1(\\.0)?"})
              ) +
              (
                # read too slow
                sum by (cluster) (cluster_verb_scope:apiserver_request_sli_duration_seconds_count:increase30d{verb=~"LIST|GET"})
                -
                (
                  (
                    sum by (cluster) (cluster_verb_scope_le:apiserver_request_sli_duration_seconds_bucket:increase30d{verb=~"LIST|GET",scope=~"resource|",le=~"1(\\.0)?"})
                    or
                    vector(0)
                  )
                  +
                  sum by (cluster) (cluster_verb_scope_le:apiserver_request_sli_duration_seconds_bucket:increase30d{verb=~"LIST|GET",scope="namespace",le=~"5(\\.0)?"})
                  +
                  sum by (cluster) (cluster_verb_scope_le:apiserver_request_sli_duration_seconds_bucket:increase30d{verb=~"LIST|GET",scope="cluster",le=~"30(\\.0)?"})
                )
              ) +
              # errors
              sum by (cluster) (code:apiserver_request_total:increase30d{code=~"5.."} or vector(0))
            )
            /
            sum by (cluster) (code:apiserver_request_total:increase30d)
          labels:
            verb: all
          record: apiserver_request:availability30d
        - expr: |-
            1 - (
              sum by (cluster) (cluster_verb_scope:apiserver_request_sli_duration_seconds_count:increase30d{verb=~"LIST|GET"})
              -
              (
                # too slow
                (
                  sum by (cluster) (cluster_verb_scope_le:apiserver_request_sli_duration_seconds_bucket:increase30d{verb=~"LIST|GET",scope=~"resource|",le=~"1(\\.0)?"})
                  or
                  vector(0)
                )
                +
                sum by (cluster) (cluster_verb_scope_le:apiserver_request_sli_duration_seconds_bucket:increase30d{verb=~"LIST|GET",scope="namespace",le=~"5(\\.0)?"})
                +
                sum by (cluster) (cluster_verb_scope_le:apiserver_request_sli_duration_seconds_bucket:increase30d{verb=~"LIST|GET",scope="cluster",le=~"30(\\.0)?"})
              )
              +
              # errors
              sum by (cluster) (code:apiserver_request_total:increase30d{verb="read",code=~"5.."} or vector(0))
            )
            /
            sum by (cluster) (code:apiserver_request_total:increase30d{verb="read"})
          labels:
            verb: read
          record: apiserver_request:availability30d
        - expr: |-
            1 - (
              (
                # too slow
                sum by (cluster) (cluster_verb_scope:apiserver_request_sli_duration_seconds_count:increase30d{verb=~"POST|PUT|PATCH|DELETE"})
                -
                sum by (cluster) (cluster_verb_scope_le:apiserver_request_sli_duration_seconds_bucket:increase30d{verb=~"POST|PUT|PATCH|DELETE",le=~"1(\\.0)?"})
              )
              +
              # errors
              sum by (cluster) (code:apiserver_request_total:increase30d{verb="write",code=~"5.."} or vector(0))
            )
            /
            sum by (cluster) (code:apiserver_request_total:increase30d{verb="write"})
          labels:
            verb: write
          record: apiserver_request:availability30d
        - expr: sum by (cluster,code,resource) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET"}[5m]))
          labels:
            verb: read
          record: code_resource:apiserver_request_total:rate5m
        - expr: sum by (cluster,code,resource) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE"}[5m]))
          labels:
            verb: write
          record: code_resource:apiserver_request_total:rate5m
        - expr: sum by (cluster, code, verb) (increase(apiserver_request_total{job="apiserver",verb=~"LIST|GET|POST|PUT|PATCH|DELETE",code=~"2.."}[1h]))
          record: code_verb:apiserver_request_total:increase1h
        - expr: sum by (cluster, code, verb) (increase(apiserver_request_total{job="apiserver",verb=~"LIST|GET|POST|PUT|PATCH|DELETE",code=~"3.."}[1h]))
          record: code_verb:apiserver_request_total:increase1h
        - expr: sum by (cluster, code, verb) (increase(apiserver_request_total{job="apiserver",verb=~"LIST|GET|POST|PUT|PATCH|DELETE",code=~"4.."}[1h]))
          record: code_verb:apiserver_request_total:increase1h
        - expr: sum by (cluster, code, verb) (increase(apiserver_request_total{job="apiserver",verb=~"LIST|GET|POST|PUT|PATCH|DELETE",code=~"5.."}[1h]))
          record: code_verb:apiserver_request_total:increase1h
    tomer-tomer-prom-kube-prometheus-kube-apiserver-burnrate.rules-3be2a019-141b-46be-9b41-d030215413d4.yaml: |
      groups:
      - name: kube-apiserver-burnrate.rules
        rules:
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_sli_duration_seconds_count{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward"}[1d]))
                -
                (
                  (
                    sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope=~"resource|",le=~"1(\\.0)?"}[1d]))
                    or
                    vector(0)
                  )
                  +
                  sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="namespace",le=~"5(\\.0)?"}[1d]))
                  +
                  sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="cluster",le=~"30(\\.0)?"}[1d]))
                )
              )
              +
              # errors
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET",code=~"5.."}[1d]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET"}[1d]))
          labels:
            verb: read
          record: apiserver_request:burnrate1d
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_sli_duration_seconds_count{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward"}[1h]))
                -
                (
                  (
                    sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope=~"resource|",le=~"1(\\.0)?"}[1h]))
                    or
                    vector(0)
                  )
                  +
                  sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="namespace",le=~"5(\\.0)?"}[1h]))
                  +
                  sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="cluster",le=~"30(\\.0)?"}[1h]))
                )
              )
              +
              # errors
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET",code=~"5.."}[1h]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET"}[1h]))
          labels:
            verb: read
          record: apiserver_request:burnrate1h
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_sli_duration_seconds_count{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward"}[2h]))
                -
                (
                  (
                    sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope=~"resource|",le=~"1(\\.0)?"}[2h]))
                    or
                    vector(0)
                  )
                  +
                  sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="namespace",le=~"5(\\.0)?"}[2h]))
                  +
                  sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="cluster",le=~"30(\\.0)?"}[2h]))
                )
              )
              +
              # errors
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET",code=~"5.."}[2h]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET"}[2h]))
          labels:
            verb: read
          record: apiserver_request:burnrate2h
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_sli_duration_seconds_count{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward"}[30m]))
                -
                (
                  (
                    sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope=~"resource|",le=~"1(\\.0)?"}[30m]))
                    or
                    vector(0)
                  )
                  +
                  sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="namespace",le=~"5(\\.0)?"}[30m]))
                  +
                  sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="cluster",le=~"30(\\.0)?"}[30m]))
                )
              )
              +
              # errors
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET",code=~"5.."}[30m]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET"}[30m]))
          labels:
            verb: read
          record: apiserver_request:burnrate30m
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_sli_duration_seconds_count{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward"}[3d]))
                -
                (
                  (
                    sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope=~"resource|",le=~"1(\\.0)?"}[3d]))
                    or
                    vector(0)
                  )
                  +
                  sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="namespace",le=~"5(\\.0)?"}[3d]))
                  +
                  sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="cluster",le=~"30(\\.0)?"}[3d]))
                )
              )
              +
              # errors
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET",code=~"5.."}[3d]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET"}[3d]))
          labels:
            verb: read
          record: apiserver_request:burnrate3d
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_sli_duration_seconds_count{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward"}[5m]))
                -
                (
                  (
                    sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope=~"resource|",le=~"1(\\.0)?"}[5m]))
                    or
                    vector(0)
                  )
                  +
                  sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="namespace",le=~"5(\\.0)?"}[5m]))
                  +
                  sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="cluster",le=~"30(\\.0)?"}[5m]))
                )
              )
              +
              # errors
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET",code=~"5.."}[5m]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET"}[5m]))
          labels:
            verb: read
          record: apiserver_request:burnrate5m
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_sli_duration_seconds_count{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward"}[6h]))
                -
                (
                  (
                    sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope=~"resource|",le=~"1(\\.0)?"}[6h]))
                    or
                    vector(0)
                  )
                  +
                  sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="namespace",le=~"5(\\.0)?"}[6h]))
                  +
                  sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="cluster",le=~"30(\\.0)?"}[6h]))
                )
              )
              +
              # errors
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET",code=~"5.."}[6h]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET"}[6h]))
          labels:
            verb: read
          record: apiserver_request:burnrate6h
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_sli_duration_seconds_count{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward"}[1d]))
                -
                sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward",le=~"1(\\.0)?"}[1d]))
              )
              +
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",code=~"5.."}[1d]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE"}[1d]))
          labels:
            verb: write
          record: apiserver_request:burnrate1d
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_sli_duration_seconds_count{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward"}[1h]))
                -
                sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward",le=~"1(\\.0)?"}[1h]))
              )
              +
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",code=~"5.."}[1h]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE"}[1h]))
          labels:
            verb: write
          record: apiserver_request:burnrate1h
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_sli_duration_seconds_count{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward"}[2h]))
                -
                sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward",le=~"1(\\.0)?"}[2h]))
              )
              +
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",code=~"5.."}[2h]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE"}[2h]))
          labels:
            verb: write
          record: apiserver_request:burnrate2h
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_sli_duration_seconds_count{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward"}[30m]))
                -
                sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward",le=~"1(\\.0)?"}[30m]))
              )
              +
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",code=~"5.."}[30m]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE"}[30m]))
          labels:
            verb: write
          record: apiserver_request:burnrate30m
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_sli_duration_seconds_count{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward"}[3d]))
                -
                sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward",le=~"1(\\.0)?"}[3d]))
              )
              +
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",code=~"5.."}[3d]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE"}[3d]))
          labels:
            verb: write
          record: apiserver_request:burnrate3d
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_sli_duration_seconds_count{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward"}[5m]))
                -
                sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward",le=~"1(\\.0)?"}[5m]))
              )
              +
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",code=~"5.."}[5m]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE"}[5m]))
          labels:
            verb: write
          record: apiserver_request:burnrate5m
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_sli_duration_seconds_count{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward"}[6h]))
                -
                sum by (cluster) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward",le=~"1(\\.0)?"}[6h]))
              )
              +
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",code=~"5.."}[6h]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE"}[6h]))
          labels:
            verb: write
          record: apiserver_request:burnrate6h
    tomer-tomer-prom-kube-prometheus-kube-apiserver-histogram.rules-c7f84972-eb4a-4522-8cbf-cee32cff1d45.yaml: |
      groups:
      - name: kube-apiserver-histogram.rules
        rules:
        - expr: histogram_quantile(0.99, sum by (cluster, le, resource) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward"}[5m])))
            > 0
          labels:
            quantile: "0.99"
            verb: read
          record: cluster_quantile:apiserver_request_sli_duration_seconds:histogram_quantile
        - expr: histogram_quantile(0.99, sum by (cluster, le, resource) (rate(apiserver_request_sli_duration_seconds_bucket{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward"}[5m])))
            > 0
          labels:
            quantile: "0.99"
            verb: write
          record: cluster_quantile:apiserver_request_sli_duration_seconds:histogram_quantile
    tomer-tomer-prom-kube-prometheus-kube-apiserver-slos-1e2d1efe-7034-4b22-9ea7-c55b0034c7d4.yaml: |
      groups:
      - name: kube-apiserver-slos
        rules:
        - alert: KubeAPIErrorBudgetBurn
          annotations:
            description: The API server is burning too much error budget on cluster {{ $labels.cluster
              }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeapierrorbudgetburn
            summary: The API server is burning too much error budget.
          expr: |-
            sum by (cluster) (apiserver_request:burnrate1h) > (14.40 * 0.01000)
            and on (cluster)
            sum by (cluster) (apiserver_request:burnrate5m) > (14.40 * 0.01000)
          for: 2m
          labels:
            long: 1h
            severity: critical
            short: 5m
        - alert: KubeAPIErrorBudgetBurn
          annotations:
            description: The API server is burning too much error budget on cluster {{ $labels.cluster
              }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeapierrorbudgetburn
            summary: The API server is burning too much error budget.
          expr: |-
            sum by (cluster) (apiserver_request:burnrate6h) > (6.00 * 0.01000)
            and on (cluster)
            sum by (cluster) (apiserver_request:burnrate30m) > (6.00 * 0.01000)
          for: 15m
          labels:
            long: 6h
            severity: critical
            short: 30m
        - alert: KubeAPIErrorBudgetBurn
          annotations:
            description: The API server is burning too much error budget on cluster {{ $labels.cluster
              }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeapierrorbudgetburn
            summary: The API server is burning too much error budget.
          expr: |-
            sum by (cluster) (apiserver_request:burnrate1d) > (3.00 * 0.01000)
            and on (cluster)
            sum by (cluster) (apiserver_request:burnrate2h) > (3.00 * 0.01000)
          for: 1h
          labels:
            long: 1d
            severity: warning
            short: 2h
        - alert: KubeAPIErrorBudgetBurn
          annotations:
            description: The API server is burning too much error budget on cluster {{ $labels.cluster
              }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeapierrorbudgetburn
            summary: The API server is burning too much error budget.
          expr: |-
            sum by (cluster) (apiserver_request:burnrate3d) > (1.00 * 0.01000)
            and on (cluster)
            sum by (cluster) (apiserver_request:burnrate6h) > (1.00 * 0.01000)
          for: 3h
          labels:
            long: 3d
            severity: warning
            short: 6h
    tomer-tomer-prom-kube-prometheus-kube-prometheus-general.rules-080e35bf-f258-4220-b96b-0021c6a8f721.yaml: |
      groups:
      - name: kube-prometheus-general.rules
        rules:
        - expr: count without(instance, pod, node) (up == 1)
          record: count:up1
        - expr: count without(instance, pod, node) (up == 0)
          record: count:up0
    tomer-tomer-prom-kube-prometheus-kube-prometheus-node-recording.rules-89027694-fb85-4df2-b24b-c02beb79dcd6.yaml: |
      groups:
      - name: kube-prometheus-node-recording.rules
        rules:
        - expr: sum(rate(node_cpu_seconds_total{mode!="idle",mode!="iowait",mode!="steal"}[3m]))
            BY (instance)
          record: instance:node_cpu:rate:sum
        - expr: sum(rate(node_network_receive_bytes_total[3m])) BY (instance)
          record: instance:node_network_receive_bytes:rate:sum
        - expr: sum(rate(node_network_transmit_bytes_total[3m])) BY (instance)
          record: instance:node_network_transmit_bytes:rate:sum
        - expr: sum(rate(node_cpu_seconds_total{mode!="idle",mode!="iowait",mode!="steal"}[5m]))
            WITHOUT (cpu, mode) / ON (instance) GROUP_LEFT() count(sum(node_cpu_seconds_total)
            BY (instance, cpu)) BY (instance)
          record: instance:node_cpu:ratio
        - expr: sum(rate(node_cpu_seconds_total{mode!="idle",mode!="iowait",mode!="steal"}[5m]))
          record: cluster:node_cpu:sum_rate5m
        - expr: cluster:node_cpu:sum_rate5m / count(sum(node_cpu_seconds_total) BY (instance,
            cpu))
          record: cluster:node_cpu:ratio
    tomer-tomer-prom-kube-prometheus-kube-scheduler.rules-126c293d-386c-45db-bdb8-5157e090090d.yaml: |
      groups:
      - name: kube-scheduler.rules
        rules:
        - expr: histogram_quantile(0.99, sum(rate(scheduler_e2e_scheduling_duration_seconds_bucket{job="kube-scheduler"}[5m]))
            without(instance, pod))
          labels:
            quantile: "0.99"
          record: cluster_quantile:scheduler_e2e_scheduling_duration_seconds:histogram_quantile
        - expr: histogram_quantile(0.99, sum(rate(scheduler_scheduling_algorithm_duration_seconds_bucket{job="kube-scheduler"}[5m]))
            without(instance, pod))
          labels:
            quantile: "0.99"
          record: cluster_quantile:scheduler_scheduling_algorithm_duration_seconds:histogram_quantile
        - expr: histogram_quantile(0.99, sum(rate(scheduler_binding_duration_seconds_bucket{job="kube-scheduler"}[5m]))
            without(instance, pod))
          labels:
            quantile: "0.99"
          record: cluster_quantile:scheduler_binding_duration_seconds:histogram_quantile
        - expr: histogram_quantile(0.9, sum(rate(scheduler_e2e_scheduling_duration_seconds_bucket{job="kube-scheduler"}[5m]))
            without(instance, pod))
          labels:
            quantile: "0.9"
          record: cluster_quantile:scheduler_e2e_scheduling_duration_seconds:histogram_quantile
        - expr: histogram_quantile(0.9, sum(rate(scheduler_scheduling_algorithm_duration_seconds_bucket{job="kube-scheduler"}[5m]))
            without(instance, pod))
          labels:
            quantile: "0.9"
          record: cluster_quantile:scheduler_scheduling_algorithm_duration_seconds:histogram_quantile
        - expr: histogram_quantile(0.9, sum(rate(scheduler_binding_duration_seconds_bucket{job="kube-scheduler"}[5m]))
            without(instance, pod))
          labels:
            quantile: "0.9"
          record: cluster_quantile:scheduler_binding_duration_seconds:histogram_quantile
        - expr: histogram_quantile(0.5, sum(rate(scheduler_e2e_scheduling_duration_seconds_bucket{job="kube-scheduler"}[5m]))
            without(instance, pod))
          labels:
            quantile: "0.5"
          record: cluster_quantile:scheduler_e2e_scheduling_duration_seconds:histogram_quantile
        - expr: histogram_quantile(0.5, sum(rate(scheduler_scheduling_algorithm_duration_seconds_bucket{job="kube-scheduler"}[5m]))
            without(instance, pod))
          labels:
            quantile: "0.5"
          record: cluster_quantile:scheduler_scheduling_algorithm_duration_seconds:histogram_quantile
        - expr: histogram_quantile(0.5, sum(rate(scheduler_binding_duration_seconds_bucket{job="kube-scheduler"}[5m]))
            without(instance, pod))
          labels:
            quantile: "0.5"
          record: cluster_quantile:scheduler_binding_duration_seconds:histogram_quantile
    tomer-tomer-prom-kube-prometheus-kube-state-metrics-b5e88e1a-7c69-442e-bf60-ee21ba8794d0.yaml: |
      groups:
      - name: kube-state-metrics
        rules:
        - alert: KubeStateMetricsListErrors
          annotations:
            description: kube-state-metrics is experiencing errors at an elevated rate in
              list operations. This is likely causing it to not be able to expose metrics
              about Kubernetes objects correctly or at all.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kube-state-metrics/kubestatemetricslisterrors
            summary: kube-state-metrics is experiencing errors in list operations.
          expr: |-
            (sum(rate(kube_state_metrics_list_total{job="kube-state-metrics",result="error"}[5m])) by (cluster)
              /
            sum(rate(kube_state_metrics_list_total{job="kube-state-metrics"}[5m])) by (cluster))
            > 0.01
          for: 15m
          labels:
            severity: critical
        - alert: KubeStateMetricsWatchErrors
          annotations:
            description: kube-state-metrics is experiencing errors at an elevated rate in
              watch operations. This is likely causing it to not be able to expose metrics
              about Kubernetes objects correctly or at all.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kube-state-metrics/kubestatemetricswatcherrors
            summary: kube-state-metrics is experiencing errors in watch operations.
          expr: |-
            (sum(rate(kube_state_metrics_watch_total{job="kube-state-metrics",result="error"}[5m])) by (cluster)
              /
            sum(rate(kube_state_metrics_watch_total{job="kube-state-metrics"}[5m])) by (cluster))
            > 0.01
          for: 15m
          labels:
            severity: critical
        - alert: KubeStateMetricsShardingMismatch
          annotations:
            description: kube-state-metrics pods are running with different --total-shards
              configuration, some Kubernetes objects may be exposed multiple times or not
              exposed at all.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kube-state-metrics/kubestatemetricsshardingmismatch
            summary: kube-state-metrics sharding is misconfigured.
          expr: stdvar (kube_state_metrics_total_shards{job="kube-state-metrics"}) by (cluster)
            != 0
          for: 15m
          labels:
            severity: critical
        - alert: KubeStateMetricsShardsMissing
          annotations:
            description: kube-state-metrics shards are missing, some Kubernetes objects
              are not being exposed.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kube-state-metrics/kubestatemetricsshardsmissing
            summary: kube-state-metrics shards are missing.
          expr: |-
            2^max(kube_state_metrics_total_shards{job="kube-state-metrics"}) by (cluster) - 1
              -
            sum( 2 ^ max by (cluster, shard_ordinal) (kube_state_metrics_shard_ordinal{job="kube-state-metrics"}) ) by (cluster)
            != 0
          for: 15m
          labels:
            severity: critical
    tomer-tomer-prom-kube-prometheus-kubelet.rules-d0c5d268-77e5-4d29-ae94-c518bd36d9a3.yaml: |
      groups:
      - name: kubelet.rules
        rules:
        - expr: histogram_quantile(0.99, sum(rate(kubelet_pleg_relist_duration_seconds_bucket{job="kubelet",
            metrics_path="/metrics"}[5m])) by (cluster, instance, le) * on (cluster, instance)
            group_left(node) kubelet_node_name{job="kubelet", metrics_path="/metrics"})
          labels:
            quantile: "0.99"
          record: node_quantile:kubelet_pleg_relist_duration_seconds:histogram_quantile
        - expr: histogram_quantile(0.9, sum(rate(kubelet_pleg_relist_duration_seconds_bucket{job="kubelet",
            metrics_path="/metrics"}[5m])) by (cluster, instance, le) * on (cluster, instance)
            group_left(node) kubelet_node_name{job="kubelet", metrics_path="/metrics"})
          labels:
            quantile: "0.9"
          record: node_quantile:kubelet_pleg_relist_duration_seconds:histogram_quantile
        - expr: histogram_quantile(0.5, sum(rate(kubelet_pleg_relist_duration_seconds_bucket{job="kubelet",
            metrics_path="/metrics"}[5m])) by (cluster, instance, le) * on (cluster, instance)
            group_left(node) kubelet_node_name{job="kubelet", metrics_path="/metrics"})
          labels:
            quantile: "0.5"
          record: node_quantile:kubelet_pleg_relist_duration_seconds:histogram_quantile
    tomer-tomer-prom-kube-prometheus-kubernetes-apps-7c2e3eb8-f5cc-45ac-a7e1-092beb7a9fe9.yaml: |
      groups:
      - name: kubernetes-apps
        rules:
        - alert: KubePodCrashLooping
          annotations:
            description: 'Pod {{ $labels.namespace }}/{{ $labels.pod }} ({{ $labels.container
              }}) is in waiting state (reason: "CrashLoopBackOff") on cluster {{ $labels.cluster
              }}.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubepodcrashlooping
            summary: Pod is crash looping.
          expr: max_over_time(kube_pod_container_status_waiting_reason{reason="CrashLoopBackOff",
            job="kube-state-metrics", namespace=~".*"}[5m]) >= 1
          for: 15m
          labels:
            severity: warning
        - alert: KubePodNotReady
          annotations:
            description: Pod {{ $labels.namespace }}/{{ $labels.pod }} has been in a non-ready
              state for longer than 15 minutes on cluster {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubepodnotready
            summary: Pod has been in a non-ready state for more than 15 minutes.
          expr: |-
            sum by (namespace, pod, cluster) (
              max by (namespace, pod, cluster) (
                kube_pod_status_phase{job="kube-state-metrics", namespace=~".*", phase=~"Pending|Unknown|Failed"}
              ) * on (namespace, pod, cluster) group_left(owner_kind) topk by (namespace, pod, cluster) (
                1, max by (namespace, pod, owner_kind, cluster) (kube_pod_owner{owner_kind!="Job"})
              )
            ) > 0
          for: 15m
          labels:
            severity: warning
        - alert: KubeDeploymentGenerationMismatch
          annotations:
            description: Deployment generation for {{ $labels.namespace }}/{{ $labels.deployment
              }} does not match, this indicates that the Deployment has failed but has not
              been rolled back on cluster {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubedeploymentgenerationmismatch
            summary: Deployment generation mismatch due to possible roll-back
          expr: |-
            kube_deployment_status_observed_generation{job="kube-state-metrics", namespace=~".*"}
              !=
            kube_deployment_metadata_generation{job="kube-state-metrics", namespace=~".*"}
          for: 15m
          labels:
            severity: warning
        - alert: KubeDeploymentReplicasMismatch
          annotations:
            description: Deployment {{ $labels.namespace }}/{{ $labels.deployment }} has
              not matched the expected number of replicas for longer than 15 minutes on
              cluster {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubedeploymentreplicasmismatch
            summary: Deployment has not matched the expected number of replicas.
          expr: |-
            (
              kube_deployment_spec_replicas{job="kube-state-metrics", namespace=~".*"}
                >
              kube_deployment_status_replicas_available{job="kube-state-metrics", namespace=~".*"}
            ) and (
              changes(kube_deployment_status_replicas_updated{job="kube-state-metrics", namespace=~".*"}[10m])
                ==
              0
            )
          for: 15m
          labels:
            severity: warning
        - alert: KubeDeploymentRolloutStuck
          annotations:
            description: Rollout of deployment {{ $labels.namespace }}/{{ $labels.deployment
              }} is not progressing for longer than 15 minutes on cluster {{ $labels.cluster
              }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubedeploymentrolloutstuck
            summary: Deployment rollout is not progressing.
          expr: |-
            kube_deployment_status_condition{condition="Progressing", status="false",job="kube-state-metrics", namespace=~".*"}
            != 0
          for: 15m
          labels:
            severity: warning
        - alert: KubeStatefulSetReplicasMismatch
          annotations:
            description: StatefulSet {{ $labels.namespace }}/{{ $labels.statefulset }} has
              not matched the expected number of replicas for longer than 15 minutes on
              cluster {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubestatefulsetreplicasmismatch
            summary: StatefulSet has not matched the expected number of replicas.
          expr: |-
            (
              kube_statefulset_status_replicas_ready{job="kube-state-metrics", namespace=~".*"}
                !=
              kube_statefulset_replicas{job="kube-state-metrics", namespace=~".*"}
            ) and (
              changes(kube_statefulset_status_replicas_updated{job="kube-state-metrics", namespace=~".*"}[10m])
                ==
              0
            )
          for: 15m
          labels:
            severity: warning
        - alert: KubeStatefulSetGenerationMismatch
          annotations:
            description: StatefulSet generation for {{ $labels.namespace }}/{{ $labels.statefulset
              }} does not match, this indicates that the StatefulSet has failed but has
              not been rolled back on cluster {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubestatefulsetgenerationmismatch
            summary: StatefulSet generation mismatch due to possible roll-back
          expr: |-
            kube_statefulset_status_observed_generation{job="kube-state-metrics", namespace=~".*"}
              !=
            kube_statefulset_metadata_generation{job="kube-state-metrics", namespace=~".*"}
          for: 15m
          labels:
            severity: warning
        - alert: KubeStatefulSetUpdateNotRolledOut
          annotations:
            description: StatefulSet {{ $labels.namespace }}/{{ $labels.statefulset }} update
              has not been rolled out on cluster {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubestatefulsetupdatenotrolledout
            summary: StatefulSet update has not been rolled out.
          expr: |-
            (
              max by (namespace, statefulset, job, cluster) (
                kube_statefulset_status_current_revision{job="kube-state-metrics", namespace=~".*"}
                  unless
                kube_statefulset_status_update_revision{job="kube-state-metrics", namespace=~".*"}
              )
                *
              (
                kube_statefulset_replicas{job="kube-state-metrics", namespace=~".*"}
                  !=
                kube_statefulset_status_replicas_updated{job="kube-state-metrics", namespace=~".*"}
              )
            )  and (
              changes(kube_statefulset_status_replicas_updated{job="kube-state-metrics", namespace=~".*"}[5m])
                ==
              0
            )
          for: 15m
          labels:
            severity: warning
        - alert: KubeDaemonSetRolloutStuck
          annotations:
            description: DaemonSet {{ $labels.namespace }}/{{ $labels.daemonset }} has not
              finished or progressed for at least 15m on cluster {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubedaemonsetrolloutstuck
            summary: DaemonSet rollout is stuck.
          expr: |-
            (
              (
                kube_daemonset_status_current_number_scheduled{job="kube-state-metrics", namespace=~".*"}
                 !=
                kube_daemonset_status_desired_number_scheduled{job="kube-state-metrics", namespace=~".*"}
              ) or (
                kube_daemonset_status_number_misscheduled{job="kube-state-metrics", namespace=~".*"}
                 !=
                0
              ) or (
                kube_daemonset_status_updated_number_scheduled{job="kube-state-metrics", namespace=~".*"}
                 !=
                kube_daemonset_status_desired_number_scheduled{job="kube-state-metrics", namespace=~".*"}
              ) or (
                kube_daemonset_status_number_available{job="kube-state-metrics", namespace=~".*"}
                 !=
                kube_daemonset_status_desired_number_scheduled{job="kube-state-metrics", namespace=~".*"}
              )
            ) and (
              changes(kube_daemonset_status_updated_number_scheduled{job="kube-state-metrics", namespace=~".*"}[5m])
                ==
              0
            )
          for: 15m
          labels:
            severity: warning
        - alert: KubeContainerWaiting
          annotations:
            description: 'pod/{{ $labels.pod }} in namespace {{ $labels.namespace }} on
              container {{ $labels.container}} has been in waiting state for longer than
              1 hour. (reason: "{{ $labels.reason }}") on cluster {{ $labels.cluster }}.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubecontainerwaiting
            summary: Pod container waiting longer than 1 hour
          expr: kube_pod_container_status_waiting_reason{reason!="CrashLoopBackOff", job="kube-state-metrics",
            namespace=~".*"} > 0
          for: 1h
          labels:
            severity: warning
        - alert: KubeDaemonSetNotScheduled
          annotations:
            description: '{{ $value }} Pods of DaemonSet {{ $labels.namespace }}/{{ $labels.daemonset
              }} are not scheduled on cluster {{ $labels.cluster }}.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubedaemonsetnotscheduled
            summary: DaemonSet pods are not scheduled.
          expr: |-
            kube_daemonset_status_desired_number_scheduled{job="kube-state-metrics", namespace=~".*"}
              -
            kube_daemonset_status_current_number_scheduled{job="kube-state-metrics", namespace=~".*"} > 0
          for: 10m
          labels:
            severity: warning
        - alert: KubeDaemonSetMisScheduled
          annotations:
            description: '{{ $value }} Pods of DaemonSet {{ $labels.namespace }}/{{ $labels.daemonset
              }} are running where they are not supposed to run on cluster {{ $labels.cluster
              }}.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubedaemonsetmisscheduled
            summary: DaemonSet pods are misscheduled.
          expr: kube_daemonset_status_number_misscheduled{job="kube-state-metrics", namespace=~".*"}
            > 0
          for: 15m
          labels:
            severity: warning
        - alert: KubeJobNotCompleted
          annotations:
            description: Job {{ $labels.namespace }}/{{ $labels.job_name }} is taking more
              than {{ "43200" | humanizeDuration }} to complete on cluster {{ $labels.cluster
              }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubejobnotcompleted
            summary: Job did not complete in time
          expr: |-
            time() - max by (namespace, job_name, cluster) (kube_job_status_start_time{job="kube-state-metrics", namespace=~".*"}
              and
            kube_job_status_active{job="kube-state-metrics", namespace=~".*"} > 0) > 43200
          labels:
            severity: warning
        - alert: KubeJobFailed
          annotations:
            description: Job {{ $labels.namespace }}/{{ $labels.job_name }} failed to complete.
              Removing failed job after investigation should clear this alert on cluster
              {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubejobfailed
            summary: Job failed to complete.
          expr: kube_job_failed{job="kube-state-metrics", namespace=~".*"}  > 0
          for: 15m
          labels:
            severity: warning
        - alert: KubeHpaReplicasMismatch
          annotations:
            description: HPA {{ $labels.namespace }}/{{ $labels.horizontalpodautoscaler  }}
              has not matched the desired number of replicas for longer than 15 minutes
              on cluster {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubehpareplicasmismatch
            summary: HPA has not matched desired number of replicas.
          expr: |-
            (kube_horizontalpodautoscaler_status_desired_replicas{job="kube-state-metrics", namespace=~".*"}
              !=
            kube_horizontalpodautoscaler_status_current_replicas{job="kube-state-metrics", namespace=~".*"})
              and
            (kube_horizontalpodautoscaler_status_current_replicas{job="kube-state-metrics", namespace=~".*"}
              >
            kube_horizontalpodautoscaler_spec_min_replicas{job="kube-state-metrics", namespace=~".*"})
              and
            (kube_horizontalpodautoscaler_status_current_replicas{job="kube-state-metrics", namespace=~".*"}
              <
            kube_horizontalpodautoscaler_spec_max_replicas{job="kube-state-metrics", namespace=~".*"})
              and
            changes(kube_horizontalpodautoscaler_status_current_replicas{job="kube-state-metrics", namespace=~".*"}[15m]) == 0
          for: 15m
          labels:
            severity: warning
        - alert: KubeHpaMaxedOut
          annotations:
            description: HPA {{ $labels.namespace }}/{{ $labels.horizontalpodautoscaler  }}
              has been running at max replicas for longer than 15 minutes on cluster {{
              $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubehpamaxedout
            summary: HPA is running at max replicas
          expr: |-
            kube_horizontalpodautoscaler_status_current_replicas{job="kube-state-metrics", namespace=~".*"}
              ==
            kube_horizontalpodautoscaler_spec_max_replicas{job="kube-state-metrics", namespace=~".*"}
          for: 15m
          labels:
            severity: warning
    tomer-tomer-prom-kube-prometheus-kubernetes-resources-764024df-1b00-4cd4-9fe3-b44c1872e729.yaml: |
      groups:
      - name: kubernetes-resources
        rules:
        - alert: KubeCPUOvercommit
          annotations:
            description: Cluster {{ $labels.cluster }} has overcommitted CPU resource requests
              for Pods by {{ $value }} CPU shares and cannot tolerate node failure.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubecpuovercommit
            summary: Cluster has overcommitted CPU resource requests.
          expr: |-
            sum(namespace_cpu:kube_pod_container_resource_requests:sum{}) by (cluster) - (sum(kube_node_status_allocatable{job="kube-state-metrics",resource="cpu"}) by (cluster) - max(kube_node_status_allocatable{job="kube-state-metrics",resource="cpu"}) by (cluster)) > 0
            and
            (sum(kube_node_status_allocatable{job="kube-state-metrics",resource="cpu"}) by (cluster) - max(kube_node_status_allocatable{job="kube-state-metrics",resource="cpu"}) by (cluster)) > 0
          for: 10m
          labels:
            severity: warning
        - alert: KubeMemoryOvercommit
          annotations:
            description: Cluster {{ $labels.cluster }} has overcommitted memory resource
              requests for Pods by {{ $value | humanize }} bytes and cannot tolerate node
              failure.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubememoryovercommit
            summary: Cluster has overcommitted memory resource requests.
          expr: |-
            sum(namespace_memory:kube_pod_container_resource_requests:sum{}) by (cluster) - (sum(kube_node_status_allocatable{resource="memory", job="kube-state-metrics"}) by (cluster) - max(kube_node_status_allocatable{resource="memory", job="kube-state-metrics"}) by (cluster)) > 0
            and
            (sum(kube_node_status_allocatable{resource="memory", job="kube-state-metrics"}) by (cluster) - max(kube_node_status_allocatable{resource="memory", job="kube-state-metrics"}) by (cluster)) > 0
          for: 10m
          labels:
            severity: warning
        - alert: KubeCPUQuotaOvercommit
          annotations:
            description: Cluster {{ $labels.cluster }}  has overcommitted CPU resource requests
              for Namespaces.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubecpuquotaovercommit
            summary: Cluster has overcommitted CPU resource requests.
          expr: |-
            sum(min without(resource) (kube_resourcequota{job="kube-state-metrics", type="hard", resource=~"(cpu|requests.cpu)"})) by (cluster)
              /
            sum(kube_node_status_allocatable{resource="cpu", job="kube-state-metrics"}) by (cluster)
              > 1.5
          for: 5m
          labels:
            severity: warning
        - alert: KubeMemoryQuotaOvercommit
          annotations:
            description: Cluster {{ $labels.cluster }}  has overcommitted memory resource
              requests for Namespaces.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubememoryquotaovercommit
            summary: Cluster has overcommitted memory resource requests.
          expr: |-
            sum(min without(resource) (kube_resourcequota{job="kube-state-metrics", type="hard", resource=~"(memory|requests.memory)"})) by (cluster)
              /
            sum(kube_node_status_allocatable{resource="memory", job="kube-state-metrics"}) by (cluster)
              > 1.5
          for: 5m
          labels:
            severity: warning
        - alert: KubeQuotaAlmostFull
          annotations:
            description: Namespace {{ $labels.namespace }} is using {{ $value | humanizePercentage
              }} of its {{ $labels.resource }} quota on cluster {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubequotaalmostfull
            summary: Namespace quota is going to be full.
          expr: |-
            kube_resourcequota{job="kube-state-metrics", type="used"}
              / ignoring(instance, job, type)
            (kube_resourcequota{job="kube-state-metrics", type="hard"} > 0)
              > 0.9 < 1
          for: 15m
          labels:
            severity: info
        - alert: KubeQuotaFullyUsed
          annotations:
            description: Namespace {{ $labels.namespace }} is using {{ $value | humanizePercentage
              }} of its {{ $labels.resource }} quota on cluster {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubequotafullyused
            summary: Namespace quota is fully used.
          expr: |-
            kube_resourcequota{job="kube-state-metrics", type="used"}
              / ignoring(instance, job, type)
            (kube_resourcequota{job="kube-state-metrics", type="hard"} > 0)
              == 1
          for: 15m
          labels:
            severity: info
        - alert: KubeQuotaExceeded
          annotations:
            description: Namespace {{ $labels.namespace }} is using {{ $value | humanizePercentage
              }} of its {{ $labels.resource }} quota on cluster {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubequotaexceeded
            summary: Namespace quota has exceeded the limits.
          expr: |-
            kube_resourcequota{job="kube-state-metrics", type="used"}
              / ignoring(instance, job, type)
            (kube_resourcequota{job="kube-state-metrics", type="hard"} > 0)
              > 1
          for: 15m
          labels:
            severity: warning
        - alert: CPUThrottlingHigh
          annotations:
            description: '{{ $value | humanizePercentage }} throttling of CPU in namespace
              {{ $labels.namespace }} for container {{ $labels.container }} in pod {{ $labels.pod
              }} on cluster {{ $labels.cluster }}.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/cputhrottlinghigh
            summary: Processes experience elevated CPU throttling.
          expr: |-
            sum(increase(container_cpu_cfs_throttled_periods_total{container!="", job="kubelet", metrics_path="/metrics/cadvisor", }[5m])) without (id, metrics_path, name, image, endpoint, job, node)
              /
            sum(increase(container_cpu_cfs_periods_total{job="kubelet", metrics_path="/metrics/cadvisor", }[5m])) without (id, metrics_path, name, image, endpoint, job, node)
              > ( 25 / 100 )
          for: 15m
          labels:
            severity: info
    tomer-tomer-prom-kube-prometheus-kubernetes-storage-6eef4c57-c1bb-4054-a8a5-a9464117a908.yaml: |
      groups:
      - name: kubernetes-storage
        rules:
        - alert: KubePersistentVolumeFillingUp
          annotations:
            description: The PersistentVolume claimed by {{ $labels.persistentvolumeclaim
              }} in Namespace {{ $labels.namespace }} {{ with $labels.cluster -}} on Cluster
              {{ . }} {{- end }} is only {{ $value | humanizePercentage }} free.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubepersistentvolumefillingup
            summary: PersistentVolume is filling up.
          expr: |-
            (
              kubelet_volume_stats_available_bytes{job="kubelet", namespace=~".*", metrics_path="/metrics"}
                /
              kubelet_volume_stats_capacity_bytes{job="kubelet", namespace=~".*", metrics_path="/metrics"}
            ) < 0.03
            and
            kubelet_volume_stats_used_bytes{job="kubelet", namespace=~".*", metrics_path="/metrics"} > 0
            unless on (cluster, namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_access_mode{ access_mode="ReadOnlyMany"} == 1
            unless on (cluster, namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_labels{label_excluded_from_alerts="true"} == 1
          for: 1m
          labels:
            severity: critical
        - alert: KubePersistentVolumeFillingUp
          annotations:
            description: Based on recent sampling, the PersistentVolume claimed by {{ $labels.persistentvolumeclaim
              }} in Namespace {{ $labels.namespace }} {{ with $labels.cluster -}} on Cluster
              {{ . }} {{- end }} is expected to fill up within four days. Currently {{ $value
              | humanizePercentage }} is available.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubepersistentvolumefillingup
            summary: PersistentVolume is filling up.
          expr: |-
            (
              kubelet_volume_stats_available_bytes{job="kubelet", namespace=~".*", metrics_path="/metrics"}
                /
              kubelet_volume_stats_capacity_bytes{job="kubelet", namespace=~".*", metrics_path="/metrics"}
            ) < 0.15
            and
            kubelet_volume_stats_used_bytes{job="kubelet", namespace=~".*", metrics_path="/metrics"} > 0
            and
            predict_linear(kubelet_volume_stats_available_bytes{job="kubelet", namespace=~".*", metrics_path="/metrics"}[6h], 4 * 24 * 3600) < 0
            unless on (cluster, namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_access_mode{ access_mode="ReadOnlyMany"} == 1
            unless on (cluster, namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_labels{label_excluded_from_alerts="true"} == 1
          for: 1h
          labels:
            severity: warning
        - alert: KubePersistentVolumeInodesFillingUp
          annotations:
            description: The PersistentVolume claimed by {{ $labels.persistentvolumeclaim
              }} in Namespace {{ $labels.namespace }} {{ with $labels.cluster -}} on Cluster
              {{ . }} {{- end }} only has {{ $value | humanizePercentage }} free inodes.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubepersistentvolumeinodesfillingup
            summary: PersistentVolumeInodes are filling up.
          expr: |-
            (
              kubelet_volume_stats_inodes_free{job="kubelet", namespace=~".*", metrics_path="/metrics"}
                /
              kubelet_volume_stats_inodes{job="kubelet", namespace=~".*", metrics_path="/metrics"}
            ) < 0.03
            and
            kubelet_volume_stats_inodes_used{job="kubelet", namespace=~".*", metrics_path="/metrics"} > 0
            unless on (cluster, namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_access_mode{ access_mode="ReadOnlyMany"} == 1
            unless on (cluster, namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_labels{label_excluded_from_alerts="true"} == 1
          for: 1m
          labels:
            severity: critical
        - alert: KubePersistentVolumeInodesFillingUp
          annotations:
            description: Based on recent sampling, the PersistentVolume claimed by {{ $labels.persistentvolumeclaim
              }} in Namespace {{ $labels.namespace }} {{ with $labels.cluster -}} on Cluster
              {{ . }} {{- end }} is expected to run out of inodes within four days. Currently
              {{ $value | humanizePercentage }} of its inodes are free.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubepersistentvolumeinodesfillingup
            summary: PersistentVolumeInodes are filling up.
          expr: |-
            (
              kubelet_volume_stats_inodes_free{job="kubelet", namespace=~".*", metrics_path="/metrics"}
                /
              kubelet_volume_stats_inodes{job="kubelet", namespace=~".*", metrics_path="/metrics"}
            ) < 0.15
            and
            kubelet_volume_stats_inodes_used{job="kubelet", namespace=~".*", metrics_path="/metrics"} > 0
            and
            predict_linear(kubelet_volume_stats_inodes_free{job="kubelet", namespace=~".*", metrics_path="/metrics"}[6h], 4 * 24 * 3600) < 0
            unless on (cluster, namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_access_mode{ access_mode="ReadOnlyMany"} == 1
            unless on (cluster, namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_labels{label_excluded_from_alerts="true"} == 1
          for: 1h
          labels:
            severity: warning
        - alert: KubePersistentVolumeErrors
          annotations:
            description: The persistent volume {{ $labels.persistentvolume }} {{ with $labels.cluster
              -}} on Cluster {{ . }} {{- end }} has status {{ $labels.phase }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubepersistentvolumeerrors
            summary: PersistentVolume is having issues with provisioning.
          expr: kube_persistentvolume_status_phase{phase=~"Failed|Pending",job="kube-state-metrics"}
            > 0
          for: 5m
          labels:
            severity: critical
    tomer-tomer-prom-kube-prometheus-kubernetes-system-4bf6e137-d512-4427-a8ed-497b3993cc55.yaml: |
      groups:
      - name: kubernetes-system
        rules:
        - alert: KubeVersionMismatch
          annotations:
            description: There are {{ $value }} different semantic versions of Kubernetes
              components running on cluster {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeversionmismatch
            summary: Different semantic versions of Kubernetes components running.
          expr: count by (cluster) (count by (git_version, cluster) (label_replace(kubernetes_build_info{job!~"kube-dns|coredns"},"git_version","$1","git_version","(v[0-9]*.[0-9]*).*")))
            > 1
          for: 15m
          labels:
            severity: warning
        - alert: KubeClientErrors
          annotations:
            description: Kubernetes API server client '{{ $labels.job }}/{{ $labels.instance
              }}' is experiencing {{ $value | humanizePercentage }} errors on cluster {{
              $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeclienterrors
            summary: Kubernetes API server client is experiencing errors.
          expr: |-
            (sum(rate(rest_client_requests_total{job="apiserver",code=~"5.."}[5m])) by (cluster, instance, job, namespace)
              /
            sum(rate(rest_client_requests_total{job="apiserver"}[5m])) by (cluster, instance, job, namespace))
            > 0.01
          for: 15m
          labels:
            severity: warning
    tomer-tomer-prom-kube-prometheus-kubernetes-system-apiserver-c0898426-9919-47aa-a4d1-c92915b0194d.yaml: |
      groups:
      - name: kubernetes-system-apiserver
        rules:
        - alert: KubeClientCertificateExpiration
          annotations:
            description: A client certificate used to authenticate to kubernetes apiserver
              is expiring in less than 7.0 days on cluster {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeclientcertificateexpiration
            summary: Client certificate is about to expire.
          expr: |-
            histogram_quantile(0.01, sum without (namespace, service, endpoint) (rate(apiserver_client_certificate_expiration_seconds_bucket{job="apiserver"}[5m]))) < 604800
            and
            on (job, cluster, instance) apiserver_client_certificate_expiration_seconds_count{job="apiserver"} > 0
          for: 5m
          labels:
            severity: warning
        - alert: KubeClientCertificateExpiration
          annotations:
            description: A client certificate used to authenticate to kubernetes apiserver
              is expiring in less than 24.0 hours on cluster {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeclientcertificateexpiration
            summary: Client certificate is about to expire.
          expr: |-
            histogram_quantile(0.01, sum without (namespace, service, endpoint) (rate(apiserver_client_certificate_expiration_seconds_bucket{job="apiserver"}[5m]))) < 86400
            and
            on (job, cluster, instance) apiserver_client_certificate_expiration_seconds_count{job="apiserver"} > 0
          for: 5m
          labels:
            severity: critical
        - alert: KubeAggregatedAPIErrors
          annotations:
            description: Kubernetes aggregated API {{ $labels.instance }}/{{ $labels.name
              }} has reported {{ $labels.reason }} errors on cluster {{ $labels.cluster
              }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeaggregatedapierrors
            summary: Kubernetes aggregated API has reported errors.
          expr: sum by (cluster, instance, name, reason)(increase(aggregator_unavailable_apiservice_total{job="apiserver"}[1m]))
            > 0
          for: 10m
          labels:
            severity: warning
        - alert: KubeAggregatedAPIDown
          annotations:
            description: Kubernetes aggregated API {{ $labels.name }}/{{ $labels.namespace
              }} has been only {{ $value | humanize }}% available over the last 10m on cluster
              {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeaggregatedapidown
            summary: Kubernetes aggregated API is down.
          expr: (1 - max by (name, namespace, cluster)(avg_over_time(aggregator_unavailable_apiservice{job="apiserver"}[10m])))
            * 100 < 85
          for: 5m
          labels:
            severity: warning
        - alert: KubeAPIDown
          annotations:
            description: KubeAPI has disappeared from Prometheus target discovery.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeapidown
            summary: Target disappeared from Prometheus target discovery.
          expr: absent(up{job="apiserver"} == 1)
          for: 15m
          labels:
            severity: critical
        - alert: KubeAPITerminatedRequests
          annotations:
            description: The kubernetes apiserver has terminated {{ $value | humanizePercentage
              }} of its incoming requests on cluster {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeapiterminatedrequests
            summary: The kubernetes apiserver has terminated {{ $value | humanizePercentage
              }} of its incoming requests.
          expr: sum by (cluster) (rate(apiserver_request_terminations_total{job="apiserver"}[10m]))
            / ( sum by (cluster) (rate(apiserver_request_total{job="apiserver"}[10m])) +
            sum by (cluster) (rate(apiserver_request_terminations_total{job="apiserver"}[10m]))
            ) > 0.20
          for: 5m
          labels:
            severity: warning
    tomer-tomer-prom-kube-prometheus-kubernetes-system-controller-manager-7648c951-e1e1-41e8-99e6-ef2dd86cd173.yaml: |
      groups:
      - name: kubernetes-system-controller-manager
        rules:
        - alert: KubeControllerManagerDown
          annotations:
            description: KubeControllerManager has disappeared from Prometheus target discovery.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubecontrollermanagerdown
            summary: Target disappeared from Prometheus target discovery.
          expr: absent(up{job="kube-controller-manager"} == 1)
          for: 15m
          labels:
            severity: critical
    tomer-tomer-prom-kube-prometheus-kubernetes-system-kube-proxy-875dfcf1-a8e5-4c18-88fe-d4bc1835e895.yaml: |
      groups:
      - name: kubernetes-system-kube-proxy
        rules:
        - alert: KubeProxyDown
          annotations:
            description: KubeProxy has disappeared from Prometheus target discovery.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeproxydown
            summary: Target disappeared from Prometheus target discovery.
          expr: absent(up{job="kube-proxy"} == 1)
          for: 15m
          labels:
            severity: critical
    tomer-tomer-prom-kube-prometheus-kubernetes-system-kubelet-a8533fb6-fd06-4b75-b265-89a506dfe57b.yaml: |
      groups:
      - name: kubernetes-system-kubelet
        rules:
        - alert: KubeNodeNotReady
          annotations:
            description: '{{ $labels.node }} has been unready for more than 15 minutes on
              cluster {{ $labels.cluster }}.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubenodenotready
            summary: Node is not ready.
          expr: |-
            kube_node_status_condition{job="kube-state-metrics",condition="Ready",status="true"} == 0
            and on (cluster, node)
            kube_node_spec_unschedulable{job="kube-state-metrics"} == 0
          for: 15m
          labels:
            severity: warning
        - alert: KubeNodeUnreachable
          annotations:
            description: '{{ $labels.node }} is unreachable and some workloads may be rescheduled
              on cluster {{ $labels.cluster }}.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubenodeunreachable
            summary: Node is unreachable.
          expr: (kube_node_spec_taint{job="kube-state-metrics",key="node.kubernetes.io/unreachable",effect="NoSchedule"}
            unless ignoring(key,value) kube_node_spec_taint{job="kube-state-metrics",key=~"ToBeDeletedByClusterAutoscaler|cloud.google.com/impending-node-termination|aws-node-termination-handler/spot-itn"})
            == 1
          for: 15m
          labels:
            severity: warning
        - alert: KubeletTooManyPods
          annotations:
            description: Kubelet '{{ $labels.node }}' is running at {{ $value | humanizePercentage
              }} of its Pod capacity on cluster {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubelettoomanypods
            summary: Kubelet is running at capacity.
          expr: |-
            (
              max by (cluster, instance) (
                kubelet_running_pods{job="kubelet", metrics_path="/metrics"} > 1
              )
              * on (cluster, instance) group_left(node)
              max by (cluster, instance, node) (
                kubelet_node_name{job="kubelet", metrics_path="/metrics"}
              )
            )
            / on (cluster, node) group_left()
            max by (cluster, node) (
              kube_node_status_capacity{job="kube-state-metrics", resource="pods"} != 1
            ) > 0.95
          for: 15m
          labels:
            severity: info
        - alert: KubeNodeReadinessFlapping
          annotations:
            description: The readiness status of node {{ $labels.node }} has changed {{
              $value }} times in the last 15 minutes on cluster {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubenodereadinessflapping
            summary: Node readiness status is flapping.
          expr: |-
            sum(changes(kube_node_status_condition{job="kube-state-metrics",status="true",condition="Ready"}[15m])) by (cluster, node) > 2
            and on (cluster, node)
            kube_node_spec_unschedulable{job="kube-state-metrics"} == 0
          for: 15m
          labels:
            severity: warning
        - alert: KubeletPlegDurationHigh
          annotations:
            description: The Kubelet Pod Lifecycle Event Generator has a 99th percentile
              duration of {{ $value }} seconds on node {{ $labels.node }} on cluster {{
              $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeletplegdurationhigh
            summary: Kubelet Pod Lifecycle Event Generator is taking too long to relist.
          expr: node_quantile:kubelet_pleg_relist_duration_seconds:histogram_quantile{quantile="0.99"}
            >= 10
          for: 5m
          labels:
            severity: warning
        - alert: KubeletPodStartUpLatencyHigh
          annotations:
            description: Kubelet Pod startup 99th percentile latency is {{ $value }} seconds
              on node {{ $labels.node }} on cluster {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeletpodstartuplatencyhigh
            summary: Kubelet Pod startup latency is too high.
          expr: histogram_quantile(0.99, sum(rate(kubelet_pod_worker_duration_seconds_bucket{job="kubelet",
            metrics_path="/metrics"}[5m])) by (cluster, instance, le)) * on (cluster, instance)
            group_left(node) kubelet_node_name{job="kubelet", metrics_path="/metrics"} >
            60
          for: 15m
          labels:
            severity: warning
        - alert: KubeletClientCertificateExpiration
          annotations:
            description: Client certificate for Kubelet on node {{ $labels.node }} expires
              in {{ $value | humanizeDuration }} on cluster {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeletclientcertificateexpiration
            summary: Kubelet client certificate is about to expire.
          expr: kubelet_certificate_manager_client_ttl_seconds < 604800
          labels:
            severity: warning
        - alert: KubeletClientCertificateExpiration
          annotations:
            description: Client certificate for Kubelet on node {{ $labels.node }} expires
              in {{ $value | humanizeDuration }} on cluster {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeletclientcertificateexpiration
            summary: Kubelet client certificate is about to expire.
          expr: kubelet_certificate_manager_client_ttl_seconds < 86400
          labels:
            severity: critical
        - alert: KubeletServerCertificateExpiration
          annotations:
            description: Server certificate for Kubelet on node {{ $labels.node }} expires
              in {{ $value | humanizeDuration }} on cluster {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeletservercertificateexpiration
            summary: Kubelet server certificate is about to expire.
          expr: kubelet_certificate_manager_server_ttl_seconds < 604800
          labels:
            severity: warning
        - alert: KubeletServerCertificateExpiration
          annotations:
            description: Server certificate for Kubelet on node {{ $labels.node }} expires
              in {{ $value | humanizeDuration }} on cluster {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeletservercertificateexpiration
            summary: Kubelet server certificate is about to expire.
          expr: kubelet_certificate_manager_server_ttl_seconds < 86400
          labels:
            severity: critical
        - alert: KubeletClientCertificateRenewalErrors
          annotations:
            description: Kubelet on node {{ $labels.node }} has failed to renew its client
              certificate ({{ $value | humanize }} errors in the last 5 minutes) on cluster
              {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeletclientcertificaterenewalerrors
            summary: Kubelet has failed to renew its client certificate.
          expr: increase(kubelet_certificate_manager_client_expiration_renew_errors[5m])
            > 0
          for: 15m
          labels:
            severity: warning
        - alert: KubeletServerCertificateRenewalErrors
          annotations:
            description: Kubelet on node {{ $labels.node }} has failed to renew its server
              certificate ({{ $value | humanize }} errors in the last 5 minutes) on cluster
              {{ $labels.cluster }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeletservercertificaterenewalerrors
            summary: Kubelet has failed to renew its server certificate.
          expr: increase(kubelet_server_expiration_renew_errors[5m]) > 0
          for: 15m
          labels:
            severity: warning
        - alert: KubeletDown
          annotations:
            description: Kubelet has disappeared from Prometheus target discovery.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeletdown
            summary: Target disappeared from Prometheus target discovery.
          expr: absent(up{job="kubelet", metrics_path="/metrics"} == 1)
          for: 15m
          labels:
            severity: critical
    tomer-tomer-prom-kube-prometheus-kubernetes-system-scheduler-8438a3e4-b4c7-4234-b29a-9f31a685b022.yaml: |
      groups:
      - name: kubernetes-system-scheduler
        rules:
        - alert: KubeSchedulerDown
          annotations:
            description: KubeScheduler has disappeared from Prometheus target discovery.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeschedulerdown
            summary: Target disappeared from Prometheus target discovery.
          expr: absent(up{job="kube-scheduler"} == 1)
          for: 15m
          labels:
            severity: critical
    tomer-tomer-prom-kube-prometheus-node-exporter-a99f5a10-2c5b-4319-b4d0-f1a8875b3115.yaml: |
      groups:
      - name: node-exporter
        rules:
        - alert: NodeFilesystemSpaceFillingUp
          annotations:
            description: Filesystem on {{ $labels.device }}, mounted on {{ $labels.mountpoint
              }}, at {{ $labels.instance }} has only {{ printf "%.2f" $value }}% available
              space left and is filling up.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodefilesystemspacefillingup
            summary: Filesystem is predicted to run out of space within the next 24 hours.
          expr: |-
            (
              node_filesystem_avail_bytes{job="node-exporter",fstype!="",mountpoint!=""} / node_filesystem_size_bytes{job="node-exporter",fstype!="",mountpoint!=""} * 100 < 15
            and
              predict_linear(node_filesystem_avail_bytes{job="node-exporter",fstype!="",mountpoint!=""}[6h], 24*60*60) < 0
            and
              node_filesystem_readonly{job="node-exporter",fstype!="",mountpoint!=""} == 0
            )
          for: 1h
          labels:
            severity: warning
        - alert: NodeFilesystemSpaceFillingUp
          annotations:
            description: Filesystem on {{ $labels.device }}, mounted on {{ $labels.mountpoint
              }}, at {{ $labels.instance }} has only {{ printf "%.2f" $value }}% available
              space left and is filling up fast.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodefilesystemspacefillingup
            summary: Filesystem is predicted to run out of space within the next 4 hours.
          expr: |-
            (
              node_filesystem_avail_bytes{job="node-exporter",fstype!="",mountpoint!=""} / node_filesystem_size_bytes{job="node-exporter",fstype!="",mountpoint!=""} * 100 < 10
            and
              predict_linear(node_filesystem_avail_bytes{job="node-exporter",fstype!="",mountpoint!=""}[6h], 4*60*60) < 0
            and
              node_filesystem_readonly{job="node-exporter",fstype!="",mountpoint!=""} == 0
            )
          for: 1h
          labels:
            severity: critical
        - alert: NodeFilesystemAlmostOutOfSpace
          annotations:
            description: Filesystem on {{ $labels.device }}, mounted on {{ $labels.mountpoint
              }}, at {{ $labels.instance }} has only {{ printf "%.2f" $value }}% available
              space left.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodefilesystemalmostoutofspace
            summary: Filesystem has less than 5% space left.
          expr: |-
            (
              node_filesystem_avail_bytes{job="node-exporter",fstype!="",mountpoint!=""} / node_filesystem_size_bytes{job="node-exporter",fstype!="",mountpoint!=""} * 100 < 5
            and
              node_filesystem_readonly{job="node-exporter",fstype!="",mountpoint!=""} == 0
            )
          for: 30m
          labels:
            severity: warning
        - alert: NodeFilesystemAlmostOutOfSpace
          annotations:
            description: Filesystem on {{ $labels.device }}, mounted on {{ $labels.mountpoint
              }}, at {{ $labels.instance }} has only {{ printf "%.2f" $value }}% available
              space left.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodefilesystemalmostoutofspace
            summary: Filesystem has less than 3% space left.
          expr: |-
            (
              node_filesystem_avail_bytes{job="node-exporter",fstype!="",mountpoint!=""} / node_filesystem_size_bytes{job="node-exporter",fstype!="",mountpoint!=""} * 100 < 3
            and
              node_filesystem_readonly{job="node-exporter",fstype!="",mountpoint!=""} == 0
            )
          for: 30m
          labels:
            severity: critical
        - alert: NodeFilesystemFilesFillingUp
          annotations:
            description: Filesystem on {{ $labels.device }}, mounted on {{ $labels.mountpoint
              }}, at {{ $labels.instance }} has only {{ printf "%.2f" $value }}% available
              inodes left and is filling up.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodefilesystemfilesfillingup
            summary: Filesystem is predicted to run out of inodes within the next 24 hours.
          expr: |-
            (
              node_filesystem_files_free{job="node-exporter",fstype!="",mountpoint!=""} / node_filesystem_files{job="node-exporter",fstype!="",mountpoint!=""} * 100 < 40
            and
              predict_linear(node_filesystem_files_free{job="node-exporter",fstype!="",mountpoint!=""}[6h], 24*60*60) < 0
            and
              node_filesystem_readonly{job="node-exporter",fstype!="",mountpoint!=""} == 0
            )
          for: 1h
          labels:
            severity: warning
        - alert: NodeFilesystemFilesFillingUp
          annotations:
            description: Filesystem on {{ $labels.device }}, mounted on {{ $labels.mountpoint
              }}, at {{ $labels.instance }} has only {{ printf "%.2f" $value }}% available
              inodes left and is filling up fast.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodefilesystemfilesfillingup
            summary: Filesystem is predicted to run out of inodes within the next 4 hours.
          expr: |-
            (
              node_filesystem_files_free{job="node-exporter",fstype!="",mountpoint!=""} / node_filesystem_files{job="node-exporter",fstype!="",mountpoint!=""} * 100 < 20
            and
              predict_linear(node_filesystem_files_free{job="node-exporter",fstype!="",mountpoint!=""}[6h], 4*60*60) < 0
            and
              node_filesystem_readonly{job="node-exporter",fstype!="",mountpoint!=""} == 0
            )
          for: 1h
          labels:
            severity: critical
        - alert: NodeFilesystemAlmostOutOfFiles
          annotations:
            description: Filesystem on {{ $labels.device }}, mounted on {{ $labels.mountpoint
              }}, at {{ $labels.instance }} has only {{ printf "%.2f" $value }}% available
              inodes left.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodefilesystemalmostoutoffiles
            summary: Filesystem has less than 5% inodes left.
          expr: |-
            (
              node_filesystem_files_free{job="node-exporter",fstype!="",mountpoint!=""} / node_filesystem_files{job="node-exporter",fstype!="",mountpoint!=""} * 100 < 5
            and
              node_filesystem_readonly{job="node-exporter",fstype!="",mountpoint!=""} == 0
            )
          for: 1h
          labels:
            severity: warning
        - alert: NodeFilesystemAlmostOutOfFiles
          annotations:
            description: Filesystem on {{ $labels.device }}, mounted on {{ $labels.mountpoint
              }}, at {{ $labels.instance }} has only {{ printf "%.2f" $value }}% available
              inodes left.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodefilesystemalmostoutoffiles
            summary: Filesystem has less than 3% inodes left.
          expr: |-
            (
              node_filesystem_files_free{job="node-exporter",fstype!="",mountpoint!=""} / node_filesystem_files{job="node-exporter",fstype!="",mountpoint!=""} * 100 < 3
            and
              node_filesystem_readonly{job="node-exporter",fstype!="",mountpoint!=""} == 0
            )
          for: 1h
          labels:
            severity: critical
        - alert: NodeNetworkReceiveErrs
          annotations:
            description: '{{ $labels.instance }} interface {{ $labels.device }} has encountered
              {{ printf "%.0f" $value }} receive errors in the last two minutes.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodenetworkreceiveerrs
            summary: Network interface is reporting many receive errors.
          expr: rate(node_network_receive_errs_total{job="node-exporter"}[2m]) / rate(node_network_receive_packets_total{job="node-exporter"}[2m])
            > 0.01
          for: 1h
          labels:
            severity: warning
        - alert: NodeNetworkTransmitErrs
          annotations:
            description: '{{ $labels.instance }} interface {{ $labels.device }} has encountered
              {{ printf "%.0f" $value }} transmit errors in the last two minutes.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodenetworktransmiterrs
            summary: Network interface is reporting many transmit errors.
          expr: rate(node_network_transmit_errs_total{job="node-exporter"}[2m]) / rate(node_network_transmit_packets_total{job="node-exporter"}[2m])
            > 0.01
          for: 1h
          labels:
            severity: warning
        - alert: NodeHighNumberConntrackEntriesUsed
          annotations:
            description: '{{ $labels.instance }} {{ $value | humanizePercentage }} of conntrack
              entries are used.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodehighnumberconntrackentriesused
            summary: Number of conntrack are getting close to the limit.
          expr: (node_nf_conntrack_entries{job="node-exporter"} / node_nf_conntrack_entries_limit)
            > 0.75
          labels:
            severity: warning
        - alert: NodeTextFileCollectorScrapeError
          annotations:
            description: Node Exporter text file collector on {{ $labels.instance }} failed
              to scrape.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodetextfilecollectorscrapeerror
            summary: Node Exporter text file collector failed to scrape.
          expr: node_textfile_scrape_error{job="node-exporter"} == 1
          labels:
            severity: warning
        - alert: NodeClockSkewDetected
          annotations:
            description: Clock at {{ $labels.instance }} is out of sync by more than 0.05s.
              Ensure NTP is configured correctly on this host.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodeclockskewdetected
            summary: Clock skew detected.
          expr: |-
            (
              node_timex_offset_seconds{job="node-exporter"} > 0.05
            and
              deriv(node_timex_offset_seconds{job="node-exporter"}[5m]) >= 0
            )
            or
            (
              node_timex_offset_seconds{job="node-exporter"} < -0.05
            and
              deriv(node_timex_offset_seconds{job="node-exporter"}[5m]) <= 0
            )
          for: 10m
          labels:
            severity: warning
        - alert: NodeClockNotSynchronising
          annotations:
            description: Clock at {{ $labels.instance }} is not synchronising. Ensure NTP
              is configured on this host.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodeclocknotsynchronising
            summary: Clock not synchronising.
          expr: |-
            min_over_time(node_timex_sync_status{job="node-exporter"}[5m]) == 0
            and
            node_timex_maxerror_seconds{job="node-exporter"} >= 16
          for: 10m
          labels:
            severity: warning
        - alert: NodeRAIDDegraded
          annotations:
            description: RAID array '{{ $labels.device }}' at {{ $labels.instance }} is
              in degraded state due to one or more disks failures. Number of spare drives
              is insufficient to fix issue automatically.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/noderaiddegraded
            summary: RAID Array is degraded.
          expr: node_md_disks_required{job="node-exporter",device=~"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)"}
            - ignoring (state) (node_md_disks{state="active",job="node-exporter",device=~"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)"})
            > 0
          for: 15m
          labels:
            severity: critical
        - alert: NodeRAIDDiskFailure
          annotations:
            description: At least one device in RAID array at {{ $labels.instance }} failed.
              Array '{{ $labels.device }}' needs attention and possibly a disk swap.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/noderaiddiskfailure
            summary: Failed device in RAID array.
          expr: node_md_disks{state="failed",job="node-exporter",device=~"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)"}
            > 0
          labels:
            severity: warning
        - alert: NodeFileDescriptorLimit
          annotations:
            description: File descriptors limit at {{ $labels.instance }} is currently at
              {{ printf "%.2f" $value }}%.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodefiledescriptorlimit
            summary: Kernel is predicted to exhaust file descriptors limit soon.
          expr: |-
            (
              node_filefd_allocated{job="node-exporter"} * 100 / node_filefd_maximum{job="node-exporter"} > 70
            )
          for: 15m
          labels:
            severity: warning
        - alert: NodeFileDescriptorLimit
          annotations:
            description: File descriptors limit at {{ $labels.instance }} is currently at
              {{ printf "%.2f" $value }}%.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodefiledescriptorlimit
            summary: Kernel is predicted to exhaust file descriptors limit soon.
          expr: |-
            (
              node_filefd_allocated{job="node-exporter"} * 100 / node_filefd_maximum{job="node-exporter"} > 90
            )
          for: 15m
          labels:
            severity: critical
        - alert: NodeCPUHighUsage
          annotations:
            description: |
              CPU usage at {{ $labels.instance }} has been above 90% for the last 15 minutes, is currently at {{ printf "%.2f" $value }}%.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodecpuhighusage
            summary: High CPU usage.
          expr: sum without(mode) (avg without (cpu) (rate(node_cpu_seconds_total{job="node-exporter",
            mode!~"idle|iowait"}[2m]))) * 100 > 90
          for: 15m
          labels:
            severity: info
        - alert: NodeSystemSaturation
          annotations:
            description: |
              System load per core at {{ $labels.instance }} has been above 2 for the last 15 minutes, is currently at {{ printf "%.2f" $value }}.
              This might indicate this instance resources saturation and can cause it becoming unresponsive.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodesystemsaturation
            summary: System saturated, load per core is very high.
          expr: |-
            node_load1{job="node-exporter"}
            / count without (cpu, mode) (node_cpu_seconds_total{job="node-exporter", mode="idle"}) > 2
          for: 15m
          labels:
            severity: warning
        - alert: NodeMemoryMajorPagesFaults
          annotations:
            description: |
              Memory major pages are occurring at very high rate at {{ $labels.instance }}, 500 major page faults per second for the last 15 minutes, is currently at {{ printf "%.2f" $value }}.
              Please check that there is enough memory available at this instance.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodememorymajorpagesfaults
            summary: Memory major page faults are occurring at very high rate.
          expr: rate(node_vmstat_pgmajfault{job="node-exporter"}[5m]) > 500
          for: 15m
          labels:
            severity: warning
        - alert: NodeMemoryHighUtilization
          annotations:
            description: |
              Memory is filling up at {{ $labels.instance }}, has been above 90% for the last 15 minutes, is currently at {{ printf "%.2f" $value }}%.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodememoryhighutilization
            summary: Host is running out of memory.
          expr: 100 - (node_memory_MemAvailable_bytes{job="node-exporter"} / node_memory_MemTotal_bytes{job="node-exporter"}
            * 100) > 90
          for: 15m
          labels:
            severity: warning
        - alert: NodeDiskIOSaturation
          annotations:
            description: |
              Disk IO queue (aqu-sq) is high on {{ $labels.device }} at {{ $labels.instance }}, has been above 10 for the last 30 minutes, is currently at {{ printf "%.2f" $value }}.
              This symptom might indicate disk saturation.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodediskiosaturation
            summary: Disk IO queue is high.
          expr: rate(node_disk_io_time_weighted_seconds_total{job="node-exporter", device=~"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)"}[5m])
            > 10
          for: 30m
          labels:
            severity: warning
        - alert: NodeSystemdServiceFailed
          annotations:
            description: Systemd service {{ $labels.name }} has entered failed state at
              {{ $labels.instance }}
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodesystemdservicefailed
            summary: Systemd service has entered failed state.
          expr: node_systemd_unit_state{job="node-exporter", state="failed"} == 1
          for: 5m
          labels:
            severity: warning
        - alert: NodeSystemdServiceCrashlooping
          annotations:
            description: Systemd service {{ $labels.name }} has being restarted too many
              times at {{ $labels.instance }} for the last 15 minutes. Please check if service
              is crash looping.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodesystemdservicecrashlooping
            summary: Systemd service keeps restaring, possibly crash looping.
          expr: increase(node_systemd_service_restart_total{job="node-exporter"}[5m]) >
            2
          for: 15m
          labels:
            severity: warning
        - alert: NodeBondingDegraded
          annotations:
            description: Bonding interface {{ $labels.master }} on {{ $labels.instance }}
              is in degraded state due to one or more slave failures.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodebondingdegraded
            summary: Bonding interface is degraded
          expr: (node_bonding_slaves - node_bonding_active) != 0
          for: 5m
          labels:
            severity: warning
    tomer-tomer-prom-kube-prometheus-node-exporter.rules-1020d465-8a59-4993-9909-3cb66ebd5281.yaml: |
      groups:
      - name: node-exporter.rules
        rules:
        - expr: |-
            count without (cpu, mode) (
              node_cpu_seconds_total{job="node-exporter",mode="idle"}
            )
          record: instance:node_num_cpu:sum
        - expr: |-
            1 - avg without (cpu) (
              sum without (mode) (rate(node_cpu_seconds_total{job="node-exporter", mode=~"idle|iowait|steal"}[5m]))
            )
          record: instance:node_cpu_utilisation:rate5m
        - expr: |-
            (
              node_load1{job="node-exporter"}
            /
              instance:node_num_cpu:sum{job="node-exporter"}
            )
          record: instance:node_load1_per_cpu:ratio
        - expr: |-
            1 - (
              (
                node_memory_MemAvailable_bytes{job="node-exporter"}
                or
                (
                  node_memory_Buffers_bytes{job="node-exporter"}
                  +
                  node_memory_Cached_bytes{job="node-exporter"}
                  +
                  node_memory_MemFree_bytes{job="node-exporter"}
                  +
                  node_memory_Slab_bytes{job="node-exporter"}
                )
              )
            /
              node_memory_MemTotal_bytes{job="node-exporter"}
            )
          record: instance:node_memory_utilisation:ratio
        - expr: rate(node_vmstat_pgmajfault{job="node-exporter"}[5m])
          record: instance:node_vmstat_pgmajfault:rate5m
        - expr: rate(node_disk_io_time_seconds_total{job="node-exporter", device=~"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)"}[5m])
          record: instance_device:node_disk_io_time_seconds:rate5m
        - expr: rate(node_disk_io_time_weighted_seconds_total{job="node-exporter", device=~"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)"}[5m])
          record: instance_device:node_disk_io_time_weighted_seconds:rate5m
        - expr: |-
            sum without (device) (
              rate(node_network_receive_bytes_total{job="node-exporter", device!="lo"}[5m])
            )
          record: instance:node_network_receive_bytes_excluding_lo:rate5m
        - expr: |-
            sum without (device) (
              rate(node_network_transmit_bytes_total{job="node-exporter", device!="lo"}[5m])
            )
          record: instance:node_network_transmit_bytes_excluding_lo:rate5m
        - expr: |-
            sum without (device) (
              rate(node_network_receive_drop_total{job="node-exporter", device!="lo"}[5m])
            )
          record: instance:node_network_receive_drop_excluding_lo:rate5m
        - expr: |-
            sum without (device) (
              rate(node_network_transmit_drop_total{job="node-exporter", device!="lo"}[5m])
            )
          record: instance:node_network_transmit_drop_excluding_lo:rate5m
    tomer-tomer-prom-kube-prometheus-node-network-a73ef379-94ed-4f4e-bbbc-ae30de530e6e.yaml: |
      groups:
      - name: node-network
        rules:
        - alert: NodeNetworkInterfaceFlapping
          annotations:
            description: Network interface "{{ $labels.device }}" changing its up status
              often on node-exporter {{ $labels.namespace }}/{{ $labels.pod }}
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/general/nodenetworkinterfaceflapping
            summary: Network interface is often changing its status
          expr: changes(node_network_up{job="node-exporter",device!~"veth.+"}[2m]) > 2
          for: 2m
          labels:
            severity: warning
    tomer-tomer-prom-kube-prometheus-node.rules-66bb3640-c4a2-4537-a0a5-5efeed3ac29e.yaml: |
      groups:
      - name: node.rules
        rules:
        - expr: |-
            topk by (cluster, namespace, pod) (1,
              max by (cluster, node, namespace, pod) (
                label_replace(kube_pod_info{job="kube-state-metrics",node!=""}, "pod", "$1", "pod", "(.*)")
            ))
          record: 'node_namespace_pod:kube_pod_info:'
        - expr: |-
            count by (cluster, node) (
              node_cpu_seconds_total{mode="idle",job="node-exporter"}
              * on (cluster, namespace, pod) group_left(node)
              topk by (cluster, namespace, pod) (1, node_namespace_pod:kube_pod_info:)
            )
          record: node:node_num_cpu:sum
        - expr: |-
            sum(
              node_memory_MemAvailable_bytes{job="node-exporter"} or
              (
                node_memory_Buffers_bytes{job="node-exporter"} +
                node_memory_Cached_bytes{job="node-exporter"} +
                node_memory_MemFree_bytes{job="node-exporter"} +
                node_memory_Slab_bytes{job="node-exporter"}
              )
            ) by (cluster)
          record: :node_memory_MemAvailable_bytes:sum
        - expr: |-
            avg by (cluster, node) (
              sum without (mode) (
                rate(node_cpu_seconds_total{mode!="idle",mode!="iowait",mode!="steal",job="node-exporter"}[5m])
              )
            )
          record: node:node_cpu_utilization:ratio_rate5m
        - expr: |-
            avg by (cluster) (
              node:node_cpu_utilization:ratio_rate5m
            )
          record: cluster:node_cpu:ratio_rate5m
    tomer-tomer-prom-kube-prometheus-prometheus-ab914fa6-70e7-4399-9510-cb56a66b5a5f.yaml: |
      groups:
      - name: prometheus
        rules:
        - alert: PrometheusBadConfig
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} has failed to
              reload its configuration.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusbadconfig
            summary: Failed Prometheus configuration reload.
          expr: |-
            # Without max_over_time, failed scrapes could create false negatives, see
            # https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.
            max_over_time(prometheus_config_last_reload_successful{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m]) == 0
          for: 10m
          labels:
            severity: critical
        - alert: PrometheusSDRefreshFailure
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} has failed to
              refresh SD with mechanism {{$labels.mechanism}}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheussdrefreshfailure
            summary: Failed Prometheus SD refresh.
          expr: increase(prometheus_sd_refresh_failures_total{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[10m])
            > 0
          for: 20m
          labels:
            severity: warning
        - alert: PrometheusKubernetesListWatchFailures
          annotations:
            description: Kubernetes service discovery of Prometheus {{$labels.namespace}}/{{$labels.pod}}
              is experiencing {{ printf "%.0f" $value }} failures with LIST/WATCH requests
              to the Kubernetes API in the last 5 minutes.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheuskuberneteslistwatchfailures
            summary: Requests in Kubernetes SD are failing.
          expr: increase(prometheus_sd_kubernetes_failures_total{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m])
            > 0
          for: 15m
          labels:
            severity: warning
        - alert: PrometheusNotificationQueueRunningFull
          annotations:
            description: Alert notification queue of Prometheus {{$labels.namespace}}/{{$labels.pod}}
              is running full.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusnotificationqueuerunningfull
            summary: Prometheus alert notification queue predicted to run full in less than
              30m.
          expr: |-
            # Without min_over_time, failed scrapes could create false negatives, see
            # https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.
            (
              predict_linear(prometheus_notifications_queue_length{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m], 60 * 30)
            >
              min_over_time(prometheus_notifications_queue_capacity{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m])
            )
          for: 15m
          labels:
            severity: warning
        - alert: PrometheusErrorSendingAlertsToSomeAlertmanagers
          annotations:
            description: '{{ printf "%.1f" $value }}% of alerts sent by Prometheus {{$labels.namespace}}/{{$labels.pod}}
              to Alertmanager {{$labels.alertmanager}} were affected by errors.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheuserrorsendingalertstosomealertmanagers
            summary: More than 1% of alerts sent by Prometheus to a specific Alertmanager
              were affected by errors.
          expr: |-
            (
              rate(prometheus_notifications_errors_total{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m])
            /
              rate(prometheus_notifications_sent_total{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m])
            )
            * 100
            > 1
          for: 15m
          labels:
            severity: warning
        - alert: PrometheusNotConnectedToAlertmanagers
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} is not connected
              to any Alertmanagers.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusnotconnectedtoalertmanagers
            summary: Prometheus is not connected to any Alertmanagers.
          expr: |-
            # Without max_over_time, failed scrapes could create false negatives, see
            # https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.
            max_over_time(prometheus_notifications_alertmanagers_discovered{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m]) < 1
          for: 10m
          labels:
            severity: warning
        - alert: PrometheusTSDBReloadsFailing
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} has detected {{$value
              | humanize}} reload failures over the last 3h.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheustsdbreloadsfailing
            summary: Prometheus has issues reloading blocks from disk.
          expr: increase(prometheus_tsdb_reloads_failures_total{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[3h])
            > 0
          for: 4h
          labels:
            severity: warning
        - alert: PrometheusTSDBCompactionsFailing
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} has detected {{$value
              | humanize}} compaction failures over the last 3h.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheustsdbcompactionsfailing
            summary: Prometheus has issues compacting blocks.
          expr: increase(prometheus_tsdb_compactions_failed_total{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[3h])
            > 0
          for: 4h
          labels:
            severity: warning
        - alert: PrometheusNotIngestingSamples
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} is not ingesting
              samples.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusnotingestingsamples
            summary: Prometheus is not ingesting samples.
          expr: |-
            (
              sum without(type) (rate(prometheus_tsdb_head_samples_appended_total{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m])) <= 0
            and
              (
                sum without(scrape_job) (prometheus_target_metadata_cache_entries{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}) > 0
              or
                sum without(rule_group) (prometheus_rule_group_rules{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}) > 0
              )
            )
          for: 10m
          labels:
            severity: warning
        - alert: PrometheusDuplicateTimestamps
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} is dropping {{
              printf "%.4g" $value  }} samples/s with different values but duplicated timestamp.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusduplicatetimestamps
            summary: Prometheus is dropping samples with duplicate timestamps.
          expr: rate(prometheus_target_scrapes_sample_duplicate_timestamp_total{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m])
            > 0
          for: 10m
          labels:
            severity: warning
        - alert: PrometheusOutOfOrderTimestamps
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} is dropping {{
              printf "%.4g" $value  }} samples/s with timestamps arriving out of order.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusoutofordertimestamps
            summary: Prometheus drops samples with out-of-order timestamps.
          expr: rate(prometheus_target_scrapes_sample_out_of_order_total{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m])
            > 0
          for: 10m
          labels:
            severity: warning
        - alert: PrometheusRemoteStorageFailures
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} failed to send
              {{ printf "%.1f" $value }}% of the samples to {{ $labels.remote_name}}:{{
              $labels.url }}
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusremotestoragefailures
            summary: Prometheus fails to send samples to remote storage.
          expr: |-
            (
              (rate(prometheus_remote_storage_failed_samples_total{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m]) or rate(prometheus_remote_storage_samples_failed_total{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m]))
            /
              (
                (rate(prometheus_remote_storage_failed_samples_total{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m]) or rate(prometheus_remote_storage_samples_failed_total{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m]))
              +
                (rate(prometheus_remote_storage_succeeded_samples_total{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m]) or rate(prometheus_remote_storage_samples_total{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m]))
              )
            )
            * 100
            > 1
          for: 15m
          labels:
            severity: critical
        - alert: PrometheusRemoteWriteBehind
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} remote write is
              {{ printf "%.1f" $value }}s behind for {{ $labels.remote_name}}:{{ $labels.url
              }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusremotewritebehind
            summary: Prometheus remote write is behind.
          expr: |-
            # Without max_over_time, failed scrapes could create false negatives, see
            # https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.
            (
              max_over_time(prometheus_remote_storage_highest_timestamp_in_seconds{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m])
            - ignoring(remote_name, url) group_right
              max_over_time(prometheus_remote_storage_queue_highest_sent_timestamp_seconds{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m])
            )
            > 120
          for: 15m
          labels:
            severity: critical
        - alert: PrometheusRemoteWriteDesiredShards
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} remote write desired
              shards calculation wants to run {{ $value }} shards for queue {{ $labels.remote_name}}:{{
              $labels.url }}, which is more than the max of {{ printf `prometheus_remote_storage_shards_max{instance="%s",job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}`
              $labels.instance | query | first | value }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusremotewritedesiredshards
            summary: Prometheus remote write desired shards calculation wants to run more
              than configured max shards.
          expr: |-
            # Without max_over_time, failed scrapes could create false negatives, see
            # https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.
            (
              max_over_time(prometheus_remote_storage_shards_desired{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m])
            >
              max_over_time(prometheus_remote_storage_shards_max{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m])
            )
          for: 15m
          labels:
            severity: warning
        - alert: PrometheusRuleFailures
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} has failed to
              evaluate {{ printf "%.0f" $value }} rules in the last 5m.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusrulefailures
            summary: Prometheus is failing rule evaluations.
          expr: increase(prometheus_rule_evaluation_failures_total{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m])
            > 0
          for: 15m
          labels:
            severity: critical
        - alert: PrometheusMissingRuleEvaluations
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} has missed {{
              printf "%.0f" $value }} rule group evaluations in the last 5m.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusmissingruleevaluations
            summary: Prometheus is missing rule evaluations due to slow rule group evaluation.
          expr: increase(prometheus_rule_group_iterations_missed_total{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m])
            > 0
          for: 15m
          labels:
            severity: warning
        - alert: PrometheusTargetLimitHit
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} has dropped {{
              printf "%.0f" $value }} targets because the number of targets exceeded the
              configured target_limit.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheustargetlimithit
            summary: Prometheus has dropped targets because some scrape configs have exceeded
              the targets limit.
          expr: increase(prometheus_target_scrape_pool_exceeded_target_limit_total{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m])
            > 0
          for: 15m
          labels:
            severity: warning
        - alert: PrometheusLabelLimitHit
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} has dropped {{
              printf "%.0f" $value }} targets because some samples exceeded the configured
              label_limit, label_name_length_limit or label_value_length_limit.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheuslabellimithit
            summary: Prometheus has dropped targets because some scrape configs have exceeded
              the labels limit.
          expr: increase(prometheus_target_scrape_pool_exceeded_label_limits_total{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m])
            > 0
          for: 15m
          labels:
            severity: warning
        - alert: PrometheusScrapeBodySizeLimitHit
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} has failed {{
              printf "%.0f" $value }} scrapes in the last 5m because some targets exceeded
              the configured body_size_limit.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusscrapebodysizelimithit
            summary: Prometheus has dropped some targets that exceeded body size limit.
          expr: increase(prometheus_target_scrapes_exceeded_body_size_limit_total{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m])
            > 0
          for: 15m
          labels:
            severity: warning
        - alert: PrometheusScrapeSampleLimitHit
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} has failed {{
              printf "%.0f" $value }} scrapes in the last 5m because some targets exceeded
              the configured sample_limit.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusscrapesamplelimithit
            summary: Prometheus has failed scrapes that have exceeded the configured sample
              limit.
          expr: increase(prometheus_target_scrapes_exceeded_sample_limit_total{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m])
            > 0
          for: 15m
          labels:
            severity: warning
        - alert: PrometheusTargetSyncFailure
          annotations:
            description: '{{ printf "%.0f" $value }} targets in Prometheus {{$labels.namespace}}/{{$labels.pod}}
              have failed to sync because invalid configuration was supplied.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheustargetsyncfailure
            summary: Prometheus has failed to sync targets.
          expr: increase(prometheus_target_sync_failed_total{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[30m])
            > 0
          for: 5m
          labels:
            severity: critical
        - alert: PrometheusHighQueryLoad
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} query API has
              less than 20% available capacity in its query engine for the last 15 minutes.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheushighqueryload
            summary: Prometheus is reaching its maximum capacity serving concurrent requests.
          expr: avg_over_time(prometheus_engine_queries{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m])
            / max_over_time(prometheus_engine_queries_concurrent_max{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer"}[5m])
            > 0.8
          for: 15m
          labels:
            severity: warning
        - alert: PrometheusErrorSendingAlertsToAnyAlertmanager
          annotations:
            description: '{{ printf "%.1f" $value }}% minimum errors while sending alerts
              from Prometheus {{$labels.namespace}}/{{$labels.pod}} to any Alertmanager.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheuserrorsendingalertstoanyalertmanager
            summary: Prometheus encounters more than 3% errors sending alerts to any Alertmanager.
          expr: |-
            min without (alertmanager) (
              rate(prometheus_notifications_errors_total{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer",alertmanager!~``}[5m])
            /
              rate(prometheus_notifications_sent_total{job="tomer-prom-kube-prometheus-prometheus",namespace="tomer",alertmanager!~``}[5m])
            )
            * 100
            > 3
          for: 15m
          labels:
            severity: critical
    tomer-tomer-prom-kube-prometheus-prometheus-operator-e6b13bb9-0613-4002-9913-b61d5ec48028.yaml: |
      groups:
      - name: prometheus-operator
        rules:
        - alert: PrometheusOperatorListErrors
          annotations:
            description: Errors while performing List operations in controller {{$labels.controller}}
              in {{$labels.namespace}} namespace.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus-operator/prometheusoperatorlisterrors
            summary: Errors while performing list operations in controller.
          expr: (sum by (cluster,controller,namespace) (rate(prometheus_operator_list_operations_failed_total{job="tomer-prom-kube-prometheus-operator",namespace="tomer"}[10m]))
            / sum by (cluster,controller,namespace) (rate(prometheus_operator_list_operations_total{job="tomer-prom-kube-prometheus-operator",namespace="tomer"}[10m])))
            > 0.4
          for: 15m
          labels:
            severity: warning
        - alert: PrometheusOperatorWatchErrors
          annotations:
            description: Errors while performing watch operations in controller {{$labels.controller}}
              in {{$labels.namespace}} namespace.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus-operator/prometheusoperatorwatcherrors
            summary: Errors while performing watch operations in controller.
          expr: (sum by (cluster,controller,namespace) (rate(prometheus_operator_watch_operations_failed_total{job="tomer-prom-kube-prometheus-operator",namespace="tomer"}[5m]))
            / sum by (cluster,controller,namespace) (rate(prometheus_operator_watch_operations_total{job="tomer-prom-kube-prometheus-operator",namespace="tomer"}[5m])))
            > 0.4
          for: 15m
          labels:
            severity: warning
        - alert: PrometheusOperatorSyncFailed
          annotations:
            description: Controller {{ $labels.controller }} in {{ $labels.namespace }}
              namespace fails to reconcile {{ $value }} objects.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus-operator/prometheusoperatorsyncfailed
            summary: Last controller reconciliation failed
          expr: min_over_time(prometheus_operator_syncs{status="failed",job="tomer-prom-kube-prometheus-operator",namespace="tomer"}[5m])
            > 0
          for: 10m
          labels:
            severity: warning
        - alert: PrometheusOperatorReconcileErrors
          annotations:
            description: '{{ $value | humanizePercentage }} of reconciling operations failed
              for {{ $labels.controller }} controller in {{ $labels.namespace }} namespace.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus-operator/prometheusoperatorreconcileerrors
            summary: Errors while reconciling objects.
          expr: (sum by (cluster,controller,namespace) (rate(prometheus_operator_reconcile_errors_total{job="tomer-prom-kube-prometheus-operator",namespace="tomer"}[5m])))
            / (sum by (cluster,controller,namespace) (rate(prometheus_operator_reconcile_operations_total{job="tomer-prom-kube-prometheus-operator",namespace="tomer"}[5m])))
            > 0.1
          for: 10m
          labels:
            severity: warning
        - alert: PrometheusOperatorStatusUpdateErrors
          annotations:
            description: '{{ $value | humanizePercentage }} of status update operations
              failed for {{ $labels.controller }} controller in {{ $labels.namespace }}
              namespace.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus-operator/prometheusoperatorstatusupdateerrors
            summary: Errors while updating objects status.
          expr: (sum by (cluster,controller,namespace) (rate(prometheus_operator_status_update_errors_total{job="tomer-prom-kube-prometheus-operator",namespace="tomer"}[5m])))
            / (sum by (cluster,controller,namespace) (rate(prometheus_operator_status_update_operations_total{job="tomer-prom-kube-prometheus-operator",namespace="tomer"}[5m])))
            > 0.1
          for: 10m
          labels:
            severity: warning
        - alert: PrometheusOperatorNodeLookupErrors
          annotations:
            description: Errors while reconciling Prometheus in {{ $labels.namespace }}
              Namespace.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus-operator/prometheusoperatornodelookuperrors
            summary: Errors while reconciling Prometheus.
          expr: rate(prometheus_operator_node_address_lookup_errors_total{job="tomer-prom-kube-prometheus-operator",namespace="tomer"}[5m])
            > 0.1
          for: 10m
          labels:
            severity: warning
        - alert: PrometheusOperatorNotReady
          annotations:
            description: Prometheus operator in {{ $labels.namespace }} namespace isn't
              ready to reconcile {{ $labels.controller }} resources.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus-operator/prometheusoperatornotready
            summary: Prometheus operator not ready
          expr: min by (cluster,controller,namespace) (max_over_time(prometheus_operator_ready{job="tomer-prom-kube-prometheus-operator",namespace="tomer"}[5m])
            == 0)
          for: 5m
          labels:
            severity: warning
        - alert: PrometheusOperatorRejectedResources
          annotations:
            description: Prometheus operator in {{ $labels.namespace }} namespace rejected
              {{ printf "%0.0f" $value }} {{ $labels.controller }}/{{ $labels.resource }}
              resources.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus-operator/prometheusoperatorrejectedresources
            summary: Resources rejected by Prometheus operator
          expr: min_over_time(prometheus_operator_managed_resources{state="rejected",job="tomer-prom-kube-prometheus-operator",namespace="tomer"}[5m])
            > 0
          for: 5m
          labels:
            severity: warning
  kind: ConfigMap
  metadata:
    creationTimestamp: "2025-03-03T19:50:35Z"
    labels:
      managed-by: prometheus-operator
      prometheus-name: tomer-prom-kube-prometheus-prometheus
    name: prometheus-tomer-prom-kube-prometheus-prometheus-rulefiles-0
    namespace: tomer
    ownerReferences:
    - apiVersion: monitoring.coreos.com/v1
      blockOwnerDeletion: true
      controller: true
      kind: Prometheus
      name: tomer-prom-kube-prometheus-prometheus
      uid: c567f2d1-7eb0-4d57-9d49-a147ae4e8d98
    resourceVersion: "2298016"
    uid: ddfc82da-99d1-416d-961f-e72d6034d71c
- apiVersion: v1
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-ingress
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T18:33:36Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: tomer-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
    name: tomer-ingress-ingress-nginx-controller
    namespace: tomer
    resourceVersion: "2223446"
    uid: 9803f619-f292-4e88-b009-9432b9654eb1
- apiVersion: v1
  data:
    grafana.ini: |
      [analytics]
      check_for_updates = true
      [grafana_net]
      url = https://grafana.net
      [log]
      mode = console
      [paths]
      data = /var/lib/grafana/
      logs = /var/log/grafana
      plugins = /var/lib/grafana/plugins
      provisioning = /etc/grafana/provisioning
      [server]
      domain = ''
      serve_from_sub_path = true
      root_url = %(protocol)s://%(domain)s:/grafana/
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: grafana
      app.kubernetes.io/version: 11.5.2
      helm.sh/chart: grafana-8.10.1
    name: tomer-prom-grafana
    namespace: tomer
    resourceVersion: "2319563"
    uid: 4bf2b12f-564e-4f9d-b9e0-7226c35d30cc
- apiVersion: v1
  data:
    provider.yaml: |-
      apiVersion: 1
      providers:
        - name: 'sidecarProvider'
          orgId: 1
          folder: ''
          folderUid: ''
          type: file
          disableDeletion: false
          allowUiUpdates: false
          updateIntervalSeconds: 30
          options:
            foldersFromFilesStructure: false
            path: /tmp/dashboards
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: grafana
      app.kubernetes.io/version: 11.5.2
      helm.sh/chart: grafana-8.10.1
    name: tomer-prom-grafana-config-dashboards
    namespace: tomer
    resourceVersion: "2297419"
    uid: a377f592-3317-4202-8b91-dcb886d734c9
- apiVersion: v1
  data:
    alertmanager-overview.json: '{"graphTooltip":1,"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":1,"panels":[],"title":"Alerts","type":"row"},{"datasource":{"type":"prometheus","uid":"$datasource"},"description":"current
      set of alerts stored in the Alertmanager","fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","stacking":{"mode":"normal"}},"unit":"none"}},"gridPos":{"h":7,"w":12,"x":0,"y":1},"id":2,"options":{"legend":{"showLegend":false},"tooltip":{"mode":"multi"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"sum(alertmanager_alerts{namespace=~\"$namespace\",service=~\"$service\"})
      by (namespace,service,instance)","intervalFactor":2,"legendFormat":"{{instance}}"}],"title":"Alerts","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"$datasource"},"description":"rate
      of successful and invalid alerts received by the Alertmanager","fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","stacking":{"mode":"normal"}},"unit":"ops"}},"gridPos":{"h":7,"w":12,"x":12,"y":1},"id":3,"options":{"legend":{"showLegend":false},"tooltip":{"mode":"multi"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"sum(rate(alertmanager_alerts_received_total{namespace=~\"$namespace\",service=~\"$service\"}[$__rate_interval]))
      by (namespace,service,instance)","intervalFactor":2,"legendFormat":"{{instance}}
      Received"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"sum(rate(alertmanager_alerts_invalid_total{namespace=~\"$namespace\",service=~\"$service\"}[$__rate_interval]))
      by (namespace,service,instance)","intervalFactor":2,"legendFormat":"{{instance}}
      Invalid"}],"title":"Alerts receive rate","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":8},"id":4,"panels":[],"title":"Notifications","type":"row"},{"datasource":{"type":"prometheus","uid":"$datasource"},"description":"rate
      of successful and invalid notifications sent by the Alertmanager","fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","stacking":{"mode":"normal"}},"unit":"ops"}},"gridPos":{"h":7,"w":12,"x":0,"y":9},"id":5,"options":{"legend":{"showLegend":false},"tooltip":{"mode":"multi"}},"pluginVersion":"v11.4.0","repeat":"integration","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"sum(rate(alertmanager_notifications_total{namespace=~\"$namespace\",service=~\"$service\",
      integration=\"$integration\"}[$__rate_interval])) by (integration,namespace,service,instance)","intervalFactor":2,"legendFormat":"{{instance}}
      Total"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"sum(rate(alertmanager_notifications_failed_total{namespace=~\"$namespace\",service=~\"$service\",
      integration=\"$integration\"}[$__rate_interval])) by (integration,namespace,service,instance)","intervalFactor":2,"legendFormat":"{{instance}}
      Failed"}],"title":"$integration: Notifications Send Rate","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"$datasource"},"description":"latency
      of notifications sent by the Alertmanager","fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","stacking":{"mode":"normal"}},"unit":"s"}},"gridPos":{"h":7,"w":12,"x":12,"y":9},"id":6,"options":{"legend":{"showLegend":false},"tooltip":{"mode":"multi"}},"pluginVersion":"v11.4.0","repeat":"integration","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"histogram_quantile(0.99,\n  sum(rate(alertmanager_notification_latency_seconds_bucket{namespace=~\"$namespace\",service=~\"$service\",
      integration=\"$integration\"}[$__rate_interval])) by (le,namespace,service,instance)\n)\n","intervalFactor":2,"legendFormat":"{{instance}}
      99th Percentile"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"histogram_quantile(0.50,\n  sum(rate(alertmanager_notification_latency_seconds_bucket{namespace=~\"$namespace\",service=~\"$service\",
      integration=\"$integration\"}[$__rate_interval])) by (le,namespace,service,instance)\n)\n","intervalFactor":2,"legendFormat":"{{instance}}
      Median"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"sum(rate(alertmanager_notification_latency_seconds_sum{namespace=~\"$namespace\",service=~\"$service\",
      integration=\"$integration\"}[$__rate_interval])) by (namespace,service,instance)\n/\nsum(rate(alertmanager_notification_latency_seconds_count{namespace=~\"$namespace\",service=~\"$service\",
      integration=\"$integration\"}[$__rate_interval])) by (namespace,service,instance)\n","intervalFactor":2,"legendFormat":"{{instance}}
      Average"}],"title":"$integration: Notification Duration","type":"timeseries"}],"schemaVersion":39,"tags":["alertmanager-mixin"],"templating":{"list":[{"current":{"selected":false,"text":"Prometheus","value":"Prometheus"},"hide":0,"label":"Data
      Source","name":"datasource","query":"prometheus","type":"datasource"},{"current":{"selected":false,"text":"","value":""},"datasource":{"type":"prometheus","uid":"${datasource}"},"includeAll":false,"label":"namespace","name":"namespace","query":"label_values(alertmanager_alerts,
      namespace)","refresh":2,"sort":1,"type":"query"},{"current":{"selected":false,"text":"","value":""},"datasource":{"type":"prometheus","uid":"${datasource}"},"includeAll":false,"label":"service","name":"service","query":"label_values(alertmanager_alerts,
      service)","refresh":2,"sort":1,"type":"query"},{"current":{"selected":false,"text":"$__all","value":"$__all"},"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":2,"includeAll":true,"name":"integration","query":"label_values(alertmanager_notifications_total{integration=~\".*\"},
      integration)","refresh":2,"sort":1,"type":"query"}]},"time":{"from":"now-1h","to":"now"},"timepicker":{"refresh_intervals":["30s"]},"timezone":
      "utc","title":"Alertmanager / Overview","uid":"alertmanager-overview"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-alertmanager-overview
    namespace: tomer
    resourceVersion: "2297423"
    uid: 9794d680-8ca4-4f13-a719-092a2c5c8f1e
- apiVersion: v1
  data:
    apiserver.json: '{"editable":true,"links":[{"asDropdown":true,"includeVars":true,"keepTime":true,"tags":["kubernetes-mixin"],"targetBlank":false,"title":"Kubernetes","type":"dashboards"}],"panels":[{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"description":"The SLO (service level objective) and other metrics
      displayed on this dashboard are for informational purposes only.","gridPos":{"h":2,"w":24,"x":0,"y":0},"id":1,"options":{"content":"The
      SLO (service level objective) and other metrics displayed on this dashboard
      are for informational purposes only."},"pluginVersion":"v11.4.0","title":"Notice","type":"text"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"description":"How many percent of requests (both read and write)
      in 30 days have been answered successfully and fast enough?","fieldConfig":{"defaults":{"decimals":3,"unit":"percentunit"}},"gridPos":{"h":7,"w":8,"x":0,"y":2},"id":2,"interval":"1m","pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"apiserver_request:availability30d{verb=\"all\",
      cluster=\"$cluster\"}"}],"title":"Availability (30d) > 99.000%","type":"stat"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"description":"How much error budget is left looking at our 0.990%
      availability guarantees?","fieldConfig":{"defaults":{"custom":{"fillOpacity":100},"decimals":3,"unit":"percentunit"}},"gridPos":{"h":7,"w":16,"x":8,"y":2},"id":3,"interval":"1m","options":{"legend":{"asTable":true,"placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"100
      * (apiserver_request:availability30d{verb=\"all\", cluster=\"$cluster\"} - 0.990000)","legendFormat":"errorbudget"}],"title":"ErrorBudget
      (30d) > 99.000%","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"description":"How many percent of read requests (LIST,GET) in 30
      days have been answered successfully and fast enough?","fieldConfig":{"defaults":{"decimals":3,"unit":"percentunit"}},"gridPos":{"h":7,"w":6,"x":0,"y":9},"id":4,"interval":"1m","pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"apiserver_request:availability30d{verb=\"read\",
      cluster=\"$cluster\"}"}],"title":"Read Availability (30d)","type":"stat"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"description":"How many read requests (LIST,GET) per second do the
      apiservers get by code?","fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"stacking":{"mode":"normal"}},"unit":"reqps"},"overrides":[{"matcher":{"id":"byRegexp","options":"/2../i"},"properties":[{"id":"color","value":"#56A64B"}]},{"matcher":{"id":"byRegexp","options":"/3../i"},"properties":[{"id":"color","value":"#F2CC0C"}]},{"matcher":{"id":"byRegexp","options":"/4../i"},"properties":[{"id":"color","value":"#3274D9"}]},{"matcher":{"id":"byRegexp","options":"/5../i"},"properties":[{"id":"color","value":"#E02F44"}]}]},"gridPos":{"h":7,"w":6,"x":6,"y":9},"id":5,"interval":"1m","options":{"legend":{"asTable":true,"placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (code) (code_resource:apiserver_request_total:rate5m{verb=\"read\", cluster=\"$cluster\"})","legendFormat":"{{
      code }}"}],"title":"Read SLI - Requests","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"description":"How many percent of read requests (LIST,GET) per second
      are returned with errors (5xx)?","fieldConfig":{"defaults":{"min":0,"unit":"percentunit"}},"gridPos":{"h":7,"w":6,"x":12,"y":9},"id":6,"interval":"1m","options":{"legend":{"asTable":true,"placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (resource) (code_resource:apiserver_request_total:rate5m{verb=\"read\",code=~\"5..\",
      cluster=\"$cluster\"}) / sum by (resource) (code_resource:apiserver_request_total:rate5m{verb=\"read\",
      cluster=\"$cluster\"})","legendFormat":"{{ resource }}"}],"title":"Read SLI
      - Errors","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"description":"How many seconds is the 99th percentile for reading
      (LIST|GET) a given resource?","fieldConfig":{"defaults":{"unit":"s"}},"gridPos":{"h":7,"w":6,"x":18,"y":9},"id":7,"interval":"1m","options":{"legend":{"asTable":true,"placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"cluster_quantile:apiserver_request_sli_duration_seconds:histogram_quantile{verb=\"read\",
      cluster=\"$cluster\"}","legendFormat":"{{ resource }}"}],"title":"Read SLI -
      Duration","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"description":"How many percent of write requests (POST|PUT|PATCH|DELETE)
      in 30 days have been answered successfully and fast enough?","fieldConfig":{"defaults":{"decimals":3,"unit":"percentunit"}},"gridPos":{"h":7,"w":6,"x":0,"y":16},"id":8,"interval":"1m","pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"apiserver_request:availability30d{verb=\"write\",
      cluster=\"$cluster\"}"}],"title":"Write Availability (30d)","type":"stat"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"description":"How many write requests (POST|PUT|PATCH|DELETE) per
      second do the apiservers get by code?","fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"stacking":{"mode":"normal"}},"unit":"reqps"},"overrides":[{"matcher":{"id":"byRegexp","options":"/2../i"},"properties":[{"id":"color","value":"#56A64B"}]},{"matcher":{"id":"byRegexp","options":"/3../i"},"properties":[{"id":"color","value":"#F2CC0C"}]},{"matcher":{"id":"byRegexp","options":"/4../i"},"properties":[{"id":"color","value":"#3274D9"}]},{"matcher":{"id":"byRegexp","options":"/5../i"},"properties":[{"id":"color","value":"#E02F44"}]}]},"gridPos":{"h":7,"w":6,"x":6,"y":16},"id":9,"interval":"1m","options":{"legend":{"asTable":true,"placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (code) (code_resource:apiserver_request_total:rate5m{verb=\"write\", cluster=\"$cluster\"})","legendFormat":"{{
      code }}"}],"title":"Write SLI - Requests","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"description":"How many percent of write requests (POST|PUT|PATCH|DELETE)
      per second are returned with errors (5xx)?","fieldConfig":{"defaults":{"min":0,"unit":"percentunit"}},"gridPos":{"h":7,"w":6,"x":12,"y":16},"id":10,"interval":"1m","options":{"legend":{"asTable":true,"placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (resource) (code_resource:apiserver_request_total:rate5m{verb=\"write\",code=~\"5..\",
      cluster=\"$cluster\"}) / sum by (resource) (code_resource:apiserver_request_total:rate5m{verb=\"write\",
      cluster=\"$cluster\"})","legendFormat":"{{ resource }}"}],"title":"Write SLI
      - Errors","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"description":"How many seconds is the 99th percentile for writing
      (POST|PUT|PATCH|DELETE) a given resource?","fieldConfig":{"defaults":{"unit":"s"}},"gridPos":{"h":7,"w":6,"x":18,"y":16},"id":11,"interval":"1m","options":{"legend":{"asTable":true,"placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"cluster_quantile:apiserver_request_sli_duration_seconds:histogram_quantile{verb=\"write\",
      cluster=\"$cluster\"}","legendFormat":"{{ resource }}"}],"title":"Write SLI
      - Duration","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"min":0,"unit":"ops"}},"gridPos":{"h":7,"w":12,"x":0,"y":23},"id":12,"interval":"1m","options":{"legend":{"asTable":true,"placement":"right","showLegend":false},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(workqueue_adds_total{job=\"apiserver\",
      instance=~\"$instance\", cluster=\"$cluster\"}[$__rate_interval])) by (instance,
      name)","legendFormat":"{{instance}} {{name}}"}],"title":"Work Queue Add Rate","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"min":0,"unit":"short"}},"gridPos":{"h":7,"w":12,"x":12,"y":23},"id":13,"interval":"1m","options":{"legend":{"asTable":true,"placement":"right","showLegend":false},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(workqueue_depth{job=\"apiserver\",
      instance=~\"$instance\", cluster=\"$cluster\"}[$__rate_interval])) by (instance,
      name)","legendFormat":"{{instance}} {{name}}"}],"title":"Work Queue Depth","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"min":0,"unit":"s"}},"gridPos":{"h":7,"w":24,"x":0,"y":30},"id":14,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"histogram_quantile(0.99,
      sum(rate(workqueue_queue_duration_seconds_bucket{job=\"apiserver\", instance=~\"$instance\",
      cluster=\"$cluster\"}[$__rate_interval])) by (instance, name, le))","legendFormat":"{{instance}}
      {{name}}"}],"title":"Work Queue Latency","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"unit":"bytes"}},"gridPos":{"h":7,"w":8,"x":0,"y":37},"id":15,"interval":"1m","options":{"legend":{"asTable":true,"placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"process_resident_memory_bytes{job=\"apiserver\",instance=~\"$instance\",
      cluster=\"$cluster\"}","legendFormat":"{{instance}}"}],"title":"Memory","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"min":0,"unit":"short"}},"gridPos":{"h":7,"w":8,"x":8,"y":37},"id":16,"interval":"1m","options":{"legend":{"asTable":true,"placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"rate(process_cpu_seconds_total{job=\"apiserver\",instance=~\"$instance\",
      cluster=\"$cluster\"}[$__rate_interval])","legendFormat":"{{instance}}"}],"title":"CPU
      usage","type":"timeseries"},{"datasource":{"type":"datasource","uid":"-- Mixed
      --"},"fieldConfig":{"defaults":{"unit":"short"}},"gridPos":{"h":7,"w":8,"x":16,"y":37},"id":17,"interval":"1m","options":{"legend":{"asTable":true,"placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"go_goroutines{job=\"apiserver\",instance=~\"$instance\",
      cluster=\"$cluster\"}","legendFormat":"{{instance}}"}],"title":"Goroutines","type":"timeseries"}],"refresh":"10s","schemaVersion":39,"tags":["kubernetes-mixin"],"templating":{"list":[{"current":{"selected":true,"text":"default","value":"default"},"hide":0,"label":"Data
      source","name":"datasource","query":"prometheus","regex":"","type":"datasource"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":2,"label":"cluster","name":"cluster","query":"label_values(up{job=\"apiserver\"},
      cluster)","refresh":2,"sort":1,"type":"query","allValue":".*"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":0,"includeAll":true,"name":"instance","query":"label_values(up{job=\"apiserver\",
      cluster=\"$cluster\"}, instance)","refresh":2,"sort":1,"type":"query"}]},"time":{"from":"now-1h","to":"now"},"timezone":
      "utc","title":"Kubernetes / API server","uid":"09ec8aa1e996d6ffcd6817bbaff4db1b"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-apiserver
    namespace: tomer
    resourceVersion: "2297440"
    uid: 1894d1f8-df0e-49e3-8287-ed1c4d9a6211
- apiVersion: v1
  data:
    cluster-total.json: '{"editable":true,"links":[{"asDropdown":true,"includeVars":true,"keepTime":true,"tags":["kubernetes-mixin"],"targetBlank":false,"title":"Kubernetes","type":"dashboards"}],"panels":[{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"},"unit":"binBps"}},"gridPos":{"h":9,"w":12,"x":0,"y":0},"id":1,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (namespace) (\n    rate(container_network_receive_bytes_total{cluster=\"$cluster\",namespace!=\"\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","legendFormat":"__auto"}],"title":"Current
      Rate of Bytes Received","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"},"unit":"binBps"}},"gridPos":{"h":9,"w":12,"x":12,"y":0},"id":2,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (namespace) (\n    rate(container_network_transmit_bytes_total{cluster=\"$cluster\",namespace!=\"\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","legendFormat":"__auto"}],"title":"Current
      Rate of Bytes Transmitted","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"overrides":[{"matcher":{"id":"byRegexp","options":"/Bytes/"},"properties":[{"id":"unit","value":"binBps"}]},{"matcher":{"id":"byRegexp","options":"/Packets/"},"properties":[{"id":"unit","value":"pps"}]},{"matcher":{"id":"byName","options":"Namespace"},"properties":[{"id":"links","value":[{"title":"Drill
      down","url":"/d/8b7a8b326d7a6f1f04244066368c67af/kubernetes-networking-namespace-pods?${datasource:queryparam}&var-cluster=${cluster}&var-namespace=${__data.fields.Namespace}"}]}]}]},"gridPos":{"h":9,"w":24,"x":0,"y":9},"id":3,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (namespace) (\n    rate(container_network_receive_bytes_total{cluster=\"$cluster\",namespace!=\"\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (namespace) (\n    rate(container_network_transmit_bytes_total{cluster=\"$cluster\",namespace!=\"\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"avg
      by (namespace) (\n    rate(container_network_receive_bytes_total{cluster=\"$cluster\",namespace!=\"\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"avg
      by (namespace) (\n    rate(container_network_transmit_bytes_total{cluster=\"$cluster\",namespace!=\"\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (namespace) (\n    rate(container_network_receive_packets_total{cluster=\"$cluster\",namespace!=\"\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (namespace) (\n    rate(container_network_transmit_packets_total{cluster=\"$cluster\",namespace!=\"\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (namespace) (\n    rate(container_network_receive_packets_dropped_total{cluster=\"$cluster\",namespace!=\"\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (namespace) (\n    rate(container_network_transmit_packets_dropped_total{cluster=\"$cluster\",namespace!=\"\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","format":"table","instant":true}],"title":"Current
      Status","transformations":[{"id":"joinByField","options":{"byField":"namespace","mode":"outer"}},{"id":"organize","options":{"excludeByName":{"Time":true,"Time
      1":true,"Time 2":true,"Time 3":true,"Time 4":true,"Time 5":true,"Time 6":true,"Time
      7":true,"Time 8":true},"indexByName":{"Time 1":0,"Time 2":1,"Time 3":2,"Time
      4":3,"Time 5":4,"Time 6":5,"Time 7":6,"Time 8":7,"Value #A":9,"Value #B":10,"Value
      #C":11,"Value #D":12,"Value #E":13,"Value #F":14,"Value #G":15,"Value #H":16,"namespace":8},"renameByName":{"Value
      #A":"Rx Bytes","Value #B":"Tx Bytes","Value #C":"Rx Bytes (Avg)","Value #D":"Tx
      Bytes (Avg)","Value #E":"Rx Packets","Value #F":"Tx Packets","Value #G":"Rx
      Packets Dropped","Value #H":"Tx Packets Dropped","namespace":"Namespace"}}}],"type":"table"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"},"unit":"binBps"}},"gridPos":{"h":9,"w":12,"x":0,"y":18},"id":4,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"avg
      by (namespace) (\n    rate(container_network_receive_bytes_total{cluster=\"$cluster\",namespace!=\"\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","legendFormat":"__auto"}],"title":"Average
      Rate of Bytes Received","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"},"unit":"binBps"}},"gridPos":{"h":9,"w":12,"x":12,"y":18},"id":5,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"avg
      by (namespace) (\n    rate(container_network_transmit_bytes_total{cluster=\"$cluster\",namespace!=\"\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","legendFormat":"__auto"}],"title":"Average
      Rate of Bytes Transmitted","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"},"unit":"binBps"}},"gridPos":{"h":9,"w":12,"x":0,"y":27},"id":6,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (namespace) (\n    rate(container_network_receive_bytes_total{cluster=\"$cluster\",namespace!=\"\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","legendFormat":"__auto"}],"title":"Receive
      Bandwidth","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"},"unit":"binBps"}},"gridPos":{"h":9,"w":12,"x":12,"y":27},"id":7,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (namespace) (\n    rate(container_network_transmit_bytes_total{cluster=\"$cluster\",namespace!=\"\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","legendFormat":"__auto"}],"title":"Transmit
      Bandwidth","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"},"unit":"pps"}},"gridPos":{"h":9,"w":12,"x":0,"y":36},"id":8,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (namespace) (\n    rate(container_network_receive_packets_total{cluster=\"$cluster\",namespace!=\"\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","legendFormat":"__auto"}],"title":"Rate
      of Received Packets","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"},"unit":"pps"}},"gridPos":{"h":9,"w":12,"x":12,"y":36},"id":9,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (namespace) (\n    rate(container_network_transmit_packets_total{cluster=\"$cluster\",namespace!=\"\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","legendFormat":"__auto"}],"title":"Rate
      of Transmitted Packets","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"},"unit":"pps"}},"gridPos":{"h":9,"w":12,"x":0,"y":45},"id":10,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (namespace) (\n    rate(container_network_receive_packets_dropped_total{cluster=\"$cluster\",namespace!=\"\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","legendFormat":"__auto"}],"title":"Rate
      of Received Packets Dropped","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"},"unit":"pps"}},"gridPos":{"h":9,"w":12,"x":12,"y":45},"id":11,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (namespace) (\n    rate(container_network_transmit_packets_dropped_total{cluster=\"$cluster\",namespace!=\"\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","legendFormat":"__auto"}],"title":"Rate
      of Transmitted Packets Dropped","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"},"unit":"percentunit"}},"gridPos":{"h":9,"w":12,"x":0,"y":54},"id":12,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (instance) (\n    rate(node_netstat_Tcp_RetransSegs{cluster=\"$cluster\"}[$__rate_interval])
      / rate(node_netstat_Tcp_OutSegs{cluster=\"$cluster\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","legendFormat":"__auto"}],"title":"Rate
      of TCP Retransmits out of all sent segments","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"},"unit":"percentunit"}},"gridPos":{"h":9,"w":12,"x":12,"y":54},"id":13,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (instance) (\n    rate(node_netstat_TcpExt_TCPSynRetrans{cluster=\"$cluster\"}[$__rate_interval])
      / rate(node_netstat_Tcp_RetransSegs{cluster=\"$cluster\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","legendFormat":"__auto"}],"title":"Rate
      of TCP SYN Retransmits out of all retransmits","type":"timeseries"}],"refresh":"10s","schemaVersion":39,"tags":["kubernetes-mixin"],"templating":{"list":[{"current":{"selected":true,"text":"default","value":"default"},"hide":0,"label":"Data
      source","name":"datasource","query":"prometheus","regex":"","type":"datasource"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":2,"label":"cluster","name":"cluster","query":"label_values(up{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\"}, cluster)","refresh":2,"sort":1,"type":"query","allValue":".*"}]},"time":{"from":"now-1h","to":"now"},"timezone":
      "utc","title":"Kubernetes / Networking / Cluster","uid":"ff635a025bcfea7bc3dd4f508990a3e9"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-cluster-total
    namespace: tomer
    resourceVersion: "2297437"
    uid: 704a883c-5398-40ce-850a-4c117f855c55
- apiVersion: v1
  data:
    controller-manager.json: '{"editable":true,"links":[{"asDropdown":true,"includeVars":true,"keepTime":true,"tags":["kubernetes-mixin"],"targetBlank":false,"title":"Kubernetes","type":"dashboards"}],"panels":[{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"unit":"none"}},"gridPos":{"h":7,"w":4,"x":0,"y":0},"id":1,"interval":"1m","options":{"colorMode":"none"},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(up{cluster=\"$cluster\",
      job=\"kube-controller-manager\"})","instant":true}],"title":"Up","type":"stat"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"ops"}},"gridPos":{"h":7,"w":20,"x":4,"y":0},"id":2,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(workqueue_adds_total{cluster=\"$cluster\",
      job=\"kube-controller-manager\", instance=~\"$instance\"}[$__rate_interval]))
      by (cluster, instance, name)","legendFormat":"{{cluster}} {{instance}} {{name}}"}],"title":"Work
      Queue Add Rate","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"short"}},"gridPos":{"h":7,"w":24,"x":0,"y":7},"id":3,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(workqueue_depth{cluster=\"$cluster\",
      job=\"kube-controller-manager\", instance=~\"$instance\"}[$__rate_interval]))
      by (cluster, instance, name)","legendFormat":"{{cluster}} {{instance}} {{name}}"}],"title":"Work
      Queue Depth","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"s"}},"gridPos":{"h":7,"w":24,"x":0,"y":14},"id":4,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"histogram_quantile(0.99,
      sum(rate(workqueue_queue_duration_seconds_bucket{cluster=\"$cluster\", job=\"kube-controller-manager\",
      instance=~\"$instance\"}[$__rate_interval])) by (cluster, instance, name, le))","legendFormat":"{{cluster}}
      {{instance}} {{name}}"}],"title":"Work Queue Latency","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"ops"}},"gridPos":{"h":7,"w":8,"x":0,"y":21},"id":5,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(rest_client_requests_total{job=\"kube-controller-manager\",
      instance=~\"$instance\",code=~\"2..\"}[$__rate_interval]))","legendFormat":"2xx"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(rest_client_requests_total{job=\"kube-controller-manager\",
      instance=~\"$instance\",code=~\"3..\"}[$__rate_interval]))","legendFormat":"3xx"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(rest_client_requests_total{job=\"kube-controller-manager\",
      instance=~\"$instance\",code=~\"4..\"}[$__rate_interval]))","legendFormat":"4xx"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(rest_client_requests_total{job=\"kube-controller-manager\",
      instance=~\"$instance\",code=~\"5..\"}[$__rate_interval]))","legendFormat":"5xx"}],"title":"Kube
      API Request Rate","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"s"}},"gridPos":{"h":7,"w":16,"x":8,"y":21},"id":6,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"histogram_quantile(0.99,
      sum(rate(rest_client_request_duration_seconds_bucket{cluster=\"$cluster\", job=\"kube-controller-manager\",
      instance=~\"$instance\", verb=\"POST\"}[$__rate_interval])) by (verb, le))","legendFormat":"{{verb}}"}],"title":"Post
      Request Latency 99th Quantile","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"s"}},"gridPos":{"h":7,"w":24,"x":0,"y":28},"id":7,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"histogram_quantile(0.99,
      sum(rate(rest_client_request_duration_seconds_bucket{cluster=\"$cluster\", job=\"kube-controller-manager\",
      instance=~\"$instance\", verb=\"GET\"}[$__rate_interval])) by (verb, le))","legendFormat":"{{verb}}"}],"title":"Get
      Request Latency 99th Quantile","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"bytes"}},"gridPos":{"h":7,"w":8,"x":0,"y":35},"id":8,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"process_resident_memory_bytes{cluster=\"$cluster\",
      job=\"kube-controller-manager\",instance=~\"$instance\"}","legendFormat":"{{instance}}"}],"title":"Memory","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"short"}},"gridPos":{"h":7,"w":8,"x":8,"y":35},"id":9,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"rate(process_cpu_seconds_total{cluster=\"$cluster\",
      job=\"kube-controller-manager\",instance=~\"$instance\"}[$__rate_interval])","legendFormat":"{{instance}}"}],"title":"CPU
      usage","type":"timeseries"},{"datasource":{"type":"datasource","uid":"-- Mixed
      --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"short"}},"gridPos":{"h":7,"w":8,"x":16,"y":35},"id":10,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"go_goroutines{cluster=\"$cluster\",
      job=\"kube-controller-manager\",instance=~\"$instance\"}","legendFormat":"{{instance}}"}],"title":"Goroutines","type":"timeseries"}],"refresh":"10s","schemaVersion":39,"tags":["kubernetes-mixin"],"templating":{"list":[{"current":{"selected":true,"text":"default","value":"default"},"hide":0,"label":"Data
      source","name":"datasource","query":"prometheus","regex":"","type":"datasource"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":2,"label":"cluster","name":"cluster","query":"label_values(up{job=\"kube-controller-manager\"},
      cluster)","refresh":2,"sort":1,"type":"query","allValue":".*"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":0,"includeAll":true,"label":"instance","name":"instance","query":"label_values(up{cluster=\"$cluster\",
      job=\"kube-controller-manager\"}, instance)","refresh":2,"sort":1,"type":"query"}]},"time":{"from":"now-1h","to":"now"},"timezone":
      "utc","title":"Kubernetes / Controller Manager","uid":"72e0e05bef5099e5f049b05fdc429ed4"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-controller-manager
    namespace: tomer
    resourceVersion: "2297427"
    uid: 1f6fe5d4-4b26-4069-8065-e6fe2fb3fa4c
- apiVersion: v1
  data:
    etcd.json: '{"description":"etcd sample Grafana dashboard with Prometheus","panels":[{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"gridPos":{"h":7,"w":6,"x":0,"y":0},"id":1,"interval":"1m","options":{"colorMode":"none","graphMode":"none","reduceOptions":{"calcs":["lastNotNull"]}},"pluginVersion":"v10.0.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"sum(etcd_server_has_leader{job=~\".*etcd.*\",
      job=\"$cluster\"})","legendFormat":"{{cluster}} - {{namespace}}\n"}],"title":"Up","type":"stat"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":0,"lineWidth":2,"showPoints":"never"},"unit":"ops"}},"gridPos":{"h":7,"w":10,"x":6,"y":0},"id":2,"interval":"1m","pluginVersion":"v10.0.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"sum(rate(grpc_server_started_total{job=~\".*etcd.*\",
      job=\"$cluster\",grpc_type=\"unary\"}[$__rate_interval]))","legendFormat":"RPC
      rate"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"sum(rate(grpc_server_handled_total{job=~\".*etcd.*\",
      job=\"$cluster\",grpc_type=\"unary\",grpc_code=~\"Unknown|FailedPrecondition|ResourceExhausted|Internal|Unavailable|DataLoss|DeadlineExceeded\"}[$__rate_interval]))","legendFormat":"RPC
      failed rate"}],"title":"RPC rate","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":0,"lineWidth":2,"showPoints":"never"}}},"gridPos":{"h":7,"w":8,"x":16,"y":0},"id":3,"interval":"1m","pluginVersion":"v10.0.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"sum(grpc_server_started_total{job=~\".*etcd.*\",job=\"$cluster\",grpc_service=\"etcdserverpb.Watch\",grpc_type=\"bidi_stream\"})
      - sum(grpc_server_handled_total{job=\"$cluster\",grpc_service=\"etcdserverpb.Watch\",grpc_type=\"bidi_stream\"})","legendFormat":"Watch
      streams"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"sum(grpc_server_started_total{job=~\".*etcd.*\",job=\"$cluster\",grpc_service=\"etcdserverpb.Lease\",grpc_type=\"bidi_stream\"})
      - sum(grpc_server_handled_total{job=\"$cluster\",grpc_service=\"etcdserverpb.Lease\",grpc_type=\"bidi_stream\"})","legendFormat":"Lease
      streams"}],"title":"Active streams","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":0,"lineWidth":2,"showPoints":"never"},"unit":"bytes"}},"gridPos":{"h":7,"w":8,"x":0,"y":25},"id":4,"interval":"1m","pluginVersion":"v10.0.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"etcd_mvcc_db_total_size_in_bytes{job=~\".*etcd.*\",
      job=\"$cluster\"}","legendFormat":"{{instance}} DB size"}],"title":"DB size","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":0,"lineWidth":2,"showPoints":"never"},"unit":"s"}},"gridPos":{"h":7,"w":8,"x":8,"y":25},"id":5,"interval":"1m","pluginVersion":"v10.0.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"histogram_quantile(0.99,
      sum(rate(etcd_disk_wal_fsync_duration_seconds_bucket{job=~\".*etcd.*\", job=\"$cluster\"}[$__rate_interval]))
      by (instance, le))","legendFormat":"{{instance}} WAL fsync"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"histogram_quantile(0.99,
      sum(rate(etcd_disk_backend_commit_duration_seconds_bucket{job=~\".*etcd.*\",
      job=\"$cluster\"}[$__rate_interval])) by (instance, le))","legendFormat":"{{instance}}
      DB fsync"}],"title":"Disk sync duration","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":0,"lineWidth":2,"showPoints":"never"},"unit":"bytes"}},"gridPos":{"h":7,"w":8,"x":16,"y":25},"id":6,"interval":"1m","pluginVersion":"v10.0.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"process_resident_memory_bytes{job=~\".*etcd.*\",
      job=\"$cluster\"}","legendFormat":"{{instance}} resident memory"}],"title":"Memory","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":0,"lineWidth":2,"showPoints":"never"},"unit":"Bps"}},"gridPos":{"h":7,"w":6,"x":0,"y":50},"id":7,"interval":"1m","pluginVersion":"v10.0.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"rate(etcd_network_client_grpc_received_bytes_total{job=~\".*etcd.*\",
      job=\"$cluster\"}[$__rate_interval])","legendFormat":"{{instance}} client traffic
      in"}],"title":"Client traffic in","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":0,"lineWidth":2,"showPoints":"never"},"unit":"Bps"}},"gridPos":{"h":7,"w":6,"x":6,"y":50},"id":8,"interval":"1m","pluginVersion":"v10.0.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"rate(etcd_network_client_grpc_sent_bytes_total{job=~\".*etcd.*\",
      job=\"$cluster\"}[$__rate_interval])","legendFormat":"{{instance}} client traffic
      out"}],"title":"Client traffic out","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":0,"lineWidth":2,"showPoints":"never"},"unit":"Bps"}},"gridPos":{"h":7,"w":6,"x":12,"y":50},"id":9,"interval":"1m","pluginVersion":"v10.0.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"sum(rate(etcd_network_peer_received_bytes_total{job=~\".*etcd.*\",
      job=\"$cluster\"}[$__rate_interval])) by (instance)","legendFormat":"{{instance}}
      peer traffic in"}],"title":"Peer traffic in","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":0,"lineWidth":2,"showPoints":"never"},"unit":"Bps"}},"gridPos":{"h":7,"w":6,"x":18,"y":50},"id":10,"interval":"1m","pluginVersion":"v10.0.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"sum(rate(etcd_network_peer_sent_bytes_total{job=~\".*etcd.*\",
      job=\"$cluster\"}[$__rate_interval])) by (instance)","legendFormat":"{{instance}}
      peer traffic out"}],"title":"Peer traffic out","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":0,"lineWidth":2,"showPoints":"never"}}},"gridPos":{"h":7,"w":8,"x":0,"y":75},"id":11,"interval":"1m","pluginVersion":"v10.0.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"changes(etcd_server_leader_changes_seen_total{job=~\".*etcd.*\",
      job=\"$cluster\"}[1d])","legendFormat":"{{instance}} total leader elections
      per day"}],"title":"Raft proposals","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":0,"lineWidth":2,"showPoints":"never"}}},"gridPos":{"h":7,"w":8,"x":8,"y":75},"id":12,"interval":"1m","pluginVersion":"v10.0.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"changes(etcd_server_leader_changes_seen_total{job=~\".*etcd.*\",
      job=\"$cluster\"}[1d])","legendFormat":"{{instance}} total leader elections
      per day"}],"title":"Total leader elections per day","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":0,"lineWidth":2,"showPoints":"never"},"unit":"s"}},"gridPos":{"h":7,"w":8,"x":16,"y":75},"id":13,"interval":"1m","pluginVersion":"v10.0.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"histogram_quantile(0.99,
      sum by (instance, le) (rate(etcd_network_peer_round_trip_time_seconds_bucket{job=~\".*etcd.*\",
      job=\"$cluster\"}[$__rate_interval])))","legendFormat":"{{instance}} peer round
      trip time"}],"title":"Peer round trip time","type":"timeseries"}],"refresh":"10s","schemaVersion":36,"tags":["etcd-mixin"],"templating":{"list":[{"label":"Data
      Source","name":"datasource","query":"prometheus","type":"datasource"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"label":"cluster","name":"cluster","query":"label_values(etcd_server_has_leader{job=~\".*etcd.*\"},
      job)","refresh":2,"type":"query","allValue":".*","hide":2}]},"time":{"from":"now-15m","to":"now"},"timezone":
      "utc","title":"etcd","uid":"c2f4e12cdf69feb95caa41a5a1b423d9"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-etcd
    namespace: tomer
    resourceVersion: "2297426"
    uid: 7e6e599b-135f-4ea6-9dd1-da8665562bd3
- apiVersion: v1
  data:
    datasource.yaml: |-
      apiVersion: 1
      datasources:
      - name: "Prometheus"
        type: prometheus
        uid: prometheus
        url: http://tomer-prom-kube-prometheus-prometheus.tomer:9090/
        access: proxy
        isDefault: true
        jsonData:
          httpMethod: POST
          timeInterval: 30s
      - name: "Alertmanager"
        type: alertmanager
        uid: alertmanager
        url: http://tomer-prom-kube-prometheus-alertmanager.tomer:9093/
        access: proxy
        jsonData:
          handleGrafanaManagedAlerts: false
          implementation: prometheus
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_datasource: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-grafana-datasource
    namespace: tomer
    resourceVersion: "2297422"
    uid: bcea3cd3-5743-437c-a99d-39fdc4e75ce3
- apiVersion: v1
  data:
    grafana-overview.json: '{"annotations":{"list":[{"builtIn":1,"datasource":"--
      Grafana --","enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations
      & Alerts","target":{"limit":100,"matchAny":false,"tags":[],"type":"dashboard"},"type":"dashboard"}]},"editable":true,"gnetId":null,"graphTooltip":0,"id":3085,"iteration":1631554945276,"links":[],"panels":[{"datasource":"$datasource","fieldConfig":{"defaults":{"mappings":[],"noValue":"0","thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":5,"w":6,"x":0,"y":0},"id":6,"options":{"colorMode":"value","graphMode":"area","justifyMode":"auto","orientation":"auto","reduceOptions":{"calcs":["mean"],"fields":"","values":false},"text":{},"textMode":"auto"},"pluginVersion":"8.1.3","targets":[{"expr":"grafana_alerting_result_total{job=~\"$job\",
      instance=~\"$instance\", state=\"alerting\"}","instant":true,"interval":"","legendFormat":"","refId":"A"}],"timeFrom":null,"timeShift":null,"title":"Firing
      Alerts","type":"stat"},{"datasource":"$datasource","fieldConfig":{"defaults":{"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":5,"w":6,"x":6,"y":0},"id":8,"options":{"colorMode":"value","graphMode":"area","justifyMode":"auto","orientation":"auto","reduceOptions":{"calcs":["mean"],"fields":"","values":false},"text":{},"textMode":"auto"},"pluginVersion":"8.1.3","targets":[{"expr":"sum(grafana_stat_totals_dashboard{job=~\"$job\",
      instance=~\"$instance\"})","interval":"","legendFormat":"","refId":"A"}],"timeFrom":null,"timeShift":null,"title":"Dashboards","type":"stat"},{"datasource":"$datasource","fieldConfig":{"defaults":{"custom":{"align":null,"displayMode":"auto"},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":5,"w":12,"x":12,"y":0},"id":10,"options":{"showHeader":true},"pluginVersion":"8.1.3","targets":[{"expr":"grafana_build_info{job=~\"$job\",
      instance=~\"$instance\"}","instant":true,"interval":"","legendFormat":"","refId":"A"}],"timeFrom":null,"timeShift":null,"title":"Build
      Info","transformations":[{"id":"labelsToFields","options":{}},{"id":"organize","options":{"excludeByName":{"Time":true,"Value":true,"branch":true,"container":true,"goversion":true,"namespace":true,"pod":true,"revision":true},"indexByName":{"Time":7,"Value":11,"branch":4,"container":8,"edition":2,"goversion":6,"instance":1,"job":0,"namespace":9,"pod":10,"revision":5,"version":3},"renameByName":{}}}],"type":"table"},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fieldConfig":{"defaults":{"links":[]},"overrides":[]},"fill":1,"fillGradient":0,"gridPos":{"h":8,"w":12,"x":0,"y":5},"hiddenSeries":false,"id":2,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"alertThreshold":true},"percentage":false,"pluginVersion":"8.1.3","pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":true,"steppedLine":false,"targets":[{"expr":"sum
      by (status_code) (irate(grafana_http_request_duration_seconds_count{job=~\"$job\",
      instance=~\"$instance\"}[1m])) ","interval":"","legendFormat":"{{status_code}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"RPS","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"$$hashKey":"object:157","format":"reqps","label":null,"logBase":1,"max":null,"min":null,"show":true},{"$$hashKey":"object:158","format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fieldConfig":{"defaults":{"links":[]},"overrides":[]},"fill":1,"fillGradient":0,"gridPos":{"h":8,"w":12,"x":12,"y":5},"hiddenSeries":false,"id":4,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"alertThreshold":true},"percentage":false,"pluginVersion":"8.1.3","pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"exemplar":true,"expr":"histogram_quantile(0.99,
      sum(irate(grafana_http_request_duration_seconds_bucket{instance=~\"$instance\",
      job=~\"$job\"}[$__rate_interval])) by (le)) * 1","interval":"","legendFormat":"99th
      Percentile","refId":"A"},{"exemplar":true,"expr":"histogram_quantile(0.50, sum(irate(grafana_http_request_duration_seconds_bucket{instance=~\"$instance\",
      job=~\"$job\"}[$__rate_interval])) by (le)) * 1","interval":"","legendFormat":"50th
      Percentile","refId":"B"},{"exemplar":true,"expr":"sum(irate(grafana_http_request_duration_seconds_sum{instance=~\"$instance\",
      job=~\"$job\"}[$__rate_interval])) * 1 / sum(irate(grafana_http_request_duration_seconds_count{instance=~\"$instance\",
      job=~\"$job\"}[$__rate_interval]))","interval":"","legendFormat":"Average","refId":"C"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Request
      Latency","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"$$hashKey":"object:210","format":"ms","label":null,"logBase":1,"max":null,"min":null,"show":true},{"$$hashKey":"object:211","format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}}],"schemaVersion":30,"style":"dark","tags":[],"templating":{"list":[{"current":{"selected":true,"text":"dev-cortex","value":"dev-cortex"},"description":null,"error":null,"hide":0,"includeAll":false,"label":null,"multi":false,"name":"datasource","options":[],"query":"prometheus","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"allValue":".*","current":{"selected":false,"text":["default/grafana"],"value":["default/grafana"]},"datasource":"$datasource","definition":"label_values(grafana_build_info,
      job)","description":null,"error":null,"hide":0,"includeAll":true,"label":null,"multi":true,"name":"job","options":[],"query":{"query":"label_values(grafana_build_info,
      job)","refId":"Billing Admin-job-Variable-Query"},"refresh":1,"regex":"","skipUrlSync":false,"sort":0,"tagValuesQuery":"","tagsQuery":"","type":"query","useTags":false},{"allValue":".*","current":{"selected":false,"text":"All","value":"$__all"},"datasource":"$datasource","definition":"label_values(grafana_build_info,
      instance)","description":null,"error":null,"hide":0,"includeAll":true,"label":null,"multi":true,"name":"instance","options":[],"query":{"query":"label_values(grafana_build_info,
      instance)","refId":"Billing Admin-instance-Variable-Query"},"refresh":1,"regex":"","skipUrlSync":false,"sort":0,"tagValuesQuery":"","tagsQuery":"","type":"query","useTags":false}]},"time":{"from":"now-6h","to":"now"},"timepicker":{"refresh_intervals":["10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":
      "utc","title":"Grafana Overview","uid":"6be0s85Mk","version":2}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-grafana-overview
    namespace: tomer
    resourceVersion: "2297436"
    uid: 7dbfeb8c-d3c1-4074-a5b5-fa68e6a27dab
- apiVersion: v1
  data:
    k8s-coredns.json: '{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"datasource","uid":"grafana"},"enable":true,"hide":true,"iconColor":"rgba(0,
      211, 255, 1)","name":"Annotations & Alerts","type":"dashboard"}]},"description":"A
      dashboard for the CoreDNS DNS server with updated metrics for version 1.7.0+.  Based
      on the CoreDNS dashboard by buhay.","editable":true,"fiscalYearStartMonth":0,"gnetId":12539,"graphTooltip":0,"id":7,"links":[{"icon":"external
      link","tags":[],"targetBlank":true,"title":"CoreDNS.io","type":"link","url":"https://coredns.io"}],"liveNow":false,"panels":[{"datasource":{"uid":"$datasource"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"line","fillOpacity":10,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":2,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"never","spanNulls":true,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"links":[],"mappings":[],"min":0,"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"pps","unitScale":true},"overrides":[]},"gridPos":{"h":7,"w":8,"x":0,"y":0},"id":2,"links":[],"options":{"legend":{"calcs":[],"displayMode":"list","placement":"bottom","showLegend":true},"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"10.3.3","targets":[{"datasource":{"uid":"$datasource"},"expr":"sum(rate(coredns_dns_request_count_total{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\"}[5m]))
      by (proto) or\nsum(rate(coredns_dns_requests_total{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\"}[5m]))
      by (proto)","format":"time_series","interval":"","intervalFactor":2,"legendFormat":"{{
      proto }}","refId":"A","step":60}],"title":"Requests (total)","type":"timeseries"},{"datasource":{"uid":"$datasource"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"line","fillOpacity":10,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":2,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"never","spanNulls":true,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"links":[],"mappings":[],"min":0,"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"pps","unitScale":true},"overrides":[]},"gridPos":{"h":7,"w":8,"x":8,"y":0},"id":4,"links":[],"options":{"legend":{"calcs":[],"displayMode":"list","placement":"bottom","showLegend":true},"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"10.3.3","targets":[{"datasource":{"uid":"$datasource"},"expr":"sum(rate(coredns_dns_request_type_count_total{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\"}[5m]))
      by (type) or \nsum(rate(coredns_dns_requests_total{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\"}[5m]))
      by (type)","interval":"","intervalFactor":2,"legendFormat":"{{ type }}","refId":"A","step":60}],"title":"Requests
      (by qtype)","type":"timeseries"},{"datasource":{"uid":"$datasource"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"line","fillOpacity":10,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":2,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"never","spanNulls":true,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"links":[],"mappings":[],"min":0,"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"pps","unitScale":true},"overrides":[]},"gridPos":{"h":7,"w":8,"x":16,"y":0},"id":6,"links":[],"options":{"legend":{"calcs":[],"displayMode":"list","placement":"bottom","showLegend":true},"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"10.3.3","targets":[{"datasource":{"uid":"$datasource"},"expr":"sum(rate(coredns_dns_request_count_total{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\"}[5m]))
      by (zone) or\nsum(rate(coredns_dns_requests_total{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\"}[5m]))
      by (zone)","interval":"","intervalFactor":2,"legendFormat":"{{ zone }}","refId":"A","step":60}],"title":"Requests
      (by zone)","type":"timeseries"},{"datasource":{"uid":"$datasource"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"line","fillOpacity":10,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":2,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"never","spanNulls":true,"stacking":{"group":"A","mode":"none"},"thresholdsStyle":{"mode":"off"}},"links":[],"mappings":[],"min":0,"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"pps","unitScale":true},"overrides":[]},"gridPos":{"h":7,"w":12,"x":0,"y":7},"id":8,"links":[],"options":{"legend":{"calcs":[],"displayMode":"list","placement":"bottom","showLegend":true},"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"10.3.3","targets":[{"datasource":{"uid":"$datasource"},"expr":"sum(rate(coredns_dns_request_do_count_total{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\"}[5m]))
      or\nsum(rate(coredns_dns_do_requests_total{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\"}[5m]))","interval":"","intervalFactor":2,"legendFormat":"DO","refId":"A","step":40},{"datasource":{"uid":"$datasource"},"expr":"sum(rate(coredns_dns_request_count_total{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\"}[5m]))
      or\nsum(rate(coredns_dns_requests_total{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\"}[5m]))","interval":"","intervalFactor":2,"legendFormat":"total","refId":"B","step":40}],"title":"Requests
      (DO bit)","type":"timeseries"},{"datasource":{"uid":"$datasource"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"line","fillOpacity":10,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":2,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"never","spanNulls":true,"stacking":{"group":"A","mode":"none"},"thresholdsStyle":{"mode":"off"}},"links":[],"mappings":[],"min":0,"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"bytes","unitScale":true},"overrides":[{"matcher":{"id":"byName","options":"tcp:90"},"properties":[{"id":"unit","value":"short"}]},{"matcher":{"id":"byName","options":"tcp:99
      "},"properties":[{"id":"unit","value":"short"}]},{"matcher":{"id":"byName","options":"tcp:50"},"properties":[{"id":"unit","value":"short"}]}]},"gridPos":{"h":7,"w":6,"x":12,"y":7},"id":10,"links":[],"options":{"legend":{"calcs":[],"displayMode":"list","placement":"bottom","showLegend":true},"tooltip":{"mode":"multi","sort":"none"}},"pluginVersion":"10.3.3","targets":[{"datasource":{"uid":"$datasource"},"expr":"histogram_quantile(0.99,
      sum(rate(coredns_dns_request_size_bytes_bucket{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\",proto=\"udp\"}[5m]))
      by (le,proto))","interval":"","intervalFactor":2,"legendFormat":"{{ proto }}:99
      ","refId":"A","step":60},{"datasource":{"uid":"$datasource"},"expr":"histogram_quantile(0.90,
      sum(rate(coredns_dns_request_size_bytes_bucket{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\",proto=\"udp\"}[5m]))
      by (le,proto))","intervalFactor":2,"legendFormat":"{{ proto }}:90","refId":"B","step":60},{"datasource":{"uid":"$datasource"},"expr":"histogram_quantile(0.50,
      sum(rate(coredns_dns_request_size_bytes_bucket{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\",proto=\"udp\"}[5m]))
      by (le,proto))","intervalFactor":2,"legendFormat":"{{ proto }}:50","refId":"C","step":60}],"title":"Requests
      (size, udp)","type":"timeseries"},{"datasource":{"uid":"$datasource"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"line","fillOpacity":10,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":2,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"never","spanNulls":true,"stacking":{"group":"A","mode":"none"},"thresholdsStyle":{"mode":"off"}},"links":[],"mappings":[],"min":0,"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"bytes","unitScale":true},"overrides":[]},"gridPos":{"h":7,"w":6,"x":18,"y":7},"id":12,"links":[],"options":{"legend":{"calcs":[],"displayMode":"list","placement":"bottom","showLegend":true},"tooltip":{"mode":"multi","sort":"none"}},"pluginVersion":"10.3.3","targets":[{"datasource":{"uid":"$datasource"},"expr":"histogram_quantile(0.99,
      sum(rate(coredns_dns_request_size_bytes_bucket{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\",proto=\"tcp\"}[5m]))
      by (le,proto))","format":"time_series","interval":"","intervalFactor":2,"legendFormat":"{{
      proto }}:99 ","refId":"A","step":60},{"datasource":{"uid":"$datasource"},"expr":"histogram_quantile(0.90,
      sum(rate(coredns_dns_request_size_bytes_bucket{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\",proto=\"tcp\"}[5m]))
      by (le,proto))","format":"time_series","interval":"","intervalFactor":2,"legendFormat":"{{
      proto }}:90","refId":"B","step":60},{"datasource":{"uid":"$datasource"},"expr":"histogram_quantile(0.50,
      sum(rate(coredns_dns_request_size_bytes_bucket{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\",proto=\"tcp\"}[5m]))
      by (le,proto))","format":"time_series","interval":"","intervalFactor":2,"legendFormat":"{{
      proto }}:50","refId":"C","step":60}],"title":"Requests (size,tcp)","type":"timeseries"},{"datasource":{"uid":"$datasource"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"line","fillOpacity":10,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":2,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"never","spanNulls":true,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"links":[],"mappings":[],"min":0,"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"pps","unitScale":true},"overrides":[]},"gridPos":{"h":7,"w":12,"x":0,"y":14},"id":14,"links":[],"options":{"legend":{"calcs":[],"displayMode":"list","placement":"bottom","showLegend":true},"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"10.3.3","targets":[{"datasource":{"uid":"$datasource"},"expr":"sum(rate(coredns_dns_response_rcode_count_total{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\"}[5m]))
      by (rcode) or\nsum(rate(coredns_dns_responses_total{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\"}[5m]))
      by (rcode)","interval":"","intervalFactor":2,"legendFormat":"{{ rcode }}","refId":"A","step":40}],"title":"Responses
      (by rcode)","type":"timeseries"},{"datasource":{"uid":"$datasource"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"line","fillOpacity":10,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":2,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"never","spanNulls":true,"stacking":{"group":"A","mode":"none"},"thresholdsStyle":{"mode":"off"}},"links":[],"mappings":[],"min":0,"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"s","unitScale":true},"overrides":[]},"gridPos":{"h":7,"w":12,"x":12,"y":14},"id":32,"links":[],"options":{"legend":{"calcs":[],"displayMode":"list","placement":"bottom","showLegend":true},"tooltip":{"mode":"multi","sort":"none"}},"pluginVersion":"10.3.3","targets":[{"datasource":{"uid":"$datasource"},"expr":"histogram_quantile(0.99,
      sum(rate(coredns_dns_request_duration_seconds_bucket{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\"}[5m]))
      by (le, job))","format":"time_series","intervalFactor":2,"legendFormat":"99%","refId":"A","step":40},{"datasource":{"uid":"$datasource"},"expr":"histogram_quantile(0.90,
      sum(rate(coredns_dns_request_duration_seconds_bucket{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\"}[5m]))
      by (le))","format":"time_series","intervalFactor":2,"legendFormat":"90%","refId":"B","step":40},{"datasource":{"uid":"$datasource"},"expr":"histogram_quantile(0.50,
      sum(rate(coredns_dns_request_duration_seconds_bucket{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\"}[5m]))
      by (le))","format":"time_series","intervalFactor":2,"legendFormat":"50%","refId":"C","step":40}],"title":"Responses
      (duration)","type":"timeseries"},{"datasource":{"uid":"$datasource"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"line","fillOpacity":10,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":2,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"never","spanNulls":true,"stacking":{"group":"A","mode":"none"},"thresholdsStyle":{"mode":"off"}},"links":[],"mappings":[],"min":0,"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"bytes","unitScale":true},"overrides":[{"matcher":{"id":"byName","options":"tcp:50%"},"properties":[{"id":"unit","value":"short"}]},{"matcher":{"id":"byName","options":"tcp:90%"},"properties":[{"id":"unit","value":"short"}]},{"matcher":{"id":"byName","options":"tcp:99%"},"properties":[{"id":"unit","value":"short"}]}]},"gridPos":{"h":7,"w":12,"x":0,"y":21},"id":18,"links":[],"options":{"legend":{"calcs":[],"displayMode":"list","placement":"bottom","showLegend":true},"tooltip":{"mode":"multi","sort":"none"}},"pluginVersion":"10.3.3","targets":[{"datasource":{"uid":"$datasource"},"expr":"histogram_quantile(0.99,
      sum(rate(coredns_dns_response_size_bytes_bucket{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\",proto=\"udp\"}[5m]))
      by (le,proto)) ","interval":"","intervalFactor":2,"legendFormat":"{{ proto }}:99%","refId":"A","step":40},{"datasource":{"uid":"$datasource"},"expr":"histogram_quantile(0.90,
      sum(rate(coredns_dns_response_size_bytes_bucket{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\",proto=\"udp\"}[5m]))
      by (le,proto)) ","interval":"","intervalFactor":2,"legendFormat":"{{ proto }}:90%","refId":"B","step":40},{"datasource":{"uid":"$datasource"},"expr":"histogram_quantile(0.50,
      sum(rate(coredns_dns_response_size_bytes_bucket{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\",proto=\"udp\"}[5m]))
      by (le,proto)) ","hide":false,"intervalFactor":2,"legendFormat":"{{ proto }}:50%","metric":"","refId":"C","step":40}],"title":"Responses
      (size, udp)","type":"timeseries"},{"datasource":{"uid":"$datasource"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"line","fillOpacity":10,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":2,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"never","spanNulls":true,"stacking":{"group":"A","mode":"none"},"thresholdsStyle":{"mode":"off"}},"links":[],"mappings":[],"min":0,"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"bytes","unitScale":true},"overrides":[]},"gridPos":{"h":7,"w":12,"x":12,"y":21},"id":20,"links":[],"options":{"legend":{"calcs":[],"displayMode":"list","placement":"bottom","showLegend":true},"tooltip":{"mode":"multi","sort":"none"}},"pluginVersion":"10.3.3","targets":[{"datasource":{"uid":"$datasource"},"expr":"histogram_quantile(0.99,
      sum(rate(coredns_dns_response_size_bytes_bucket{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\",proto=\"tcp\"}[5m]))
      by (le,proto)) ","format":"time_series","intervalFactor":2,"legendFormat":"{{
      proto }}:99%","refId":"A","step":40},{"datasource":{"uid":"$datasource"},"expr":"histogram_quantile(0.90,
      sum(rate(coredns_dns_response_size_bytes_bucket{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\",proto=\"tcp\"}[5m]))
      by (le,proto)) ","format":"time_series","intervalFactor":2,"legendFormat":"{{
      proto }}:90%","refId":"B","step":40},{"datasource":{"uid":"$datasource"},"expr":"histogram_quantile(0.50,
      sum(rate(coredns_dns_response_size_bytes_bucket{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\",proto=\"tcp\"}[5m]))
      by (le, proto)) ","format":"time_series","intervalFactor":2,"legendFormat":"{{
      proto }}:50%","metric":"","refId":"C","step":40}],"title":"Responses (size,
      tcp)","type":"timeseries"},{"datasource":{"uid":"$datasource"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"line","fillOpacity":10,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":2,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"never","spanNulls":true,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"links":[],"mappings":[],"min":0,"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"decbytes","unitScale":true},"overrides":[]},"gridPos":{"h":7,"w":12,"x":0,"y":28},"id":22,"links":[],"options":{"legend":{"calcs":[],"displayMode":"list","placement":"bottom","showLegend":true},"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"10.3.3","targets":[{"datasource":{"uid":"$datasource"},"expr":"sum(coredns_cache_size{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\"})
      by (type) or\nsum(coredns_cache_entries{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\"})
      by (type)","interval":"","intervalFactor":2,"legendFormat":"{{ type }}","refId":"A","step":40}],"title":"Cache
      (size)","type":"timeseries"},{"datasource":{"uid":"$datasource"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"line","fillOpacity":10,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":2,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"never","spanNulls":true,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"links":[],"mappings":[],"min":0,"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"pps","unitScale":true},"overrides":[]},"gridPos":{"h":7,"w":12,"x":12,"y":28},"id":24,"links":[],"options":{"legend":{"calcs":[],"displayMode":"list","placement":"bottom","showLegend":true},"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"10.3.3","targets":[{"datasource":{"uid":"$datasource"},"expr":"sum(rate(coredns_cache_hits_total{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\"}[5m]))
      by (type)","hide":false,"intervalFactor":2,"legendFormat":"hits:{{ type }}","refId":"A","step":40},{"datasource":{"uid":"$datasource"},"expr":"sum(rate(coredns_cache_misses_total{job=~\"$job\",cluster=~\"$cluster\",instance=~\"$instance\"}[5m]))
      by (type)","hide":false,"intervalFactor":2,"legendFormat":"misses","refId":"B","step":40}],"title":"Cache
      (hitrate)","type":"timeseries"}],"refresh":"10s","schemaVersion":39,"tags":["dns","coredns"],"templating":{"list":[{"current":{},"hide":0,"includeAll":false,"multi":false,"name":"datasource","options":[],"query":"prometheus","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"allValue":".*","current":{"selected":false,"text":"All","value":"$__all"},"datasource":{"type":"prometheus","uid":"$datasource"},"definition":"label_values(coredns_dns_requests_total,
      cluster)","hide":2,"includeAll":true,"label":"Cluster","multi":false,"name":"cluster","options":[],"query":"label_values(coredns_dns_requests_total,
      cluster)","refresh":2,"regex":"","skipUrlSync":false,"sort":1,"tagValuesQuery":"","tagsQuery":"","type":"query","useTags":false},{"allValue":".*","current":{"selected":false,"text":"All","value":"$__all"},"datasource":{"type":"prometheus","uid":"${datasource}"},"definition":"label_values(coredns_dns_requests_total{cluster=~\"$cluster\"},job)","hide":0,"includeAll":true,"label":"Job","multi":false,"name":"job","options":[],"query":{"qryType":1,"query":"label_values(coredns_dns_requests_total{cluster=~\"$cluster\"},job)","refId":"PrometheusVariableQueryEditor-VariableQuery"},"refresh":2,"regex":"","skipUrlSync":false,"sort":1,"type":"query"},{"allValue":".*","current":{"selected":false,"text":"All","value":"$__all"},"datasource":{"type":"prometheus","uid":"$datasource"},"definition":"label_values(coredns_dns_requests_total{job=~\"$job\",cluster=~\"$cluster\"},
      instance)","hide":0,"includeAll":true,"label":"Instance","multi":false,"name":"instance","options":[],"query":"label_values(coredns_dns_requests_total{job=~\"$job\",cluster=~\"$cluster\"},
      instance)","refresh":2,"regex":"","skipUrlSync":false,"sort":3,"tagValuesQuery":"","tagsQuery":"","type":"query","useTags":false}]},"time":{"from":"now-3h","to":"now"},"timepicker":{"refresh_intervals":["10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":
      "utc","title":"CoreDNS","uid":"vkQ0UHxik","version":3,"weekStart":""}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-k8s-coredns
    namespace: tomer
    resourceVersion: "2297432"
    uid: deb13ee5-2bee-4e49-9d6e-328b42e241b7
- apiVersion: v1
  data:
    k8s-resources-cluster.json: '{"editable":true,"links":[{"asDropdown":true,"includeVars":true,"keepTime":true,"tags":["kubernetes-mixin"],"targetBlank":false,"title":"Kubernetes","type":"dashboards"}],"panels":[{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"unit":"percentunit"}},"gridPos":{"h":3,"w":4,"x":0,"y":0},"id":1,"interval":"1m","options":{"colorMode":"none"},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"cluster:node_cpu:ratio_rate5m{cluster=\"$cluster\"}","instant":true}],"title":"CPU
      Utilisation","type":"stat"},{"datasource":{"type":"datasource","uid":"-- Mixed
      --"},"fieldConfig":{"defaults":{"unit":"percentunit"}},"gridPos":{"h":3,"w":4,"x":4,"y":0},"id":2,"interval":"1m","options":{"colorMode":"none"},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(namespace_cpu:kube_pod_container_resource_requests:sum{cluster=\"$cluster\"})
      / sum(kube_node_status_allocatable{job=\"kube-state-metrics\",resource=\"cpu\",cluster=\"$cluster\"})","instant":true}],"title":"CPU
      Requests Commitment","type":"stat"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"unit":"percentunit"}},"gridPos":{"h":3,"w":4,"x":8,"y":0},"id":3,"interval":"1m","options":{"colorMode":"none"},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(namespace_cpu:kube_pod_container_resource_limits:sum{cluster=\"$cluster\"})
      / sum(kube_node_status_allocatable{job=\"kube-state-metrics\",resource=\"cpu\",cluster=\"$cluster\"})","instant":true}],"title":"CPU
      Limits Commitment","type":"stat"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"unit":"percentunit"}},"gridPos":{"h":3,"w":4,"x":12,"y":0},"id":4,"interval":"1m","options":{"colorMode":"none"},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"1
      - sum(:node_memory_MemAvailable_bytes:sum{cluster=\"$cluster\"}) / sum(node_memory_MemTotal_bytes{job=\"node-exporter\",cluster=\"$cluster\"})","instant":true}],"title":"Memory
      Utilisation","type":"stat"},{"datasource":{"type":"datasource","uid":"-- Mixed
      --"},"fieldConfig":{"defaults":{"unit":"percentunit"}},"gridPos":{"h":3,"w":4,"x":16,"y":0},"id":5,"interval":"1m","options":{"colorMode":"none"},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(namespace_memory:kube_pod_container_resource_requests:sum{cluster=\"$cluster\"})
      / sum(kube_node_status_allocatable{job=\"kube-state-metrics\",resource=\"memory\",cluster=\"$cluster\"})","instant":true}],"title":"Memory
      Requests Commitment","type":"stat"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"unit":"percentunit"}},"gridPos":{"h":3,"w":4,"x":20,"y":0},"id":6,"interval":"1m","options":{"colorMode":"none"},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(namespace_memory:kube_pod_container_resource_limits:sum{cluster=\"$cluster\"})
      / sum(kube_node_status_allocatable{job=\"kube-state-metrics\",resource=\"memory\",cluster=\"$cluster\"})","instant":true}],"title":"Memory
      Limits Commitment","type":"stat"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true}}},"gridPos":{"h":6,"w":24,"x":0,"y":6},"id":7,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\"})
      by (namespace)","legendFormat":"__auto"}],"title":"CPU Usage","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"overrides":[{"matcher":{"id":"byRegexp","options":"/%/"},"properties":[{"id":"unit","value":"percentunit"}]},{"matcher":{"id":"byName","options":"Namespace"},"properties":[{"id":"links","value":[{"title":"Drill
      down to pods","url":"/d/85a562078cdf77779eaa1add43ccec1e/k8s-resources-namespace?${datasource:queryparam}&var-cluster=$cluster&var-namespace=${__data.fields.Namespace}"}]}]}]},"gridPos":{"h":6,"w":24,"x":0,"y":12},"id":8,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(kube_pod_owner{job=\"kube-state-metrics\",
      cluster=\"$cluster\"}) by (namespace)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"count(avg(namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\"})
      by (workload, namespace)) by (namespace)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\"})
      by (namespace)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(namespace_cpu:kube_pod_container_resource_requests:sum{cluster=\"$cluster\"})
      by (namespace)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\"})
      by (namespace) / sum(namespace_cpu:kube_pod_container_resource_requests:sum{cluster=\"$cluster\"})
      by (namespace)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(namespace_cpu:kube_pod_container_resource_limits:sum{cluster=\"$cluster\"})
      by (namespace)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\"})
      by (namespace) / sum(namespace_cpu:kube_pod_container_resource_limits:sum{cluster=\"$cluster\"})
      by (namespace)","format":"table","instant":true}],"title":"CPU Quota","transformations":[{"id":"joinByField","options":{"byField":"namespace","mode":"outer"}},{"id":"organize","options":{"excludeByName":{"Time":true,"Time
      1":true,"Time 2":true,"Time 3":true,"Time 4":true,"Time 5":true,"Time 6":true,"Time
      7":true},"indexByName":{"Time 1":0,"Time 2":1,"Time 3":2,"Time 4":3,"Time 5":4,"Time
      6":5,"Time 7":6,"Value #A":8,"Value #B":9,"Value #C":10,"Value #D":11,"Value
      #E":12,"Value #F":13,"Value #G":14,"namespace":7},"renameByName":{"Value #A":"Pods","Value
      #B":"Workloads","Value #C":"CPU Usage","Value #D":"CPU Requests","Value #E":"CPU
      Requests %","Value #F":"CPU Limits","Value #G":"CPU Limits %","namespace":"Namespace"}}}],"type":"table"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"bytes"}},"gridPos":{"h":6,"w":24,"x":0,"y":18},"id":9,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(container_memory_rss{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", container!=\"\"})
      by (namespace)","legendFormat":"__auto"}],"title":"Memory","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"overrides":[{"matcher":{"id":"byRegexp","options":"/%/"},"properties":[{"id":"unit","value":"percentunit"}]},{"matcher":{"id":"byName","options":"Memory
      Usage"},"properties":[{"id":"unit","value":"bytes"}]},{"matcher":{"id":"byName","options":"Memory
      Requests"},"properties":[{"id":"unit","value":"bytes"}]},{"matcher":{"id":"byName","options":"Memory
      Limits"},"properties":[{"id":"unit","value":"bytes"}]},{"matcher":{"id":"byName","options":"Namespace"},"properties":[{"id":"links","value":[{"title":"Drill
      down to pods","url":"/d/85a562078cdf77779eaa1add43ccec1e/k8s-resources-namespace?${datasource:queryparam}&var-cluster=$cluster&var-namespace=${__data.fields.Namespace}"}]}]}]},"gridPos":{"h":6,"w":24,"x":0,"y":24},"id":10,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(kube_pod_owner{job=\"kube-state-metrics\",
      cluster=\"$cluster\"}) by (namespace)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"count(avg(namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\"})
      by (workload, namespace)) by (namespace)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(container_memory_rss{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", container!=\"\"})
      by (namespace)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(namespace_memory:kube_pod_container_resource_requests:sum{cluster=\"$cluster\"})
      by (namespace)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(container_memory_rss{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", container!=\"\"})
      by (namespace) / sum(namespace_memory:kube_pod_container_resource_requests:sum{cluster=\"$cluster\"})
      by (namespace)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(namespace_memory:kube_pod_container_resource_limits:sum{cluster=\"$cluster\"})
      by (namespace)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(container_memory_rss{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", container!=\"\"})
      by (namespace) / sum(namespace_memory:kube_pod_container_resource_limits:sum{cluster=\"$cluster\"})
      by (namespace)","format":"table","instant":true}],"title":"Memory Requests by
      Namespace","transformations":[{"id":"joinByField","options":{"byField":"namespace","mode":"outer"}},{"id":"organize","options":{"excludeByName":{"Time":true,"Time
      1":true,"Time 2":true,"Time 3":true,"Time 4":true,"Time 5":true,"Time 6":true,"Time
      7":true},"indexByName":{"Time 1":0,"Time 2":1,"Time 3":2,"Time 4":3,"Time 5":4,"Time
      6":5,"Time 7":6,"Value #A":8,"Value #B":9,"Value #C":10,"Value #D":11,"Value
      #E":12,"Value #F":13,"Value #G":14,"namespace":7},"renameByName":{"Value #A":"Pods","Value
      #B":"Workloads","Value #C":"Memory Usage","Value #D":"Memory Requests","Value
      #E":"Memory Requests %","Value #F":"Memory Limits","Value #G":"Memory Limits
      %","namespace":"Namespace"}}}],"type":"table"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"overrides":[{"matcher":{"id":"byRegexp","options":"/Bandwidth/"},"properties":[{"id":"unit","value":"Bps"}]},{"matcher":{"id":"byRegexp","options":"/Packets/"},"properties":[{"id":"unit","value":"pps"}]},{"matcher":{"id":"byName","options":"Namespace"},"properties":[{"id":"links","value":[{"title":"Drill
      down to pods","url":"/d/85a562078cdf77779eaa1add43ccec1e/k8s-resources-namespace?${datasource:queryparam}&var-cluster=$cluster&var-namespace=${__data.fields.Namespace}"}]}]}]},"gridPos":{"h":6,"w":24,"x":0,"y":30},"id":11,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_receive_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=~\".+\"}[$__rate_interval]))
      by (namespace)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_transmit_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=~\".+\"}[$__rate_interval]))
      by (namespace)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_receive_packets_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=~\".+\"}[$__rate_interval]))
      by (namespace)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_transmit_packets_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=~\".+\"}[$__rate_interval]))
      by (namespace)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_receive_packets_dropped_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=~\".+\"}[$__rate_interval]))
      by (namespace)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_transmit_packets_dropped_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=~\".+\"}[$__rate_interval]))
      by (namespace)","format":"table","instant":true}],"title":"Current Network Usage","transformations":[{"id":"joinByField","options":{"byField":"namespace","mode":"outer"}},{"id":"organize","options":{"excludeByName":{"Time":true,"Time
      1":true,"Time 2":true,"Time 3":true,"Time 4":true,"Time 5":true,"Time 6":true},"indexByName":{"Time
      1":0,"Time 2":1,"Time 3":2,"Time 4":3,"Time 5":4,"Time 6":5,"Value #A":7,"Value
      #B":8,"Value #C":9,"Value #D":10,"Value #E":11,"Value #F":12,"namespace":6},"renameByName":{"Value
      #A":"Current Receive Bandwidth","Value #B":"Current Transmit Bandwidth","Value
      #C":"Rate of Received Packets","Value #D":"Rate of Transmitted Packets","Value
      #E":"Rate of Received Packets Dropped","Value #F":"Rate of Transmitted Packets
      Dropped","namespace":"Namespace"}}}],"type":"table"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"Bps"}},"gridPos":{"h":6,"w":24,"x":0,"y":36},"id":12,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_receive_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=~\".+\"}[$__rate_interval]))
      by (namespace)","legendFormat":"__auto"}],"title":"Receive Bandwidth","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"Bps"}},"gridPos":{"h":6,"w":24,"x":0,"y":42},"id":13,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_transmit_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=~\".+\"}[$__rate_interval]))
      by (namespace)","legendFormat":"__auto"}],"title":"Transmit Bandwidth","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"Bps"}},"gridPos":{"h":6,"w":24,"x":0,"y":48},"id":14,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"avg(irate(container_network_receive_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=~\".+\"}[$__rate_interval]))
      by (namespace)","legendFormat":"__auto"}],"title":"Average Container Bandwidth
      by Namespace: Received","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"Bps"}},"gridPos":{"h":6,"w":24,"x":0,"y":54},"id":15,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"avg(irate(container_network_transmit_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=~\".+\"}[$__rate_interval]))
      by (namespace)","legendFormat":"__auto"}],"title":"Average Container Bandwidth
      by Namespace: Transmitted","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":6,"w":24,"x":0,"y":60},"id":16,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(irate(container_network_receive_packets_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=~\".+\"}[$__rate_interval]))
      by (namespace)","legendFormat":"__auto"}],"title":"Rate of Received Packets","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":6,"w":24,"x":0,"y":66},"id":17,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(irate(container_network_transmit_packets_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=~\".+\"}[$__rate_interval]))
      by (namespace)","legendFormat":"__auto"}],"title":"Rate of Transmitted Packets","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":6,"w":24,"x":0,"y":72},"id":18,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(irate(container_network_receive_packets_dropped_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=~\".+\"}[$__rate_interval]))
      by (namespace)","legendFormat":"__auto"}],"title":"Rate of Received Packets
      Dropped","type":"timeseries"},{"datasource":{"type":"datasource","uid":"-- Mixed
      --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":6,"w":24,"x":0,"y":78},"id":19,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(irate(container_network_transmit_packets_dropped_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=~\".+\"}[$__rate_interval]))
      by (namespace)","legendFormat":"__auto"}],"title":"Rate of Transmitted Packets
      Dropped","type":"timeseries"},{"datasource":{"type":"datasource","uid":"-- Mixed
      --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"iops"}},"gridPos":{"h":6,"w":24,"x":0,"y":84},"id":20,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"ceil(sum
      by(namespace) (rate(container_fs_reads_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      container!=\"\", device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      cluster=\"$cluster\", namespace!=\"\"}[$__rate_interval]) + rate(container_fs_writes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", container!=\"\", cluster=\"$cluster\", namespace!=\"\"}[$__rate_interval])))","legendFormat":"__auto"}],"title":"IOPS(Reads+Writes)","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"Bps"}},"gridPos":{"h":6,"w":24,"x":0,"y":90},"id":21,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by(namespace) (rate(container_fs_reads_bytes_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      container!=\"\", device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      cluster=\"$cluster\", namespace!=\"\"}[$__rate_interval]) + rate(container_fs_writes_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", container!=\"\", cluster=\"$cluster\", namespace!=\"\"}[$__rate_interval]))","legendFormat":"__auto"}],"title":"ThroughPut(Read+Write)","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"overrides":[{"matcher":{"id":"byRegexp","options":"/IOPS/"},"properties":[{"id":"unit","value":"iops"}]},{"matcher":{"id":"byRegexp","options":"/Throughput/"},"properties":[{"id":"unit","value":"Bps"}]},{"matcher":{"id":"byName","options":"Namespace"},"properties":[{"id":"links","value":[{"title":"Drill
      down to pods","url":"/d/85a562078cdf77779eaa1add43ccec1e/k8s-resources-namespace?${datasource:queryparam}&var-cluster=$cluster&var-namespace=${__data.fields.Namespace}"}]}]}]},"gridPos":{"h":6,"w":24,"x":0,"y":96},"id":22,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by(namespace) (rate(container_fs_reads_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace!=\"\"}[$__rate_interval]))","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by(namespace) (rate(container_fs_writes_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace!=\"\"}[$__rate_interval]))","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by(namespace) (rate(container_fs_reads_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace!=\"\"}[$__rate_interval]) +
      rate(container_fs_writes_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace!=\"\"}[$__rate_interval]))","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by(namespace) (rate(container_fs_reads_bytes_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace!=\"\"}[$__rate_interval]))","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by(namespace) (rate(container_fs_writes_bytes_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace!=\"\"}[$__rate_interval]))","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by(namespace) (rate(container_fs_reads_bytes_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace!=\"\"}[$__rate_interval]) +
      rate(container_fs_writes_bytes_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace!=\"\"}[$__rate_interval]))","format":"table","instant":true}],"title":"Current
      Storage IO","transformations":[{"id":"joinByField","options":{"byField":"namespace","mode":"outer"}},{"id":"organize","options":{"excludeByName":{"Time":true,"Time
      1":true,"Time 2":true,"Time 3":true,"Time 4":true,"Time 5":true,"Time 6":true},"indexByName":{"Time
      1":0,"Time 2":1,"Time 3":2,"Time 4":3,"Time 5":4,"Time 6":5,"Value #A":7,"Value
      #B":8,"Value #C":9,"Value #D":10,"Value #E":11,"Value #F":12,"namespace":6},"renameByName":{"Value
      #A":"IOPS(Reads)","Value #B":"IOPS(Writes)","Value #C":"IOPS(Reads + Writes)","Value
      #D":"Throughput(Read)","Value #E":"Throughput(Write)","Value #F":"Throughput(Read
      + Write)","namespace":"Namespace"}}}],"type":"table"}],"refresh":"10s","schemaVersion":39,"tags":["kubernetes-mixin"],"templating":{"list":[{"current":{"selected":true,"text":"default","value":"default"},"hide":0,"label":"Data
      source","name":"datasource","query":"prometheus","regex":"","type":"datasource"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":2,"label":"cluster","name":"cluster","query":"label_values(up{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\"}, cluster)","refresh":2,"sort":1,"type":"query","allValue":".*"}]},"time":{"from":"now-1h","to":"now"},"timezone":
      "utc","title":"Kubernetes / Compute Resources / Cluster","uid":"efa86fd1d0c121a26444b636a3f509a8"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-k8s-resources-cluster
    namespace: tomer
    resourceVersion: "2297433"
    uid: efb27afe-9f54-4759-9eaa-4dc4fd452150
- apiVersion: v1
  data:
    k8s-resources-multicluster.json: '{"editable":true,"links":[{"asDropdown":true,"includeVars":true,"keepTime":true,"tags":["kubernetes-mixin"],"targetBlank":false,"title":"Kubernetes","type":"dashboards"}],"panels":[{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"unit":"none"}},"gridPos":{"h":3,"w":4,"x":0,"y":0},"id":1,"interval":"1m","options":{"colorMode":"none"},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(cluster:node_cpu:ratio_rate5m)
      / count(cluster:node_cpu:ratio_rate5m)","instant":true}],"title":"CPU Utilisation","type":"stat"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"unit":"percentunit"}},"gridPos":{"h":3,"w":4,"x":4,"y":0},"id":2,"interval":"1m","options":{"colorMode":"none"},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(kube_pod_container_resource_requests{job=\"kube-state-metrics\",
      resource=\"cpu\"}) / sum(kube_node_status_allocatable{job=\"kube-state-metrics\",
      resource=\"cpu\"})","instant":true}],"title":"CPU Requests Commitment","type":"stat"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"unit":"percentunit"}},"gridPos":{"h":3,"w":4,"x":8,"y":0},"id":3,"interval":"1m","options":{"colorMode":"none"},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(kube_pod_container_resource_limits{job=\"kube-state-metrics\",
      resource=\"cpu\"}) / sum(kube_node_status_allocatable{job=\"kube-state-metrics\",
      resource=\"cpu\"})","instant":true}],"title":"CPU Limits Commitment","type":"stat"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"unit":"percentunit"}},"gridPos":{"h":3,"w":4,"x":12,"y":0},"id":4,"interval":"1m","options":{"colorMode":"none"},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"1
      - sum(:node_memory_MemAvailable_bytes:sum) / sum(node_memory_MemTotal_bytes{job=\"node-exporter\"})","instant":true}],"title":"Memory
      Utilisation","type":"stat"},{"datasource":{"type":"datasource","uid":"-- Mixed
      --"},"fieldConfig":{"defaults":{"unit":"percentunit"}},"gridPos":{"h":3,"w":4,"x":16,"y":0},"id":5,"interval":"1m","options":{"colorMode":"none"},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(kube_pod_container_resource_requests{job=\"kube-state-metrics\",
      resource=\"memory\"}) / sum(kube_node_status_allocatable{job=\"kube-state-metrics\",
      resource=\"memory\"})","instant":true}],"title":"Memory Requests Commitment","type":"stat"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"unit":"percentunit"}},"gridPos":{"h":3,"w":4,"x":20,"y":0},"id":6,"interval":"1m","options":{"colorMode":"none"},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(kube_pod_container_resource_limits{job=\"kube-state-metrics\",
      resource=\"memory\"}) / sum(kube_node_status_allocatable{job=\"kube-state-metrics\",
      resource=\"memory\"})","instant":true}],"title":"Memory Limits Commitment","type":"stat"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"}}},"gridPos":{"h":7,"w":24,"x":0,"y":1},"id":7,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate)
      by (cluster)","legendFormat":"__auto"}],"title":"CPU Usage","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"overrides":[{"matcher":{"id":"byRegexp","options":"/%/"},"properties":[{"id":"unit","value":"percentunit"}]},{"matcher":{"id":"byName","options":"Cluster"},"properties":[{"id":"links","value":[{"title":"Drill
      down","url":"/d/efa86fd1d0c121a26444b636a3f509a8/kubernetes-compute-resources-cluster?${datasource:queryparam}&var-cluster=${__data.fields.Cluster}"}]}]}]},"gridPos":{"h":7,"w":24,"x":0,"y":2},"id":8,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate)
      by (cluster)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(kube_pod_container_resource_requests{job=\"kube-state-metrics\",
      resource=\"cpu\"}) by (cluster)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate)
      by (cluster) / sum(kube_pod_container_resource_requests{job=\"kube-state-metrics\",
      resource=\"cpu\"}) by (cluster)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(kube_pod_container_resource_limits{job=\"kube-state-metrics\",
      resource=\"cpu\"}) by (cluster)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate)
      by (cluster) / sum(kube_pod_container_resource_limits{job=\"kube-state-metrics\",
      resource=\"cpu\"}) by (cluster)","format":"table","instant":true}],"title":"CPU
      Quota","transformations":[{"id":"joinByField","options":{"byField":"cluster","mode":"outer"}},{"id":"organize","options":{"excludeByName":{"Time":true,"Time
      1":true,"Time 2":true,"Time 3":true,"Time 4":true,"Time 5":true},"indexByName":{"Time
      1":0,"Time 2":1,"Time 3":2,"Time 4":3,"Time 5":4,"Value #A":6,"Value #B":7,"Value
      #C":8,"Value #D":9,"Value #E":10,"cluster":5},"renameByName":{"Value #A":"CPU
      Usage","Value #B":"CPU Requests","Value #C":"CPU Requests %","Value #D":"CPU
      Limits","Value #E":"CPU Limits %","cluster":"Cluster"}}}],"type":"table"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"},"unit":"bytes"}},"gridPos":{"h":7,"w":24,"x":0,"y":3},"id":9,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(container_memory_rss{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", container!=\"\"}) by (cluster)","legendFormat":"__auto"}],"title":"Memory
      Usage (w/o cache)","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"unit":"bytes"},"overrides":[{"matcher":{"id":"byRegexp","options":"/%/"},"properties":[{"id":"unit","value":"percentunit"}]},{"matcher":{"id":"byName","options":"Cluster"},"properties":[{"id":"links","value":[{"title":"Drill
      down","url":"/d/efa86fd1d0c121a26444b636a3f509a8/kubernetes-compute-resources-cluster?${datasource:queryparam}&var-cluster=${__data.fields.Cluster}"}]}]}]},"gridPos":{"h":7,"w":24,"x":0,"y":4},"id":10,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(container_memory_rss{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", container!=\"\"}) by (cluster)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(kube_pod_container_resource_requests{job=\"kube-state-metrics\",
      resource=\"memory\"}) by (cluster)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(container_memory_rss{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", container!=\"\"}) by (cluster) / sum(kube_pod_container_resource_requests{job=\"kube-state-metrics\",
      resource=\"memory\"}) by (cluster)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(kube_pod_container_resource_limits{job=\"kube-state-metrics\",
      resource=\"memory\"}) by (cluster)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(container_memory_rss{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", container!=\"\"}) by (cluster) / sum(kube_pod_container_resource_limits{job=\"kube-state-metrics\",
      resource=\"memory\"}) by (cluster)","format":"table","instant":true}],"title":"Memory
      Requests by Cluster","transformations":[{"id":"joinByField","options":{"byField":"cluster","mode":"outer"}},{"id":"organize","options":{"excludeByName":{"Time":true,"Time
      1":true,"Time 2":true,"Time 3":true,"Time 4":true,"Time 5":true},"indexByName":{"Time
      1":0,"Time 2":1,"Time 3":2,"Time 4":3,"Time 5":4,"Value #A":6,"Value #B":7,"Value
      #C":8,"Value #D":9,"Value #E":10,"cluster":5},"renameByName":{"Value #A":"Memory
      Usage","Value #B":"Memory Requests","Value #C":"Memory Requests %","Value #D":"Memory
      Limits","Value #E":"Memory Limits %","cluster":"Cluster"}}}],"type":"table"}],"refresh":"10s","schemaVersion":39,"tags":["kubernetes-mixin"],"templating":{"list":[{"current":{"selected":true,"text":"default","value":"default"},"hide":0,"label":"Data
      source","name":"datasource","query":"prometheus","regex":"","type":"datasource"}]},"time":{"from":"now-1h","to":"now"},"timezone":
      "utc","title":"Kubernetes / Compute Resources /  Multi-Cluster","uid":"b59e6c9f2fcbe2e16d77fc492374cc4f"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-k8s-resources-multicluster
    namespace: tomer
    resourceVersion: "2297444"
    uid: 4680bde1-c66a-4561-8fed-78fff2ba672f
- apiVersion: v1
  data:
    k8s-resources-namespace.json: '{"editable":true,"links":[{"asDropdown":true,"includeVars":true,"keepTime":true,"tags":["kubernetes-mixin"],"targetBlank":false,"title":"Kubernetes","type":"dashboards"}],"panels":[{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"unit":"percentunit"}},"gridPos":{"h":3,"w":6,"x":0,"y":0},"id":1,"interval":"1m","options":{"colorMode":"none"},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\",
      namespace=\"$namespace\"}) / sum(kube_pod_container_resource_requests{job=\"kube-state-metrics\",
      cluster=\"$cluster\", namespace=\"$namespace\", resource=\"cpu\"})","instant":true}],"title":"CPU
      Utilisation (from requests)","type":"stat"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"unit":"percentunit"}},"gridPos":{"h":3,"w":6,"x":6,"y":0},"id":2,"interval":"1m","options":{"colorMode":"none"},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\",
      namespace=\"$namespace\"}) / sum(kube_pod_container_resource_limits{job=\"kube-state-metrics\",
      cluster=\"$cluster\", namespace=\"$namespace\", resource=\"cpu\"})","instant":true}],"title":"CPU
      Utilisation (from limits)","type":"stat"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"unit":"percentunit"}},"gridPos":{"h":3,"w":6,"x":12,"y":0},"id":3,"interval":"1m","options":{"colorMode":"none"},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(container_memory_working_set_bytes{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",container!=\"\",
      image!=\"\"}) / sum(kube_pod_container_resource_requests{job=\"kube-state-metrics\",
      cluster=\"$cluster\", namespace=\"$namespace\", resource=\"memory\"})","instant":true}],"title":"Memory
      Utilisation (from requests)","type":"stat"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"unit":"percentunit"}},"gridPos":{"h":3,"w":6,"x":18,"y":0},"id":4,"interval":"1m","options":{"colorMode":"none"},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(container_memory_working_set_bytes{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",container!=\"\",
      image!=\"\"}) / sum(kube_pod_container_resource_limits{job=\"kube-state-metrics\",
      cluster=\"$cluster\", namespace=\"$namespace\", resource=\"memory\"})","instant":true}],"title":"Memory
      Utilisation (from limits)","type":"stat"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true}},"overrides":[{"matcher":{"id":"byFrameRefID","options":"B"},"properties":[{"id":"custom.lineStyle","value":{"fill":"dash"}},{"id":"custom.lineWidth","value":2},{"id":"color","value":{"fixedColor":"red","mode":"fixed"}}]},{"matcher":{"id":"byFrameRefID","options":"C"},"properties":[{"id":"custom.lineStyle","value":{"fill":"dash"}},{"id":"custom.lineWidth","value":2},{"id":"color","value":{"fixedColor":"orange","mode":"fixed"}}]}]},"gridPos":{"h":7,"w":24,"x":0,"y":7},"id":5,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\",
      namespace=\"$namespace\"}) by (pod)","legendFormat":"__auto"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"scalar(max(kube_resourcequota{cluster=\"$cluster\",
      namespace=\"$namespace\", type=\"hard\",resource=\"requests.cpu\"}))","legendFormat":"quota
      - requests"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"scalar(max(kube_resourcequota{cluster=\"$cluster\",
      namespace=\"$namespace\", type=\"hard\",resource=\"limits.cpu\"}))","legendFormat":"quota
      - limits"}],"title":"CPU Usage","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"overrides":[{"matcher":{"id":"byRegexp","options":"/%/"},"properties":[{"id":"unit","value":"percentunit"}]},{"matcher":{"id":"byName","options":"Pod"},"properties":[{"id":"links","value":[{"title":"Drill
      down to pods","url":"/d/6581e46e4e5c7ba40a07646395ef7b23/k8s-resources-pod?${datasource:queryparam}&var-cluster=$cluster&var-namespace=$namespace&var-pod=${__data.fields.Pod}"}]}]}]},"gridPos":{"h":7,"w":24,"x":0,"y":14},"id":6,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\",
      namespace=\"$namespace\"}) by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(cluster:namespace:pod_cpu:active:kube_pod_container_resource_requests{cluster=\"$cluster\",
      namespace=\"$namespace\"}) by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\",
      namespace=\"$namespace\"}) by (pod) / sum(cluster:namespace:pod_cpu:active:kube_pod_container_resource_requests{cluster=\"$cluster\",
      namespace=\"$namespace\"}) by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(cluster:namespace:pod_cpu:active:kube_pod_container_resource_limits{cluster=\"$cluster\",
      namespace=\"$namespace\"}) by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\",
      namespace=\"$namespace\"}) by (pod) / sum(cluster:namespace:pod_cpu:active:kube_pod_container_resource_limits{cluster=\"$cluster\",
      namespace=\"$namespace\"}) by (pod)","format":"table","instant":true}],"title":"CPU
      Quota","transformations":[{"id":"joinByField","options":{"byField":"pod","mode":"outer"}},{"id":"organize","options":{"excludeByName":{"Time":true,"Time
      1":true,"Time 2":true,"Time 3":true,"Time 4":true,"Time 5":true},"indexByName":{"Time
      1":0,"Time 2":1,"Time 3":2,"Time 4":3,"Time 5":4,"Value #A":6,"Value #B":7,"Value
      #C":8,"Value #D":9,"Value #E":10,"pod":5},"renameByName":{"Value #A":"CPU Usage","Value
      #B":"CPU Requests","Value #C":"CPU Requests %","Value #D":"CPU Limits","Value
      #E":"CPU Limits %","pod":"Pod"}}}],"type":"table"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"bytes"},"overrides":[{"matcher":{"id":"byFrameRefID","options":"B"},"properties":[{"id":"custom.lineStyle","value":{"fill":"dash"}},{"id":"custom.lineWidth","value":2},{"id":"color","value":{"fixedColor":"red","mode":"fixed"}}]},{"matcher":{"id":"byFrameRefID","options":"C"},"properties":[{"id":"custom.lineStyle","value":{"fill":"dash"}},{"id":"custom.lineWidth","value":2},{"id":"color","value":{"fixedColor":"orange","mode":"fixed"}}]}]},"gridPos":{"h":7,"w":24,"x":0,"y":21},"id":7,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(container_memory_working_set_bytes{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",
      container!=\"\", image!=\"\"}) by (pod)","legendFormat":"__auto"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"scalar(max(kube_resourcequota{cluster=\"$cluster\",
      namespace=\"$namespace\", type=\"hard\",resource=\"requests.memory\"}))","legendFormat":"quota
      - requests"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"scalar(max(kube_resourcequota{cluster=\"$cluster\",
      namespace=\"$namespace\", type=\"hard\",resource=\"limits.memory\"}))","legendFormat":"quota
      - limits"}],"title":"Memory Usage (w/o cache)","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"unit":"bytes"},"overrides":[{"matcher":{"id":"byRegexp","options":"/%/"},"properties":[{"id":"unit","value":"percentunit"}]},{"matcher":{"id":"byName","options":"Pod"},"properties":[{"id":"links","value":[{"title":"Drill
      down to pods","url":"/d/6581e46e4e5c7ba40a07646395ef7b23/k8s-resources-pod?${datasource:queryparam}&var-cluster=$cluster&var-namespace=$namespace&var-pod=${__data.fields.Pod}"}]}]}]},"gridPos":{"h":7,"w":24,"x":0,"y":28},"id":8,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(container_memory_working_set_bytes{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",container!=\"\",
      image!=\"\"}) by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(cluster:namespace:pod_memory:active:kube_pod_container_resource_requests{cluster=\"$cluster\",
      namespace=\"$namespace\"}) by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(container_memory_working_set_bytes{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",container!=\"\",
      image!=\"\"}) by (pod) / sum(cluster:namespace:pod_memory:active:kube_pod_container_resource_requests{cluster=\"$cluster\",
      namespace=\"$namespace\"}) by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(cluster:namespace:pod_memory:active:kube_pod_container_resource_limits{cluster=\"$cluster\",
      namespace=\"$namespace\"}) by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(container_memory_working_set_bytes{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",container!=\"\",
      image!=\"\"}) by (pod) / sum(cluster:namespace:pod_memory:active:kube_pod_container_resource_limits{cluster=\"$cluster\",
      namespace=\"$namespace\"}) by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(container_memory_rss{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",container!=\"\"})
      by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(container_memory_cache{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",container!=\"\"})
      by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(container_memory_swap{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",container!=\"\"})
      by (pod)","format":"table","instant":true}],"title":"Memory Quota","transformations":[{"id":"joinByField","options":{"byField":"pod","mode":"outer"}},{"id":"organize","options":{"excludeByName":{"Time":true,"Time
      1":true,"Time 2":true,"Time 3":true,"Time 4":true,"Time 5":true,"Time 6":true,"Time
      7":true,"Time 8":true},"indexByName":{"Time 1":0,"Time 2":1,"Time 3":2,"Time
      4":3,"Time 5":4,"Time 6":5,"Time 7":6,"Time 8":7,"Value #A":9,"Value #B":10,"Value
      #C":11,"Value #D":12,"Value #E":13,"Value #F":14,"Value #G":15,"Value #H":16,"pod":8},"renameByName":{"Value
      #A":"Memory Usage","Value #B":"Memory Requests","Value #C":"Memory Requests
      %","Value #D":"Memory Limits","Value #E":"Memory Limits %","Value #F":"Memory
      Usage (RSS)","Value #G":"Memory Usage (Cache)","Value #H":"Memory Usage (Swap)","pod":"Pod"}}}],"type":"table"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"overrides":[{"matcher":{"id":"byRegexp","options":"/Bandwidth/"},"properties":[{"id":"unit","value":"Bps"}]},{"matcher":{"id":"byRegexp","options":"/Packets/"},"properties":[{"id":"unit","value":"pps"}]},{"matcher":{"id":"byName","options":"Pod"},"properties":[{"id":"links","value":[{"title":"Drill
      down to pods","url":"/d/6581e46e4e5c7ba40a07646395ef7b23/k8s-resources-pod?${datasource:queryparam}&var-cluster=$cluster&var-namespace=$namespace&var-pod=${__data.fields.Pod}"}]}]}]},"gridPos":{"h":7,"w":24,"x":0,"y":35},"id":9,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_receive_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval]))
      by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_transmit_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval]))
      by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_receive_packets_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval]))
      by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_transmit_packets_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval]))
      by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_receive_packets_dropped_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval]))
      by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_transmit_packets_dropped_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval]))
      by (pod)","format":"table","instant":true}],"title":"Current Network Usage","transformations":[{"id":"joinByField","options":{"byField":"pod","mode":"outer"}},{"id":"organize","options":{"excludeByName":{"Time":true,"Time
      1":true,"Time 2":true,"Time 3":true,"Time 4":true,"Time 5":true,"Time 6":true},"indexByName":{"Time
      1":0,"Time 2":1,"Time 3":2,"Time 4":3,"Time 5":4,"Time 6":5,"Value #A":7,"Value
      #B":8,"Value #C":9,"Value #D":10,"Value #E":11,"Value #F":12,"pod":6},"renameByName":{"Value
      #A":"Current Receive Bandwidth","Value #B":"Current Transmit Bandwidth","Value
      #C":"Rate of Received Packets","Value #D":"Rate of Transmitted Packets","Value
      #E":"Rate of Received Packets Dropped","Value #F":"Rate of Transmitted Packets
      Dropped","pod":"Pod"}}}],"type":"table"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"Bps"}},"gridPos":{"h":7,"w":12,"x":0,"y":42},"id":10,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_receive_bytes_total{cluster=\"$cluster\",
      namespace=\"$namespace\"}[$__rate_interval])) by (pod)","legendFormat":"__auto"}],"title":"Receive
      Bandwidth","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"Bps"}},"gridPos":{"h":7,"w":12,"x":12,"y":42},"id":11,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_transmit_bytes_total{cluster=\"$cluster\",
      namespace=\"$namespace\"}[$__rate_interval])) by (pod)","legendFormat":"__auto"}],"title":"Transmit
      Bandwidth","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":7,"w":12,"x":0,"y":49},"id":12,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(irate(container_network_receive_packets_total{cluster=\"$cluster\",
      namespace=\"$namespace\"}[$__rate_interval])) by (pod)","legendFormat":"__auto"}],"title":"Rate
      of Received Packets","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":7,"w":12,"x":12,"y":49},"id":13,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(irate(container_network_transmit_packets_total{cluster=\"$cluster\",
      namespace=\"$namespace\"}[$__rate_interval])) by (pod)","legendFormat":"__auto"}],"title":"Rate
      of Transmitted Packets","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":7,"w":12,"x":0,"y":56},"id":14,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(irate(container_network_receive_packets_dropped_total{cluster=\"$cluster\",
      namespace=\"$namespace\"}[$__rate_interval])) by (pod)","legendFormat":"__auto"}],"title":"Rate
      of Received Packets Dropped","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":7,"w":12,"x":12,"y":56},"id":15,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(irate(container_network_transmit_packets_dropped_total{cluster=\"$cluster\",
      namespace=\"$namespace\"}[$__rate_interval])) by (pod)","legendFormat":"__auto"}],"title":"Rate
      of Transmitted Packets Dropped","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"iops"}},"gridPos":{"h":7,"w":12,"x":0,"y":63},"id":16,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"ceil(sum
      by(pod) (rate(container_fs_reads_total{container!=\"\", device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval]) + rate(container_fs_writes_total{container!=\"\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])))","legendFormat":"__auto"}],"title":"IOPS(Reads+Writes)","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"Bps"}},"gridPos":{"h":7,"w":12,"x":12,"y":63},"id":17,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by(pod) (rate(container_fs_reads_bytes_total{container!=\"\", device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval]) + rate(container_fs_writes_bytes_total{container!=\"\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval]))","legendFormat":"__auto"}],"title":"ThroughPut(Read+Write)","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"overrides":[{"matcher":{"id":"byRegexp","options":"/IOPS/"},"properties":[{"id":"unit","value":"iops"}]},{"matcher":{"id":"byRegexp","options":"/Throughput/"},"properties":[{"id":"unit","value":"Bps"}]},{"matcher":{"id":"byName","options":"Pod"},"properties":[{"id":"links","value":[{"title":"Drill
      down to pods","url":"/d/6581e46e4e5c7ba40a07646395ef7b23/k8s-resources-pod?${datasource:queryparam}&var-cluster=$cluster&var-namespace=$namespace&var-pod=${__data.fields.Pod}"}]}]}]},"gridPos":{"h":7,"w":24,"x":0,"y":70},"id":18,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by(pod) (rate(container_fs_reads_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval]))","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by(pod) (rate(container_fs_writes_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval]))","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by(pod) (rate(container_fs_reads_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])
      + rate(container_fs_writes_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval]))","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by(pod) (rate(container_fs_reads_bytes_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval]))","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by(pod) (rate(container_fs_writes_bytes_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval]))","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by(pod) (rate(container_fs_reads_bytes_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])
      + rate(container_fs_writes_bytes_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval]))","format":"table","instant":true}],"title":"Current
      Storage IO","transformations":[{"id":"joinByField","options":{"byField":"pod","mode":"outer"}},{"id":"organize","options":{"excludeByName":{"Time":true,"Time
      1":true,"Time 2":true,"Time 3":true,"Time 4":true,"Time 5":true,"Time 6":true},"indexByName":{"Time
      1":0,"Time 2":1,"Time 3":2,"Time 4":3,"Time 5":4,"Time 6":5,"Value #A":7,"Value
      #B":8,"Value #C":9,"Value #D":10,"Value #E":11,"Value #F":12,"pod":6},"renameByName":{"Value
      #A":"IOPS(Reads)","Value #B":"IOPS(Writes)","Value #C":"IOPS(Reads + Writes)","Value
      #D":"Throughput(Read)","Value #E":"Throughput(Write)","Value #F":"Throughput(Read
      + Write)","pod":"Pod"}}}],"type":"table"}],"refresh":"10s","schemaVersion":39,"tags":["kubernetes-mixin"],"templating":{"list":[{"current":{"selected":true,"text":"default","value":"default"},"hide":0,"label":"Data
      source","name":"datasource","query":"prometheus","regex":"","type":"datasource"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":2,"label":"cluster","name":"cluster","query":"label_values(up{job=\"kube-state-metrics\"},
      cluster)","refresh":2,"sort":1,"type":"query","allValue":".*"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":0,"label":"namespace","name":"namespace","query":"label_values(kube_namespace_status_phase{job=\"kube-state-metrics\",
      cluster=\"$cluster\"}, namespace)","refresh":2,"sort":1,"type":"query"}]},"time":{"from":"now-1h","to":"now"},"timezone":
      "utc","title":"Kubernetes / Compute Resources / Namespace (Pods)","uid":"85a562078cdf77779eaa1add43ccec1e"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-k8s-resources-namespace
    namespace: tomer
    resourceVersion: "2297447"
    uid: a461e225-6555-4d38-9004-82c52ee1f633
- apiVersion: v1
  data:
    k8s-resources-node.json: '{"editable":true,"links":[{"asDropdown":true,"includeVars":true,"keepTime":true,"tags":["kubernetes-mixin"],"targetBlank":false,"title":"Kubernetes","type":"dashboards"}],"panels":[{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true,"stacking":{"mode":"normal"}}},"overrides":[{"matcher":{"id":"byName","options":"max
      capacity"},"properties":[{"id":"color","value":{"fixedColor":"red","mode":"fixed"}},{"id":"custom.stacking","value":{"mode":"none"}},{"id":"custom.hideFrom","value":{"legend":false,"tooltip":true,"viz":false}},{"id":"custom.lineStyle","value":{"dash":[10,10],"fill":"dash"}}]}]},"gridPos":{"h":6,"w":24,"x":0,"y":0},"id":1,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(kube_node_status_capacity{cluster=\"$cluster\",
      job=\"kube-state-metrics\", node=~\"$node\", resource=\"cpu\"})","legendFormat":"max
      capacity"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\",
      node=~\"$node\"}) by (pod)","legendFormat":"{{pod}}"}],"title":"CPU Usage","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"overrides":[{"matcher":{"id":"byRegexp","options":"/%/"},"properties":[{"id":"unit","value":"percentunit"}]},{"matcher":{"id":"byName","options":"Pod"},"properties":[{"id":"links","value":[{"title":"Drill
      down to pods","url":"/d/6581e46e4e5c7ba40a07646395ef7b23/k8s-resources-pod?${datasource:queryparam}&var-cluster=$cluster&var-namespace=$namespace&var-pod=${__data.fields.Pod}"}]}]}]},"gridPos":{"h":6,"w":24,"x":0,"y":6},"id":2,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\",
      node=~\"$node\"}) by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(cluster:namespace:pod_cpu:active:kube_pod_container_resource_requests{cluster=\"$cluster\",
      node=~\"$node\"}) by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\",
      node=~\"$node\"}) by (pod) / sum(cluster:namespace:pod_cpu:active:kube_pod_container_resource_requests{cluster=\"$cluster\",
      node=~\"$node\"}) by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(cluster:namespace:pod_cpu:active:kube_pod_container_resource_limits{cluster=\"$cluster\",
      node=~\"$node\"}) by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\",
      node=~\"$node\"}) by (pod) / sum(cluster:namespace:pod_cpu:active:kube_pod_container_resource_limits{cluster=\"$cluster\",
      node=~\"$node\"}) by (pod)","format":"table","instant":true}],"title":"CPU Quota","transformations":[{"id":"joinByField","options":{"byField":"pod","mode":"outer"}},{"id":"organize","options":{"excludeByName":{"Time":true,"Time
      1":true,"Time 2":true,"Time 3":true,"Time 4":true,"Time 5":true},"renameByName":{"Value
      #A":"CPU Usage","Value #B":"CPU Requests","Value #C":"CPU Requests %","Value
      #D":"CPU Limits","Value #E":"CPU Limits %","pod":"Pod"}}}],"type":"table"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true,"stacking":{"mode":"normal"}},"unit":"bytes"},"overrides":[{"matcher":{"id":"byName","options":"max
      capacity"},"properties":[{"id":"color","value":{"fixedColor":"red","mode":"fixed"}},{"id":"custom.stacking","value":{"mode":"none"}},{"id":"custom.hideFrom","value":{"legend":false,"tooltip":true,"viz":false}},{"id":"custom.lineStyle","value":{"dash":[10,10],"fill":"dash"}}]}]},"gridPos":{"h":6,"w":24,"x":0,"y":12},"id":3,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(kube_node_status_capacity{cluster=\"$cluster\",
      job=\"kube-state-metrics\", node=~\"$node\", resource=\"memory\"})","legendFormat":"max
      capacity"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_memory_working_set_bytes{cluster=\"$cluster\",
      node=~\"$node\", container!=\"\"}) by (pod)","legendFormat":"{{pod}}"}],"title":"Memory
      Usage (w/cache)","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true,"stacking":{"mode":"normal"}},"unit":"bytes"},"overrides":[{"matcher":{"id":"byName","options":"max
      capacity"},"properties":[{"id":"color","value":{"fixedColor":"red","mode":"fixed"}},{"id":"custom.stacking","value":{"mode":"none"}},{"id":"custom.hideFrom","value":{"legend":false,"tooltip":true,"viz":false}},{"id":"custom.lineStyle","value":{"dash":[10,10],"fill":"dash"}}]}]},"gridPos":{"h":6,"w":24,"x":0,"y":18},"id":4,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(kube_node_status_capacity{cluster=\"$cluster\",
      job=\"kube-state-metrics\", node=~\"$node\", resource=\"memory\"})","legendFormat":"max
      capacity"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_memory_rss{cluster=\"$cluster\",
      node=~\"$node\", container!=\"\"}) by (pod)","legendFormat":"{{pod}}"}],"title":"Memory
      Usage (w/o cache)","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"unit":"bytes"},"overrides":[{"matcher":{"id":"byRegexp","options":"/%/"},"properties":[{"id":"unit","value":"percentunit"}]},{"matcher":{"id":"byName","options":"Pod"},"properties":[{"id":"links","value":[{"title":"Drill
      down to pods","url":"/d/6581e46e4e5c7ba40a07646395ef7b23/k8s-resources-pod?${datasource:queryparam}&var-cluster=$cluster&var-namespace=$namespace&var-pod=${__data.fields.Pod}"}]}]}]},"gridPos":{"h":6,"w":24,"x":0,"y":24},"id":5,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_memory_working_set_bytes{cluster=\"$cluster\",
      node=~\"$node\",container!=\"\"}) by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(cluster:namespace:pod_memory:active:kube_pod_container_resource_requests{cluster=\"$cluster\",
      node=~\"$node\"}) by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_memory_working_set_bytes{cluster=\"$cluster\",
      node=~\"$node\",container!=\"\"}) by (pod) / sum(cluster:namespace:pod_memory:active:kube_pod_container_resource_requests{cluster=\"$cluster\",
      node=~\"$node\"}) by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(cluster:namespace:pod_memory:active:kube_pod_container_resource_limits{cluster=\"$cluster\",
      node=~\"$node\"}) by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_memory_working_set_bytes{cluster=\"$cluster\",
      node=~\"$node\",container!=\"\"}) by (pod) / sum(cluster:namespace:pod_memory:active:kube_pod_container_resource_limits{cluster=\"$cluster\",
      node=~\"$node\"}) by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_memory_rss{cluster=\"$cluster\",
      node=~\"$node\",container!=\"\"}) by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_memory_cache{cluster=\"$cluster\",
      node=~\"$node\",container!=\"\"}) by (pod)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_memory_swap{cluster=\"$cluster\",
      node=~\"$node\",container!=\"\"}) by (pod)","format":"table","instant":true}],"title":"Memory
      Quota","transformations":[{"id":"joinByField","options":{"byField":"pod","mode":"outer"}},{"id":"organize","options":{"excludeByName":{"Time":true,"Time
      1":true,"Time 2":true,"Time 3":true,"Time 4":true,"Time 5":true,"Time 6":true,"Time
      7":true,"Time 8":true},"renameByName":{"Value #A":"Memory Usage","Value #B":"Memory
      Requests","Value #C":"Memory Requests %","Value #D":"Memory Limits","Value #E":"Memory
      Limits %","Value #F":"Memory Usage (RSS)","Value #G":"Memory Usage (Cache)","Value
      #H":"Memory Usage (Swap)","pod":"Pod"}}}],"type":"table"}],"refresh":"10s","schemaVersion":39,"tags":["kubernetes-mixin"],"templating":{"list":[{"current":{"selected":true,"text":"default","value":"default"},"hide":0,"label":"Data
      source","name":"datasource","query":"prometheus","regex":"","type":"datasource"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":2,"label":"cluster","name":"cluster","query":"label_values(up{job=\"kube-state-metrics\"},
      cluster)","refresh":2,"sort":1,"type":"query","allValue":".*"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":0,"label":"node","multi":true,"name":"node","query":"label_values(kube_node_info{cluster=\"$cluster\"},
      node)","refresh":2,"type":"query"}]},"time":{"from":"now-1h","to":"now"},"timezone":
      "utc","title":"Kubernetes / Compute Resources / Node (Pods)","uid":"200ac8fdbfbb74b39aff88118e4d1c2c"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-k8s-resources-node
    namespace: tomer
    resourceVersion: "2297446"
    uid: 8fb58753-8e80-4e1f-a4c5-cdd4bd17a02e
- apiVersion: v1
  data:
    k8s-resources-pod.json: '{"editable":true,"links":[{"asDropdown":true,"includeVars":true,"keepTime":true,"tags":["kubernetes-mixin"],"targetBlank":false,"title":"Kubernetes","type":"dashboards"}],"panels":[{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true}},"overrides":[{"matcher":{"id":"byFrameRefID","options":"B"},"properties":[{"id":"custom.lineStyle","value":{"fill":"dash"}},{"id":"custom.lineWidth","value":2},{"id":"color","value":{"fixedColor":"red","mode":"fixed"}}]},{"matcher":{"id":"byFrameRefID","options":"C"},"properties":[{"id":"custom.lineStyle","value":{"fill":"dash"}},{"id":"custom.lineWidth","value":2},{"id":"color","value":{"fixedColor":"orange","mode":"fixed"}}]}]},"gridPos":{"h":7,"w":24,"x":0,"y":0},"id":1,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{namespace=\"$namespace\",
      pod=\"$pod\", cluster=\"$cluster\", container!=\"\"}) by (container)","legendFormat":"__auto"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n    kube_pod_container_resource_requests{job=\"kube-state-metrics\",
      cluster=\"$cluster\", namespace=\"$namespace\", pod=\"$pod\", resource=\"cpu\"}\n)\n","legendFormat":"requests"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n    kube_pod_container_resource_limits{job=\"kube-state-metrics\",
      cluster=\"$cluster\", namespace=\"$namespace\", pod=\"$pod\", resource=\"cpu\"}\n)\n","legendFormat":"limits"}],"title":"CPU
      Usage","type":"timeseries"},{"datasource":{"type":"datasource","uid":"-- Mixed
      --"},"fieldConfig":{"defaults":{"custom":{"axisColorMode":"thresholds","axisSoftMax":1,"axisSoftMin":0,"fillOpacity":10,"showPoints":"never","spanNulls":true,"thresholdsStyle":{"mode":"dashed+area"}},"unit":"percentunit"},"overrides":[{"matcher":{"id":"byFrameRefID","options":"A"},"properties":[{"id":"thresholds","value":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":0.25}]}},{"id":"color","value":{"mode":"thresholds","seriesBy":"lastNotNull"}}]}]},"gridPos":{"h":7,"w":24,"x":0,"y":7},"id":2,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(increase(container_cpu_cfs_throttled_periods_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", namespace=\"$namespace\", pod=\"$pod\",
      container!=\"\", cluster=\"$cluster\"}[$__rate_interval])) by (container) /sum(increase(container_cpu_cfs_periods_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", namespace=\"$namespace\", pod=\"$pod\",
      container!=\"\", cluster=\"$cluster\"}[$__rate_interval])) by (container)","legendFormat":"__auto"}],"title":"CPU
      Throttling","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"overrides":[{"matcher":{"id":"byRegexp","options":"/%/"},"properties":[{"id":"unit","value":"percentunit"}]}]},"gridPos":{"h":7,"w":24,"x":0,"y":14},"id":3,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\",
      namespace=\"$namespace\", pod=\"$pod\", container!=\"\"}) by (container)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(cluster:namespace:pod_cpu:active:kube_pod_container_resource_requests{cluster=\"$cluster\",
      namespace=\"$namespace\", pod=\"$pod\", container!=\"\"}) by (container)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\",
      namespace=\"$namespace\", pod=\"$pod\", container!=\"\"}) by (container) / sum(cluster:namespace:pod_cpu:active:kube_pod_container_resource_requests{cluster=\"$cluster\",
      namespace=\"$namespace\", pod=\"$pod\", container!=\"\"}) by (container)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(cluster:namespace:pod_cpu:active:kube_pod_container_resource_limits{cluster=\"$cluster\",
      namespace=\"$namespace\", pod=\"$pod\", container!=\"\"}) by (container)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\",
      namespace=\"$namespace\", pod=\"$pod\", container!=\"\"}) by (container) / sum(cluster:namespace:pod_cpu:active:kube_pod_container_resource_limits{cluster=\"$cluster\",
      namespace=\"$namespace\", pod=\"$pod\", container!=\"\"}) by (container)","format":"table","instant":true}],"title":"CPU
      Quota","transformations":[{"id":"joinByField","options":{"byField":"container","mode":"outer"}},{"id":"organize","options":{"excludeByName":{"Time":true,"Time
      1":true,"Time 2":true,"Time 3":true,"Time 4":true,"Time 5":true},"indexByName":{"Time
      1":0,"Time 2":1,"Time 3":2,"Time 4":3,"Time 5":4,"Value #A":6,"Value #B":7,"Value
      #C":8,"Value #D":9,"Value #E":10,"container":5},"renameByName":{"Value #A":"CPU
      Usage","Value #B":"CPU Requests","Value #C":"CPU Requests %","Value #D":"CPU
      Limits","Value #E":"CPU Limits %","container":"Container"}}}],"type":"table"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"bytes"},"overrides":[{"matcher":{"id":"byFrameRefID","options":"B"},"properties":[{"id":"custom.lineStyle","value":{"fill":"dash"}},{"id":"custom.lineWidth","value":2},{"id":"color","value":{"fixedColor":"red","mode":"fixed"}}]},{"matcher":{"id":"byFrameRefID","options":"C"},"properties":[{"id":"custom.lineStyle","value":{"fill":"dash"}},{"id":"custom.lineWidth","value":2},{"id":"color","value":{"fixedColor":"orange","mode":"fixed"}}]}]},"gridPos":{"h":7,"w":24,"x":0,"y":21},"id":4,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(container_memory_working_set_bytes{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",
      pod=\"$pod\", container!=\"\", image!=\"\"}) by (container)","legendFormat":"__auto"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n    kube_pod_container_resource_requests{job=\"kube-state-metrics\",
      cluster=\"$cluster\", namespace=\"$namespace\", pod=\"$pod\", resource=\"memory\"}\n)\n","legendFormat":"requests"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n    kube_pod_container_resource_limits{job=\"kube-state-metrics\",
      cluster=\"$cluster\", namespace=\"$namespace\", pod=\"$pod\", resource=\"memory\"}\n)\n","legendFormat":"limits"}],"title":"Memory
      Usage (WSS)","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"unit":"bytes"},"overrides":[{"matcher":{"id":"byRegexp","options":"/%/"},"properties":[{"id":"unit","value":"percentunit"}]}]},"gridPos":{"h":7,"w":24,"x":0,"y":28},"id":5,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(container_memory_working_set_bytes{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",
      pod=\"$pod\", container!=\"\", image!=\"\"}) by (container)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(cluster:namespace:pod_memory:active:kube_pod_container_resource_requests{cluster=\"$cluster\",
      namespace=\"$namespace\", pod=\"$pod\"}) by (container)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(container_memory_working_set_bytes{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",
      pod=\"$pod\", image!=\"\"}) by (container) / sum(cluster:namespace:pod_memory:active:kube_pod_container_resource_requests{cluster=\"$cluster\",
      namespace=\"$namespace\", pod=\"$pod\"}) by (container)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(cluster:namespace:pod_memory:active:kube_pod_container_resource_limits{cluster=\"$cluster\",
      namespace=\"$namespace\", pod=\"$pod\"}) by (container)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(container_memory_working_set_bytes{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",
      pod=\"$pod\", container!=\"\", image!=\"\"}) by (container) / sum(cluster:namespace:pod_memory:active:kube_pod_container_resource_limits{cluster=\"$cluster\",
      namespace=\"$namespace\", pod=\"$pod\"}) by (container)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(container_memory_rss{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",
      pod=\"$pod\", container != \"\", container != \"POD\"}) by (container)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(container_memory_cache{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",
      pod=\"$pod\", container != \"\", container != \"POD\"}) by (container)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(container_memory_swap{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",
      pod=\"$pod\", container != \"\", container != \"POD\"}) by (container)","format":"table","instant":true}],"title":"Memory
      Quota","transformations":[{"id":"joinByField","options":{"byField":"container","mode":"outer"}},{"id":"organize","options":{"excludeByName":{"Time":true,"Time
      1":true,"Time 2":true,"Time 3":true,"Time 4":true,"Time 5":true,"Time 6":true,"Time
      7":true,"Time 8":true},"indexByName":{"Time 1":0,"Time 2":1,"Time 3":2,"Time
      4":3,"Time 5":4,"Time 6":5,"Time 7":6,"Time 8":7,"Value #A":9,"Value #B":10,"Value
      #C":11,"Value #D":12,"Value #E":13,"Value #F":14,"Value #G":15,"Value #H":16,"container":8},"renameByName":{"Value
      #A":"Memory Usage","Value #B":"Memory Requests","Value #C":"Memory Requests
      %","Value #D":"Memory Limits","Value #E":"Memory Limits %","Value #F":"Memory
      Usage (RSS)","Value #G":"Memory Usage (Cache)","Value #H":"Memory Usage (Swap)","container":"Container"}}}],"type":"table"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"Bps"}},"gridPos":{"h":7,"w":12,"x":0,"y":35},"id":6,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(irate(container_network_receive_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",
      pod=~\"$pod\"}[$__rate_interval])) by (pod)","legendFormat":"__auto"}],"title":"Receive
      Bandwidth","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"Bps"}},"gridPos":{"h":7,"w":12,"x":12,"y":35},"id":7,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_transmit_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",
      pod=~\"$pod\"}[$__rate_interval])) by (pod)","legendFormat":"__auto"}],"title":"Transmit
      Bandwidth","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":7,"w":12,"x":0,"y":42},"id":8,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_receive_packets_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",
      pod=~\"$pod\"}[$__rate_interval])) by (pod)","legendFormat":"__auto"}],"title":"Rate
      of Received Packets","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":7,"w":12,"x":12,"y":42},"id":9,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_transmit_packets_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",
      pod=~\"$pod\"}[$__rate_interval])) by (pod)","legendFormat":"__auto"}],"title":"Rate
      of Transmitted Packets","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":7,"w":12,"x":0,"y":49},"id":10,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_receive_packets_dropped_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",
      pod=~\"$pod\"}[$__rate_interval])) by (pod)","legendFormat":"__auto"}],"title":"Rate
      of Received Packets Dropped","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":7,"w":12,"x":12,"y":49},"id":11,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_transmit_packets_dropped_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",
      pod=~\"$pod\"}[$__rate_interval])) by (pod)","legendFormat":"__auto"}],"title":"Rate
      of Transmitted Packets Dropped","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"iops"}},"gridPos":{"h":7,"w":12,"x":0,"y":56},"id":12,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"ceil(sum
      by(pod) (rate(container_fs_reads_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace=\"$namespace\", pod=~\"$pod\"}[$__rate_interval])))","legendFormat":"Reads"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"ceil(sum
      by(pod) (rate(container_fs_writes_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\",namespace=\"$namespace\", pod=~\"$pod\"}[$__rate_interval])))","legendFormat":"Writes"}],"title":"IOPS
      (Pod)","type":"timeseries"},{"datasource":{"type":"datasource","uid":"-- Mixed
      --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"Bps"}},"gridPos":{"h":7,"w":12,"x":12,"y":56},"id":13,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by(pod) (rate(container_fs_reads_bytes_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace=\"$namespace\", pod=~\"$pod\"}[$__rate_interval]))","legendFormat":"Reads"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by(pod) (rate(container_fs_writes_bytes_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace=\"$namespace\", pod=~\"$pod\"}[$__rate_interval]))","legendFormat":"Writes"}],"title":"ThroughPut
      (Pod)","type":"timeseries"},{"datasource":{"type":"datasource","uid":"-- Mixed
      --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"iops"}},"gridPos":{"h":7,"w":12,"x":0,"y":63},"id":14,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"ceil(sum
      by(container) (rate(container_fs_reads_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      container!=\"\", cluster=\"$cluster\", namespace=\"$namespace\", pod=\"$pod\"}[$__rate_interval])
      + rate(container_fs_writes_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      container!=\"\", cluster=\"$cluster\", namespace=\"$namespace\", pod=\"$pod\"}[$__rate_interval])))","legendFormat":"__auto"}],"title":"IOPS
      (Containers)","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"Bps"}},"gridPos":{"h":7,"w":12,"x":12,"y":63},"id":15,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by(container) (rate(container_fs_reads_bytes_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      container!=\"\", cluster=\"$cluster\", namespace=\"$namespace\", pod=\"$pod\"}[$__rate_interval])
      + rate(container_fs_writes_bytes_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      container!=\"\", cluster=\"$cluster\", namespace=\"$namespace\", pod=\"$pod\"}[$__rate_interval]))","legendFormat":"__auto"}],"title":"ThroughPut
      (Containers)","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"overrides":[{"matcher":{"id":"byRegexp","options":"/IOPS/"},"properties":[{"id":"unit","value":"iops"}]},{"matcher":{"id":"byRegexp","options":"/Throughput/"},"properties":[{"id":"unit","value":"Bps"}]}]},"gridPos":{"h":7,"w":24,"x":0,"y":70},"id":16,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by(container) (rate(container_fs_reads_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace=\"$namespace\", pod=\"$pod\"}[$__rate_interval]))","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by(container) (rate(container_fs_writes_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace=\"$namespace\", pod=\"$pod\"}[$__rate_interval]))","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by(container) (rate(container_fs_reads_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace=\"$namespace\", pod=\"$pod\"}[$__rate_interval])
      + rate(container_fs_writes_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace=\"$namespace\", pod=\"$pod\"}[$__rate_interval]))","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by(container) (rate(container_fs_reads_bytes_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace=\"$namespace\", pod=\"$pod\"}[$__rate_interval]))","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by(container) (rate(container_fs_writes_bytes_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace=\"$namespace\", pod=\"$pod\"}[$__rate_interval]))","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by(container) (rate(container_fs_reads_bytes_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace=\"$namespace\", pod=\"$pod\"}[$__rate_interval])
      + rate(container_fs_writes_bytes_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\",
      device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\",
      container!=\"\", cluster=\"$cluster\", namespace=\"$namespace\", pod=\"$pod\"}[$__rate_interval]))","format":"table","instant":true}],"title":"Current
      Storage IO","transformations":[{"id":"joinByField","options":{"byField":"container","mode":"outer"}},{"id":"organize","options":{"excludeByName":{"Time":true,"Time
      1":true,"Time 2":true,"Time 3":true,"Time 4":true,"Time 5":true,"Time 6":true},"indexByName":{"Time
      1":0,"Time 2":1,"Time 3":2,"Time 4":3,"Time 5":4,"Time 6":5,"Value #A":7,"Value
      #B":8,"Value #C":9,"Value #D":10,"Value #E":11,"Value #F":12,"container":6},"renameByName":{"Value
      #A":"IOPS(Reads)","Value #B":"IOPS(Writes)","Value #C":"IOPS(Reads + Writes)","Value
      #D":"Throughput(Read)","Value #E":"Throughput(Write)","Value #F":"Throughput(Read
      + Write)","container":"Container"}}}],"type":"table"}],"refresh":"10s","schemaVersion":39,"tags":["kubernetes-mixin"],"templating":{"list":[{"current":{"selected":true,"text":"default","value":"default"},"hide":0,"label":"Data
      source","name":"datasource","query":"prometheus","regex":"","type":"datasource"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":2,"label":"cluster","name":"cluster","query":"label_values(up{job=\"kube-state-metrics\"},
      cluster)","refresh":2,"sort":1,"type":"query","allValue":".*"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":0,"label":"namespace","name":"namespace","query":"label_values(kube_namespace_status_phase{job=\"kube-state-metrics\",
      cluster=\"$cluster\"}, namespace)","refresh":2,"sort":1,"type":"query"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":0,"label":"pod","name":"pod","query":"label_values(kube_pod_info{job=\"kube-state-metrics\",
      cluster=\"$cluster\", namespace=\"$namespace\"}, pod)","refresh":2,"sort":1,"type":"query"}]},"time":{"from":"now-1h","to":"now"},"timezone":
      "utc","title":"Kubernetes / Compute Resources / Pod","uid":"6581e46e4e5c7ba40a07646395ef7b23"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-k8s-resources-pod
    namespace: tomer
    resourceVersion: "2297449"
    uid: 7d6e4f83-6ac3-4da7-b9b5-d055fdace12a
- apiVersion: v1
  data:
    k8s-resources-workload.json: '{"editable":true,"links":[{"asDropdown":true,"includeVars":true,"keepTime":true,"tags":["kubernetes-mixin"],"targetBlank":false,"title":"Kubernetes","type":"dashboards"}],"panels":[{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true}}},"gridPos":{"h":7,"w":24,"x":0,"y":0},"id":1,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n    node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\",
      namespace=\"$namespace\"}\n  * on(namespace,pod)\n    group_left(workload, workload_type)
      namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\", namespace=\"$namespace\",
      workload=\"$workload\", workload_type=~\"$type\"}\n) by (pod)\n","legendFormat":"__auto"}],"title":"CPU
      Usage","type":"timeseries"},{"datasource":{"type":"datasource","uid":"-- Mixed
      --"},"fieldConfig":{"overrides":[{"matcher":{"id":"byRegexp","options":"/%/"},"properties":[{"id":"unit","value":"percentunit"}]},{"matcher":{"id":"byName","options":"Pod"},"properties":[{"id":"links","value":[{"title":"Drill
      down to pods","url":"/d/6581e46e4e5c7ba40a07646395ef7b23/k8s-resources-pod?${datasource:queryparam}&var-cluster=$cluster&var-namespace=$namespace&var-pod=${__data.fields.Pod}"}]}]}]},"gridPos":{"h":7,"w":24,"x":0,"y":7},"id":2,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n    node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\",
      namespace=\"$namespace\"}\n  * on(namespace,pod)\n    group_left(workload, workload_type)
      namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\", namespace=\"$namespace\",
      workload=\"$workload\", workload_type=~\"$type\"}\n) by (pod)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n    kube_pod_container_resource_requests{job=\"kube-state-metrics\",
      cluster=\"$cluster\", namespace=\"$namespace\", resource=\"cpu\"}\n  * on(namespace,pod)\n    group_left(workload,
      workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=\"$workload\", workload_type=~\"$type\"}\n)
      by (pod)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n    node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\",
      namespace=\"$namespace\"}\n  * on(namespace,pod)\n    group_left(workload, workload_type)
      namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\", namespace=\"$namespace\",
      workload=\"$workload\", workload_type=~\"$type\"}\n) by (pod)\n/sum(\n    kube_pod_container_resource_requests{job=\"kube-state-metrics\",
      cluster=\"$cluster\", namespace=\"$namespace\", resource=\"cpu\"}\n  * on(namespace,pod)\n    group_left(workload,
      workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=\"$workload\", workload_type=~\"$type\"}\n)
      by (pod)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n    kube_pod_container_resource_limits{job=\"kube-state-metrics\",
      cluster=\"$cluster\", namespace=\"$namespace\", resource=\"cpu\"}\n  * on(namespace,pod)\n    group_left(workload,
      workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=\"$workload\", workload_type=~\"$type\"}\n)
      by (pod)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n    node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\",
      namespace=\"$namespace\"}\n  * on(namespace,pod)\n    group_left(workload, workload_type)
      namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\", namespace=\"$namespace\",
      workload=\"$workload\", workload_type=~\"$type\"}\n) by (pod)\n/sum(\n    kube_pod_container_resource_limits{job=\"kube-state-metrics\",
      cluster=\"$cluster\", namespace=\"$namespace\", resource=\"cpu\"}\n  * on(namespace,pod)\n    group_left(workload,
      workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=\"$workload\", workload_type=~\"$type\"}\n)
      by (pod)\n","format":"table","instant":true}],"title":"CPU Quota","transformations":[{"id":"joinByField","options":{"byField":"pod","mode":"outer"}},{"id":"organize","options":{"excludeByName":{"Time":true,"Time
      1":true,"Time 2":true,"Time 3":true,"Time 4":true,"Time 5":true},"indexByName":{"Time
      1":0,"Time 2":1,"Time 3":2,"Time 4":3,"Time 5":4,"Value #A":6,"Value #B":7,"Value
      #C":8,"Value #D":9,"Value #E":10,"pod":5},"renameByName":{"Value #A":"CPU Usage","Value
      #B":"CPU Requests","Value #C":"CPU Requests %","Value #D":"CPU Limits","Value
      #E":"CPU Limits %","pod":"Pod"}}}],"type":"table"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"bytes"}},"gridPos":{"h":7,"w":24,"x":0,"y":14},"id":3,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n    container_memory_working_set_bytes{cluster=\"$cluster\",
      namespace=\"$namespace\", container!=\"\", image!=\"\"}\n  * on(namespace,pod)\n    group_left(workload,
      workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=\"$workload\", workload_type=~\"$type\"}\n)
      by (pod)\n","legendFormat":"__auto"}],"title":"Memory Usage","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"unit":"bytes"},"overrides":[{"matcher":{"id":"byRegexp","options":"/%/"},"properties":[{"id":"unit","value":"percentunit"}]},{"matcher":{"id":"byName","options":"Pod"},"properties":[{"id":"links","value":[{"title":"Drill
      down to pods","url":"/d/6581e46e4e5c7ba40a07646395ef7b23/k8s-resources-pod?${datasource:queryparam}&var-cluster=$cluster&var-namespace=$namespace&var-pod=${__data.fields.Pod}"}]}]}]},"gridPos":{"h":7,"w":24,"x":0,"y":21},"id":4,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n    container_memory_working_set_bytes{cluster=\"$cluster\",
      namespace=\"$namespace\", container!=\"\", image!=\"\"}\n  * on(namespace,pod)\n    group_left(workload,
      workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=\"$workload\", workload_type=~\"$type\"}\n)
      by (pod)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n    kube_pod_container_resource_requests{job=\"kube-state-metrics\",
      cluster=\"$cluster\", namespace=\"$namespace\", resource=\"memory\"}\n  * on(namespace,pod)\n    group_left(workload,
      workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=\"$workload\", workload_type=~\"$type\"}\n)
      by (pod)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n    container_memory_working_set_bytes{cluster=\"$cluster\",
      namespace=\"$namespace\", container!=\"\", image!=\"\"}\n  * on(namespace,pod)\n    group_left(workload,
      workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=\"$workload\", workload_type=~\"$type\"}\n)
      by (pod)\n/sum(\n    kube_pod_container_resource_requests{job=\"kube-state-metrics\",
      cluster=\"$cluster\", namespace=\"$namespace\", resource=\"memory\"}\n  * on(namespace,pod)\n    group_left(workload,
      workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=\"$workload\", workload_type=~\"$type\"}\n)
      by (pod)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n    kube_pod_container_resource_limits{job=\"kube-state-metrics\",
      cluster=\"$cluster\", namespace=\"$namespace\", resource=\"memory\"}\n  * on(namespace,pod)\n    group_left(workload,
      workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=\"$workload\", workload_type=~\"$type\"}\n)
      by (pod)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n    container_memory_working_set_bytes{cluster=\"$cluster\",
      namespace=\"$namespace\", container!=\"\", image!=\"\"}\n  * on(namespace,pod)\n    group_left(workload,
      workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=\"$workload\", workload_type=~\"$type\"}\n)
      by (pod)\n/sum(\n    kube_pod_container_resource_limits{job=\"kube-state-metrics\",
      cluster=\"$cluster\", namespace=\"$namespace\", resource=\"memory\"}\n  * on(namespace,pod)\n    group_left(workload,
      workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=\"$workload\", workload_type=~\"$type\"}\n)
      by (pod)\n","format":"table","instant":true}],"title":"Memory Quota","transformations":[{"id":"joinByField","options":{"byField":"pod","mode":"outer"}},{"id":"organize","options":{"excludeByName":{"Time":true,"Time
      1":true,"Time 2":true,"Time 3":true,"Time 4":true,"Time 5":true},"indexByName":{"Time
      1":0,"Time 2":1,"Time 3":2,"Time 4":3,"Time 5":4,"Value #A":9,"Value #B":10,"Value
      #C":11,"Value #D":12,"Value #E":13,"pod":8},"renameByName":{"Value #A":"Memory
      Usage","Value #B":"Memory Requests","Value #C":"Memory Requests %","Value #D":"Memory
      Limits","Value #E":"Memory Limits %","pod":"Pod"}}}],"type":"table"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"overrides":[{"matcher":{"id":"byRegexp","options":"/Bandwidth/"},"properties":[{"id":"unit","value":"Bps"}]},{"matcher":{"id":"byRegexp","options":"/Packets/"},"properties":[{"id":"unit","value":"pps"}]},{"matcher":{"id":"byName","options":"Pod"},"properties":[{"id":"links","value":[{"title":"Drill
      down to pods","url":"/d/6581e46e4e5c7ba40a07646395ef7b23/k8s-resources-pod?${datasource:queryparam}&var-cluster=$cluster&var-namespace=$namespace&var-pod=${__data.fields.Pod}"}]}]}]},"gridPos":{"h":7,"w":24,"x":0,"y":28},"id":5,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(sum(rate(container_network_receive_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=~\"$workload\", workload_type=~\"$type\"})
      by (pod))\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(sum(rate(container_network_transmit_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=~\"$workload\", workload_type=~\"$type\"})
      by (pod))\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(sum(rate(container_network_receive_packets_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=~\"$workload\", workload_type=~\"$type\"})
      by (pod))\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(sum(rate(container_network_transmit_packets_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=~\"$workload\", workload_type=~\"$type\"})
      by (pod))\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(sum(rate(container_network_receive_packets_dropped_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=~\"$workload\", workload_type=~\"$type\"})
      by (pod))\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(sum(rate(container_network_transmit_packets_dropped_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=~\"$workload\", workload_type=~\"$type\"})
      by (pod))\n","format":"table","instant":true}],"title":"Current Network Usage","transformations":[{"id":"joinByField","options":{"byField":"pod","mode":"outer"}},{"id":"organize","options":{"excludeByName":{"Time":true,"Time
      1":true,"Time 2":true,"Time 3":true,"Time 4":true,"Time 5":true,"Time 6":true},"indexByName":{"Time
      1":0,"Time 2":1,"Time 3":2,"Time 4":3,"Time 5":4,"Time 6":5,"Value #A":7,"Value
      #B":8,"Value #C":9,"Value #D":10,"Value #E":11,"Value #F":12,"pod":6},"renameByName":{"Value
      #A":"Current Receive Bandwidth","Value #B":"Current Transmit Bandwidth","Value
      #C":"Rate of Received Packets","Value #D":"Rate of Transmitted Packets","Value
      #E":"Rate of Received Packets Dropped","Value #F":"Rate of Transmitted Packets
      Dropped","pod":"Pod"}}}],"type":"table"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"Bps"}},"gridPos":{"h":7,"w":12,"x":0,"y":35},"id":6,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(sum(rate(container_network_receive_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=~\"$workload\", workload_type=~\"$type\"})
      by (pod))\n","legendFormat":"__auto"}],"title":"Receive Bandwidth","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"Bps"}},"gridPos":{"h":7,"w":12,"x":12,"y":35},"id":7,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(sum(rate(container_network_transmit_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=~\"$workload\", workload_type=~\"$type\"})
      by (pod))\n","legendFormat":"__auto"}],"title":"Transmit Bandwidth","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"Bps"}},"gridPos":{"h":7,"w":12,"x":0,"y":42},"id":8,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(avg(rate(container_network_receive_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=~\"$workload\", workload_type=~\"$type\"})
      by (pod))\n","legendFormat":"__auto"}],"title":"Average Container Bandwidth
      by Pod: Received","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"Bps"}},"gridPos":{"h":7,"w":12,"x":12,"y":42},"id":9,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(avg(rate(container_network_transmit_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=~\"$workload\", workload_type=~\"$type\"})
      by (pod))\n","legendFormat":"__auto"}],"title":"Average Container Bandwidth
      by Pod: Transmitted","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":7,"w":12,"x":0,"y":49},"id":10,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(sum(rate(container_network_receive_packets_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=~\"$workload\", workload_type=~\"$type\"})
      by (pod))\n","legendFormat":"__auto"}],"title":"Rate of Received Packets","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":7,"w":12,"x":12,"y":49},"id":11,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(sum(rate(container_network_transmit_packets_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=~\"$workload\", workload_type=~\"$type\"})
      by (pod))\n","legendFormat":"__auto"}],"title":"Rate of Transmitted Packets","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":7,"w":12,"x":0,"y":56},"id":12,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(sum(rate(container_network_receive_packets_dropped_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=~\"$workload\", workload_type=~\"$type\"})
      by (pod))\n","legendFormat":"__auto"}],"title":"Rate of Received Packets Dropped","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":7,"w":12,"x":12,"y":56},"id":13,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(sum(rate(container_network_transmit_packets_dropped_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=~\"$workload\", workload_type=~\"$type\"})
      by (pod))\n","legendFormat":"__auto"}],"title":"Rate of Transmitted Packets
      Dropped","type":"timeseries"}],"refresh":"10s","schemaVersion":39,"tags":["kubernetes-mixin"],"templating":{"list":[{"current":{"selected":true,"text":"default","value":"default"},"hide":0,"label":"Data
      source","name":"datasource","query":"prometheus","regex":"","type":"datasource"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":2,"label":"cluster","name":"cluster","query":"label_values(up{job=\"kube-state-metrics\"},
      cluster)","refresh":2,"sort":1,"type":"query","allValue":".*"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":0,"label":"namespace","name":"namespace","query":"label_values(kube_namespace_status_phase{job=\"kube-state-metrics\",
      cluster=\"$cluster\"}, namespace)","refresh":2,"sort":1,"type":"query"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":0,"includeAll":true,"label":"workload_type","name":"type","query":"label_values(namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\"}, workload_type)","refresh":2,"sort":1,"type":"query"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":0,"label":"workload","name":"workload","query":"label_values(namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload_type=~\"$type\"}, workload)","refresh":2,"sort":1,"type":"query"}]},"time":{"from":"now-1h","to":"now"},"timezone":
      "utc","title":"Kubernetes / Compute Resources / Workload","uid":"a164a7f0339f99e89cea5cb47e9be617"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-k8s-resources-workload
    namespace: tomer
    resourceVersion: "2297424"
    uid: a7b1ff00-8eff-4467-af0b-b707288b44b8
- apiVersion: v1
  data:
    k8s-resources-workloads-namespace.json: '{"editable":true,"links":[{"asDropdown":true,"includeVars":true,"keepTime":true,"tags":["kubernetes-mixin"],"targetBlank":false,"title":"Kubernetes","type":"dashboards"}],"panels":[{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true}},"overrides":[{"matcher":{"id":"byFrameRefID","options":"B"},"properties":[{"id":"custom.lineStyle","value":{"fill":"dash"}},{"id":"custom.lineWidth","value":2},{"id":"color","value":{"fixedColor":"red","mode":"fixed"}}]},{"matcher":{"id":"byFrameRefID","options":"C"},"properties":[{"id":"custom.lineStyle","value":{"fill":"dash"}},{"id":"custom.lineWidth","value":2},{"id":"color","value":{"fixedColor":"orange","mode":"fixed"}}]}]},"gridPos":{"h":7,"w":24,"x":0,"y":0},"id":1,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n  node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\",
      namespace=\"$namespace\"}\n* on(namespace,pod)\n  group_left(workload, workload_type)
      namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\", namespace=\"$namespace\",
      workload_type=~\"$type\"}\n) by (workload, workload_type)\n","legendFormat":"{{workload}}
      - {{workload_type}}"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"scalar(max(kube_resourcequota{cluster=\"$cluster\",
      namespace=\"$namespace\", type=\"hard\",resource=~\"requests.cpu|cpu\"}))","legendFormat":"quota
      - requests"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"scalar(max(kube_resourcequota{cluster=\"$cluster\",
      namespace=\"$namespace\", type=\"hard\",resource=~\"limits.cpu\"}))","legendFormat":"quota
      - limits"}],"title":"CPU Usage","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"overrides":[{"matcher":{"id":"byRegexp","options":"/%/"},"properties":[{"id":"unit","value":"percentunit"}]},{"matcher":{"id":"byName","options":"Workload"},"properties":[{"id":"links","value":[{"title":"Drill
      down to workloads","url":"/d/a164a7f0339f99e89cea5cb47e9be617/k8s-resources-workload?${datasource:queryparam}&var-cluster=$cluster&var-namespace=$namespace&var-type=${__data.fields.Type}&var-workload=${__data.fields.Workload}"}]}]},{"matcher":{"id":"byName","options":"Running
      Pods"},"properties":[{"id":"unit","value":"none"}]}]},"gridPos":{"h":7,"w":24,"x":0,"y":7},"id":2,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"count(namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload_type=~\"$type\"}) by (workload, workload_type)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n  node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\",
      namespace=\"$namespace\"}\n* on(namespace,pod)\n  group_left(workload, workload_type)
      namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\", namespace=\"$namespace\",
      workload_type=~\"$type\"}\n) by (workload, workload_type)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n  kube_pod_container_resource_requests{job=\"kube-state-metrics\",
      cluster=\"$cluster\", namespace=\"$namespace\", resource=\"cpu\"}\n* on(namespace,pod)\n  group_left(workload,
      workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload_type=~\"$type\"}\n) by (workload, workload_type)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n  node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\",
      namespace=\"$namespace\"}\n* on(namespace,pod)\n  group_left(workload, workload_type)
      namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\", namespace=\"$namespace\",
      workload_type=~\"$type\"}\n) by (workload, workload_type)\n/sum(\n  kube_pod_container_resource_requests{job=\"kube-state-metrics\",
      cluster=\"$cluster\", namespace=\"$namespace\", resource=\"cpu\"}\n* on(namespace,pod)\n  group_left(workload,
      workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload_type=~\"$type\"}\n) by (workload, workload_type)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n  kube_pod_container_resource_limits{job=\"kube-state-metrics\",
      cluster=\"$cluster\", namespace=\"$namespace\", resource=\"cpu\"}\n* on(namespace,pod)\n  group_left(workload,
      workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload_type=~\"$type\"}\n) by (workload, workload_type)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n  node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\",
      namespace=\"$namespace\"}\n* on(namespace,pod)\n  group_left(workload, workload_type)
      namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\", namespace=\"$namespace\",
      workload_type=~\"$type\"}\n) by (workload, workload_type)\n/sum(\n  kube_pod_container_resource_limits{job=\"kube-state-metrics\",
      cluster=\"$cluster\", namespace=\"$namespace\", resource=\"cpu\"}\n* on(namespace,pod)\n  group_left(workload,
      workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload_type=~\"$type\"}\n) by (workload, workload_type)\n","format":"table","instant":true}],"title":"CPU
      Quota","transformations":[{"id":"joinByField","options":{"byField":"workload","mode":"outer"}},{"id":"organize","options":{"excludeByName":{"Time":true,"Time
      1":true,"Time 2":true,"Time 3":true,"Time 4":true,"Time 5":true,"Time 6":true,"workload_type
      2":true,"workload_type 3":true,"workload_type 4":true,"workload_type 5":true,"workload_type
      6":true},"indexByName":{"Time 1":0,"Time 2":1,"Time 3":2,"Time 4":3,"Time 5":4,"Time
      6":5,"Value #A":8,"Value #B":9,"Value #C":10,"Value #D":11,"Value #E":12,"Value
      #F":13,"workload":6,"workload_type 1":7,"workload_type 2":14,"workload_type
      3":15,"workload_type 4":16,"workload_type 5":17,"workload_type 6":18},"renameByName":{"Value
      #A":"Running Pods","Value #B":"CPU Usage","Value #C":"CPU Requests","Value #D":"CPU
      Requests %","Value #E":"CPU Limits","Value #F":"CPU Limits %","workload":"Workload","workload_type
      1":"Type"}}}],"type":"table"},{"datasource":{"type":"datasource","uid":"-- Mixed
      --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"bytes"},"overrides":[{"matcher":{"id":"byFrameRefID","options":"B"},"properties":[{"id":"custom.lineStyle","value":{"fill":"dash"}},{"id":"custom.lineWidth","value":2},{"id":"color","value":{"fixedColor":"red","mode":"fixed"}}]},{"matcher":{"id":"byFrameRefID","options":"C"},"properties":[{"id":"custom.lineStyle","value":{"fill":"dash"}},{"id":"custom.lineWidth","value":2},{"id":"color","value":{"fixedColor":"orange","mode":"fixed"}}]}]},"gridPos":{"h":7,"w":24,"x":0,"y":14},"id":3,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n    container_memory_working_set_bytes{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",
      container!=\"\", image!=\"\"}\n  * on(namespace,pod)\n    group_left(workload,
      workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload_type=~\"$type\"}\n) by (workload, workload_type)\n","legendFormat":"{{workload}}
      - {{workload_type}}"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"scalar(max(kube_resourcequota{cluster=\"$cluster\",
      namespace=\"$namespace\", type=\"hard\",resource=~\"requests.memory|memory\"}))","legendFormat":"quota
      - requests"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"scalar(max(kube_resourcequota{cluster=\"$cluster\",
      namespace=\"$namespace\", type=\"hard\",resource=~\"limits.memory\"}))","legendFormat":"quota
      - limits"}],"title":"Memory Usage","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"unit":"bytes"},"overrides":[{"matcher":{"id":"byRegexp","options":"/%/"},"properties":[{"id":"unit","value":"percentunit"}]},{"matcher":{"id":"byName","options":"Workload"},"properties":[{"id":"links","value":[{"title":"Drill
      down to workloads","url":"/d/a164a7f0339f99e89cea5cb47e9be617/k8s-resources-workload?${datasource:queryparam}&var-cluster=$cluster&var-namespace=$namespace&var-type=${__data.fields.Type}&var-workload=${__data.fields.Workload}"}]}]},{"matcher":{"id":"byName","options":"Running
      Pods"},"properties":[{"id":"unit","value":"none"}]}]},"gridPos":{"h":7,"w":24,"x":0,"y":21},"id":4,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"count(namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload_type=~\"$type\"}) by (workload, workload_type)","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n    container_memory_working_set_bytes{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",
      container!=\"\", image!=\"\"}\n  * on(namespace,pod)\n    group_left(workload,
      workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload_type=~\"$type\"}\n) by (workload, workload_type)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n  kube_pod_container_resource_requests{job=\"kube-state-metrics\",
      cluster=\"$cluster\", namespace=\"$namespace\", resource=\"memory\"}\n* on(namespace,pod)\n  group_left(workload,
      workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload_type=~\"$type\"}\n) by (workload, workload_type)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n    container_memory_working_set_bytes{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",
      container!=\"\", image!=\"\"}\n  * on(namespace,pod)\n    group_left(workload,
      workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload_type=~\"$type\"}\n) by (workload, workload_type)\n/sum(\n  kube_pod_container_resource_requests{job=\"kube-state-metrics\",
      cluster=\"$cluster\", namespace=\"$namespace\", resource=\"memory\"}\n* on(namespace,pod)\n  group_left(workload,
      workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload_type=~\"$type\"}\n) by (workload, workload_type)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n  kube_pod_container_resource_limits{job=\"kube-state-metrics\",
      cluster=\"$cluster\", namespace=\"$namespace\", resource=\"memory\"}\n* on(namespace,pod)\n  group_left(workload,
      workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload_type=~\"$type\"}\n) by (workload, workload_type)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(\n    container_memory_working_set_bytes{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\",
      container!=\"\", image!=\"\"}\n  * on(namespace,pod)\n    group_left(workload,
      workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload_type=~\"$type\"}\n) by (workload, workload_type)\n/sum(\n  kube_pod_container_resource_limits{job=\"kube-state-metrics\",
      cluster=\"$cluster\", namespace=\"$namespace\", resource=\"memory\"}\n* on(namespace,pod)\n  group_left(workload,
      workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload_type=~\"$type\"}\n) by (workload, workload_type)\n","format":"table","instant":true}],"title":"Memory
      Quota","transformations":[{"id":"joinByField","options":{"byField":"workload","mode":"outer"}},{"id":"organize","options":{"excludeByName":{"Time":true,"Time
      1":true,"Time 2":true,"Time 3":true,"Time 4":true,"Time 5":true,"Time 6":true,"workload_type
      2":true,"workload_type 3":true,"workload_type 4":true,"workload_type 5":true,"workload_type
      6":true},"indexByName":{"Time 1":0,"Time 2":1,"Time 3":2,"Time 4":3,"Time 5":4,"Time
      6":5,"Value #A":8,"Value #B":9,"Value #C":10,"Value #D":11,"Value #E":12,"Value
      #F":13,"workload":6,"workload_type 1":7,"workload_type 2":14,"workload_type
      3":15,"workload_type 4":16,"workload_type 5":17,"workload_type 6":18},"renameByName":{"Value
      #A":"Running Pods","Value #B":"Memory Usage","Value #C":"Memory Requests","Value
      #D":"Memory Requests %","Value #E":"Memory Limits","Value #F":"Memory Limits
      %","workload":"Workload","workload_type 1":"Type"}}}],"type":"table"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"overrides":[{"matcher":{"id":"byRegexp","options":"/Bandwidth/"},"properties":[{"id":"unit","value":"Bps"}]},{"matcher":{"id":"byRegexp","options":"/Packets/"},"properties":[{"id":"unit","value":"pps"}]},{"matcher":{"id":"byName","options":"Workload"},"properties":[{"id":"links","value":[{"title":"Drill
      down to workloads","url":"/d/a164a7f0339f99e89cea5cb47e9be617/k8s-resources-workload?${datasource:queryparam}&var-cluster=$cluster&var-namespace=$namespace&var-type=${__data.fields.Type}&var-workload=${__data.fields.Workload}"}]}]}]},"gridPos":{"h":7,"w":24,"x":0,"y":28},"id":5,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(sum(rate(container_network_receive_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload_type=~\"$type\"}) by (workload))\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(sum(rate(container_network_transmit_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload_type=~\"$type\"}) by (workload))\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(sum(rate(container_network_receive_packets_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload_type=~\"$type\"}) by (workload))\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(sum(rate(container_network_transmit_packets_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload_type=~\"$type\"}) by (workload))\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(sum(rate(container_network_receive_packets_dropped_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload_type=~\"$type\"}) by (workload))\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(sum(rate(container_network_transmit_packets_dropped_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload_type=~\"$type\"}) by (workload))\n","format":"table","instant":true}],"title":"Current
      Network Usage","transformations":[{"id":"joinByField","options":{"byField":"workload","mode":"outer"}},{"id":"organize","options":{"excludeByName":{"Time":true,"Time
      1":true,"Time 2":true,"Time 3":true,"Time 4":true,"Time 5":true,"Time 6":true},"indexByName":{"Time
      1":0,"Time 2":1,"Time 3":2,"Time 4":3,"Time 5":4,"Time 6":5,"Value #A":7,"Value
      #B":8,"Value #C":9,"Value #D":10,"Value #E":11,"Value #F":12,"workload":6},"renameByName":{"Value
      #A":"Current Receive Bandwidth","Value #B":"Current Transmit Bandwidth","Value
      #C":"Rate of Received Packets","Value #D":"Rate of Transmitted Packets","Value
      #E":"Rate of Received Packets Dropped","Value #F":"Rate of Transmitted Packets
      Dropped","workload":"Workload"}}}],"type":"table"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"Bps"}},"gridPos":{"h":7,"w":12,"x":0,"y":35},"id":6,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(sum(rate(container_network_receive_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=~\".+\", workload_type=~\"$type\"}) by (workload))\n","legendFormat":"__auto"}],"title":"Receive
      Bandwidth","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"Bps"}},"gridPos":{"h":7,"w":12,"x":12,"y":35},"id":7,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(sum(rate(container_network_transmit_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=~\".+\", workload_type=~\"$type\"}) by (workload))\n","legendFormat":"__auto"}],"title":"Transmit
      Bandwidth","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"Bps"}},"gridPos":{"h":7,"w":12,"x":0,"y":42},"id":8,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(avg(rate(container_network_receive_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=~\".+\", workload_type=~\"$type\"}) by (workload))\n","legendFormat":"__auto"}],"title":"Average
      Container Bandwidth by Workload: Received","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"Bps"}},"gridPos":{"h":7,"w":12,"x":12,"y":42},"id":9,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(avg(rate(container_network_transmit_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=~\".+\", workload_type=~\"$type\"}) by (workload))\n","legendFormat":"__auto"}],"title":"Average
      Container Bandwidth by Workload: Transmitted","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":7,"w":12,"x":0,"y":49},"id":10,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(sum(rate(container_network_receive_packets_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=~\".+\", workload_type=~\"$type\"}) by (workload))\n","legendFormat":"__auto"}],"title":"Rate
      of Received Packets","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":7,"w":12,"x":12,"y":49},"id":11,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(sum(rate(container_network_transmit_packets_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=~\".+\", workload_type=~\"$type\"}) by (workload))\n","legendFormat":"__auto"}],"title":"Rate
      of Transmitted Packets","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":7,"w":12,"x":0,"y":56},"id":12,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(sum(rate(container_network_receive_packets_dropped_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=~\".+\", workload_type=~\"$type\"}) by (workload))\n","legendFormat":"__auto"}],"title":"Rate
      of Received Packets Dropped","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":7,"w":12,"x":12,"y":56},"id":13,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(sum(rate(container_network_transmit_packets_dropped_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=~\".+\", workload_type=~\"$type\"}) by (workload))\n","legendFormat":"__auto"}],"title":"Rate
      of Transmitted Packets Dropped","type":"timeseries"}],"refresh":"10s","schemaVersion":39,"tags":["kubernetes-mixin"],"templating":{"list":[{"current":{"selected":true,"text":"default","value":"default"},"hide":0,"label":"Data
      source","name":"datasource","query":"prometheus","regex":"","type":"datasource"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":2,"label":"cluster","name":"cluster","query":"label_values(up{job=\"kube-state-metrics\"},
      cluster)","refresh":2,"sort":1,"type":"query","allValue":".*"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":0,"label":"namespace","name":"namespace","query":"label_values(kube_namespace_status_phase{job=\"kube-state-metrics\",
      cluster=\"$cluster\"}, namespace)","refresh":2,"sort":1,"type":"query"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":0,"includeAll":true,"label":"workload_type","name":"type","query":"label_values(namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=~\".+\"}, workload_type)","refresh":2,"sort":1,"type":"query"}]},"time":{"from":"now-1h","to":"now"},"timezone":
      "utc","title":"Kubernetes / Compute Resources / Namespace (Workloads)","uid":"a87fb0d919ec0ea5f6543124e16c42a5"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-k8s-resources-workloads-namespace
    namespace: tomer
    resourceVersion: "2297421"
    uid: 14c97eab-4099-4785-a308-ce8325882f99
- apiVersion: v1
  data:
    kubelet.json: '{"editable":true,"links":[{"asDropdown":true,"includeVars":true,"keepTime":true,"tags":["kubernetes-mixin"],"targetBlank":false,"title":"Kubernetes","type":"dashboards"}],"panels":[{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"unit":"none"}},"gridPos":{"h":7,"w":4,"x":0,"y":0},"id":1,"interval":"1m","options":{"colorMode":"none"},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(kubelet_node_name{cluster=\"$cluster\",
      job=\"kubelet\", metrics_path=\"/metrics\"})","instant":true}],"title":"Running
      Kubelets","type":"stat"},{"datasource":{"type":"datasource","uid":"-- Mixed
      --"},"fieldConfig":{"defaults":{"unit":"none"}},"gridPos":{"h":7,"w":4,"x":4,"y":0},"id":2,"interval":"1m","options":{"colorMode":"none"},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(kubelet_running_pods{cluster=\"$cluster\",
      job=\"kubelet\", metrics_path=\"/metrics\", instance=~\"$instance\"})","instant":true}],"title":"Running
      Pods","type":"stat"},{"datasource":{"type":"datasource","uid":"-- Mixed --"},"fieldConfig":{"defaults":{"unit":"none"}},"gridPos":{"h":7,"w":4,"x":8,"y":0},"id":3,"interval":"1m","options":{"colorMode":"none"},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(kubelet_running_containers{cluster=\"$cluster\",
      job=\"kubelet\", metrics_path=\"/metrics\", instance=~\"$instance\"})","instant":true}],"title":"Running
      Containers","type":"stat"},{"datasource":{"type":"datasource","uid":"-- Mixed
      --"},"fieldConfig":{"defaults":{"unit":"none"}},"gridPos":{"h":7,"w":4,"x":12,"y":0},"id":4,"interval":"1m","options":{"colorMode":"none"},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(volume_manager_total_volumes{cluster=\"$cluster\",
      job=\"kubelet\", metrics_path=\"/metrics\", instance=~\"$instance\", state=\"actual_state_of_world\"})","instant":true}],"title":"Actual
      Volume Count","type":"stat"},{"datasource":{"type":"datasource","uid":"-- Mixed
      --"},"fieldConfig":{"defaults":{"unit":"none"}},"gridPos":{"h":7,"w":4,"x":16,"y":0},"id":5,"interval":"1m","options":{"colorMode":"none"},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(volume_manager_total_volumes{cluster=\"$cluster\",
      job=\"kubelet\", metrics_path=\"/metrics\", instance=~\"$instance\",state=\"desired_state_of_world\"})","instant":true}],"title":"Desired
      Volume Count","type":"stat"},{"datasource":{"type":"datasource","uid":"-- Mixed
      --"},"fieldConfig":{"defaults":{"unit":"none"}},"gridPos":{"h":7,"w":4,"x":20,"y":0},"id":6,"interval":"1m","options":{"colorMode":"none"},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(kubelet_node_config_error{cluster=\"$cluster\",
      job=\"kubelet\", metrics_path=\"/metrics\", instance=~\"$instance\"}[$__rate_interval]))","instant":true}],"title":"Config
      Error Count","type":"stat"},{"datasource":{"type":"datasource","uid":"-- Mixed
      --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"ops"}},"gridPos":{"h":7,"w":12,"x":0,"y":7},"id":7,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(kubelet_runtime_operations_total{cluster=\"$cluster\",job=\"kubelet\",
      metrics_path=\"/metrics\",instance=~\"$instance\"}[$__rate_interval])) by (operation_type,
      instance)","legendFormat":"{{instance}} {{operation_type}}"}],"title":"Operation
      Rate","type":"timeseries"},{"datasource":{"type":"datasource","uid":"-- Mixed
      --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"ops"}},"gridPos":{"h":7,"w":12,"x":12,"y":7},"id":8,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(kubelet_runtime_operations_errors_total{cluster=\"$cluster\",job=\"kubelet\",
      metrics_path=\"/metrics\",instance=~\"$instance\"}[$__rate_interval])) by (instance,
      operation_type)","legendFormat":"{{instance}} {{operation_type}}"}],"title":"Operation
      Error Rate","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"s"}},"gridPos":{"h":7,"w":24,"x":0,"y":14},"id":9,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"histogram_quantile(0.99,
      sum(rate(kubelet_runtime_operations_duration_seconds_bucket{cluster=\"$cluster\",job=\"kubelet\",
      metrics_path=\"/metrics\",instance=~\"$instance\"}[$__rate_interval])) by (instance,
      operation_type, le))","legendFormat":"{{instance}} {{operation_type}}"}],"title":"Operation
      Duration 99th quantile","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"ops"}},"gridPos":{"h":7,"w":12,"x":0,"y":21},"id":10,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(kubelet_pod_start_duration_seconds_count{cluster=\"$cluster\",job=\"kubelet\",
      metrics_path=\"/metrics\",instance=~\"$instance\"}[$__rate_interval])) by (instance)","legendFormat":"{{instance}}
      pod"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(kubelet_pod_worker_duration_seconds_count{cluster=\"$cluster\",job=\"kubelet\",
      metrics_path=\"/metrics\",instance=~\"$instance\"}[$__rate_interval])) by (instance)","legendFormat":"{{instance}}
      worker"}],"title":"Pod Start Rate","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"s"}},"gridPos":{"h":7,"w":12,"x":12,"y":21},"id":11,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"histogram_quantile(0.99,
      sum(rate(kubelet_pod_start_duration_seconds_bucket{cluster=\"$cluster\",job=\"kubelet\",
      metrics_path=\"/metrics\",instance=~\"$instance\"}[$__rate_interval])) by (instance,
      le))","legendFormat":"{{instance}} pod"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"histogram_quantile(0.99,
      sum(rate(kubelet_pod_worker_duration_seconds_bucket{cluster=\"$cluster\",job=\"kubelet\",
      metrics_path=\"/metrics\",instance=~\"$instance\"}[$__rate_interval])) by (instance,
      le))","legendFormat":"{{instance}} worker"}],"title":"Pod Start Duration","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"ops"}},"gridPos":{"h":7,"w":12,"x":0,"y":28},"id":12,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(storage_operation_duration_seconds_count{cluster=\"$cluster\",job=\"kubelet\",
      metrics_path=\"/metrics\",instance=~\"$instance\"}[$__rate_interval])) by (instance,
      operation_name, volume_plugin)","legendFormat":"{{instance}} {{operation_name}}
      {{volume_plugin}}"}],"title":"Storage Operation Rate","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"ops"}},"gridPos":{"h":7,"w":12,"x":12,"y":28},"id":13,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(storage_operation_errors_total{cluster=\"$cluster\",job=\"kubelet\",
      metrics_path=\"/metrics\",instance=~\"$instance\"}[$__rate_interval])) by (instance,
      operation_name, volume_plugin)","legendFormat":"{{instance}} {{operation_name}}
      {{volume_plugin}}"}],"title":"Storage Operation Error Rate","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"s"}},"gridPos":{"h":7,"w":24,"x":0,"y":35},"id":14,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"histogram_quantile(0.99,
      sum(rate(storage_operation_duration_seconds_bucket{cluster=\"$cluster\", job=\"kubelet\",
      metrics_path=\"/metrics\", instance=~\"$instance\"}[$__rate_interval])) by (instance,
      operation_name, volume_plugin, le))","legendFormat":"{{instance}} {{operation_name}}
      {{volume_plugin}}"}],"title":"Storage Operation Duration 99th quantile","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"ops"}},"gridPos":{"h":7,"w":12,"x":0,"y":42},"id":15,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(kubelet_cgroup_manager_duration_seconds_count{cluster=\"$cluster\",
      job=\"kubelet\", metrics_path=\"/metrics\", instance=~\"$instance\"}[$__rate_interval]))
      by (instance, operation_type)","legendFormat":"{{operation_type}}"}],"title":"Cgroup
      manager operation rate","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"s"}},"gridPos":{"h":7,"w":12,"x":12,"y":42},"id":16,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"histogram_quantile(0.99,
      sum(rate(kubelet_cgroup_manager_duration_seconds_bucket{cluster=\"$cluster\",
      job=\"kubelet\", metrics_path=\"/metrics\", instance=~\"$instance\"}[$__rate_interval]))
      by (instance, operation_type, le))","legendFormat":"{{instance}} {{operation_type}}"}],"title":"Cgroup
      manager 99th quantile","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"ops"}},"gridPos":{"h":7,"w":12,"x":0,"y":49},"id":17,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(kubelet_pleg_relist_duration_seconds_count{cluster=\"$cluster\",
      job=\"kubelet\", metrics_path=\"/metrics\", instance=~\"$instance\"}[$__rate_interval]))
      by (instance)","legendFormat":"{{instance}}"}],"title":"PLEG relist rate","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"s"}},"gridPos":{"h":7,"w":12,"x":12,"y":49},"id":18,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"histogram_quantile(0.99,
      sum(rate(kubelet_pleg_relist_interval_seconds_bucket{cluster=\"$cluster\",job=\"kubelet\",
      metrics_path=\"/metrics\",instance=~\"$instance\"}[$__rate_interval])) by (instance,
      le))","legendFormat":"{{instance}}"}],"title":"PLEG relist interval","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"s"}},"gridPos":{"h":7,"w":24,"x":0,"y":56},"id":19,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"histogram_quantile(0.99,
      sum(rate(kubelet_pleg_relist_duration_seconds_bucket{cluster=\"$cluster\",job=\"kubelet\",
      metrics_path=\"/metrics\",instance=~\"$instance\"}[$__rate_interval])) by (instance,
      le))","legendFormat":"{{instance}}"}],"title":"PLEG relist duration","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"ops"}},"gridPos":{"h":7,"w":24,"x":0,"y":63},"id":20,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(rest_client_requests_total{cluster=\"$cluster\",job=\"kubelet\",
      metrics_path=\"/metrics\", instance=~\"$instance\",code=~\"2..\"}[$__rate_interval]))","legendFormat":"2xx"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(rest_client_requests_total{cluster=\"$cluster\",job=\"kubelet\",
      metrics_path=\"/metrics\", instance=~\"$instance\",code=~\"3..\"}[$__rate_interval]))","legendFormat":"3xx"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(rest_client_requests_total{cluster=\"$cluster\",job=\"kubelet\",
      metrics_path=\"/metrics\", instance=~\"$instance\",code=~\"4..\"}[$__rate_interval]))","legendFormat":"4xx"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(rest_client_requests_total{cluster=\"$cluster\",job=\"kubelet\",
      metrics_path=\"/metrics\", instance=~\"$instance\",code=~\"5..\"}[$__rate_interval]))","legendFormat":"5xx"}],"title":"RPC
      rate","type":"timeseries"},{"datasource":{"type":"datasource","uid":"-- Mixed
      --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"s"}},"gridPos":{"h":7,"w":24,"x":0,"y":70},"id":21,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"histogram_quantile(0.99,
      sum(rate(rest_client_request_duration_seconds_bucket{cluster=\"$cluster\",job=\"kubelet\",
      metrics_path=\"/metrics\", instance=~\"$instance\"}[$__rate_interval])) by (instance,
      verb, le))","legendFormat":"{{instance}} {{verb}}"}],"title":"Request duration
      99th quantile","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"bytes"}},"gridPos":{"h":7,"w":8,"x":0,"y":77},"id":22,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"process_resident_memory_bytes{cluster=\"$cluster\",job=\"kubelet\",
      metrics_path=\"/metrics\",instance=~\"$instance\"}","legendFormat":"{{instance}}"}],"title":"Memory","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"short"}},"gridPos":{"h":7,"w":8,"x":8,"y":77},"id":23,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"rate(process_cpu_seconds_total{cluster=\"$cluster\",job=\"kubelet\",
      metrics_path=\"/metrics\",instance=~\"$instance\"}[$__rate_interval])","legendFormat":"{{instance}}"}],"title":"CPU
      usage","type":"timeseries"},{"datasource":{"type":"datasource","uid":"-- Mixed
      --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"short"}},"gridPos":{"h":7,"w":8,"x":16,"y":77},"id":24,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"go_goroutines{cluster=\"$cluster\",job=\"kubelet\",
      metrics_path=\"/metrics\",instance=~\"$instance\"}","legendFormat":"{{instance}}"}],"title":"Goroutines","type":"timeseries"}],"refresh":"10s","schemaVersion":39,"tags":["kubernetes-mixin"],"templating":{"list":[{"current":{"selected":true,"text":"default","value":"default"},"hide":0,"label":"Data
      source","name":"datasource","query":"prometheus","regex":"","type":"datasource"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":2,"label":"cluster","name":"cluster","query":"label_values(up{job=\"kubelet\",
      metrics_path=\"/metrics\"}, cluster)","refresh":2,"sort":1,"type":"query","allValue":".*"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":0,"includeAll":true,"label":"instance","name":"instance","query":"label_values(up{job=\"kubelet\",
      metrics_path=\"/metrics\",cluster=\"$cluster\"}, instance)","refresh":2,"type":"query"}]},"time":{"from":"now-1h","to":"now"},"timezone":
      "utc","title":"Kubernetes / Kubelet","uid":"3138fa155d5915769fbded898ac09fd9"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-kubelet
    namespace: tomer
    resourceVersion: "2297431"
    uid: 52cc7a2f-262a-4348-b907-0d70ab1b16c4
- apiVersion: v1
  data:
    namespace-by-pod.json: '{"editable":true,"links":[{"asDropdown":true,"includeVars":true,"keepTime":true,"tags":["kubernetes-mixin"],"targetBlank":false,"title":"Kubernetes","type":"dashboards"}],"panels":[{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"displayName":"$namespace","max":10000000000,"min":0,"thresholds":{"steps":[{"color":"dark-green","index":0,"value":null},{"color":"dark-yellow","index":1,"value":5000000000},{"color":"dark-red","index":2,"value":7000000000}]},"unit":"Bps"}},"gridPos":{"h":9,"w":12,"x":0,"y":0},"id":1,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      (\n    rate(container_network_receive_bytes_total{cluster=\"$cluster\",namespace=~\"$namespace\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","legendFormat":"__auto"}],"title":"Current
      Rate of Bytes Received","type":"gauge"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"displayName":"$namespace","max":10000000000,"min":0,"thresholds":{"steps":[{"color":"dark-green","index":0,"value":null},{"color":"dark-yellow","index":1,"value":5000000000},{"color":"dark-red","index":2,"value":7000000000}]},"unit":"Bps"}},"gridPos":{"h":9,"w":12,"x":12,"y":0},"id":2,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      (\n    rate(container_network_transmit_bytes_total{cluster=\"$cluster\",namespace=~\"$namespace\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","legendFormat":"__auto"}],"title":"Current
      Rate of Bytes Transmitted","type":"gauge"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"overrides":[{"matcher":{"id":"byRegexp","options":"/Bandwidth/"},"properties":[{"id":"unit","value":"Bps"}]},{"matcher":{"id":"byRegexp","options":"/Packets/"},"properties":[{"id":"unit","value":"pps"}]},{"matcher":{"id":"byName","options":"Pod"},"properties":[{"id":"links","value":[{"title":"Drill
      down","url":"/d/7a18067ce943a40ae25454675c19ff5c/kubernetes-networking-pod?${datasource:queryparam}&var-cluster=${cluster}&var-namespace=${namespace}&var-pod=${__data.fields.Pod}"}]}]}]},"gridPos":{"h":9,"w":24,"x":0,"y":9},"id":3,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (pod) (\n    rate(container_network_receive_bytes_total{cluster=\"$cluster\",namespace=~\"$namespace\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (pod) (\n    rate(container_network_transmit_bytes_total{cluster=\"$cluster\",namespace=~\"$namespace\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (pod) (\n    rate(container_network_receive_packets_total{cluster=\"$cluster\",namespace=~\"$namespace\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (pod) (\n    rate(container_network_transmit_packets_total{cluster=\"$cluster\",namespace=~\"$namespace\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (pod) (\n    rate(container_network_receive_packets_dropped_total{cluster=\"$cluster\",namespace=~\"$namespace\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (pod) (\n    rate(container_network_transmit_packets_dropped_total{cluster=\"$cluster\",namespace=~\"$namespace\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","format":"table","instant":true}],"title":"Current
      Network Usage","transformations":[{"id":"joinByField","options":{"byField":"pod","mode":"outer"}},{"id":"organize","options":{"excludeByName":{"Time":true,"Time
      1":true,"Time 2":true,"Time 3":true,"Time 4":true,"Time 5":true,"Time 6":true},"indexByName":{"Time
      1":0,"Time 2":1,"Time 3":2,"Time 4":3,"Time 5":4,"Time 6":5,"Value #A":7,"Value
      #B":8,"Value #C":9,"Value #D":10,"Value #E":11,"Value #F":12,"pod":6},"renameByName":{"Value
      #A":"Current Receive Bandwidth","Value #B":"Current Transmit Bandwidth","Value
      #C":"Rate of Received Packets","Value #D":"Rate of Transmitted Packets","Value
      #E":"Rate of Received Packets Dropped","Value #F":"Rate of Transmitted Packets
      Dropped","pod":"Pod"}}}],"type":"table"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"},"unit":"binBps"}},"gridPos":{"h":9,"w":12,"x":0,"y":18},"id":4,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (pod) (\n    rate(container_network_receive_bytes_total{cluster=\"$cluster\",namespace=~\"$namespace\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","legendFormat":"__auto"}],"title":"Receive
      Bandwidth","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"},"unit":"binBps"}},"gridPos":{"h":9,"w":12,"x":12,"y":18},"id":5,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (pod) (\n    rate(container_network_transmit_bytes_total{cluster=\"$cluster\",namespace=~\"$namespace\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","legendFormat":"__auto"}],"title":"Transmit
      Bandwidth","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"},"unit":"pps"}},"gridPos":{"h":9,"w":12,"x":0,"y":27},"id":6,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (pod) (\n    rate(container_network_receive_packets_total{cluster=\"$cluster\",namespace=~\"$namespace\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","legendFormat":"__auto"}],"title":"Rate
      of Received Packets","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"},"unit":"pps"}},"gridPos":{"h":9,"w":12,"x":12,"y":27},"id":7,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (pod) (\n    rate(container_network_transmit_packets_total{cluster=\"$cluster\",namespace=~\"$namespace\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","legendFormat":"__auto"}],"title":"Rate
      of Transmitted Packets","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"},"unit":"pps"}},"gridPos":{"h":9,"w":12,"x":0,"y":36},"id":8,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (pod) (\n    rate(container_network_receive_packets_dropped_total{cluster=\"$cluster\",namespace!=\"\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","legendFormat":"__auto"}],"title":"Rate
      of Received Packets Dropped","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"},"unit":"pps"}},"gridPos":{"h":9,"w":12,"x":12,"y":36},"id":9,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      by (pod) (\n    rate(container_network_transmit_packets_dropped_total{cluster=\"$cluster\",namespace=~\"$namespace\"}[$__rate_interval])\n  *
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n)\n","legendFormat":"__auto"}],"title":"Rate
      of Transmitted Packets Dropped","type":"timeseries"}],"refresh":"10s","schemaVersion":39,"tags":["kubernetes-mixin"],"templating":{"list":[{"current":{"selected":true,"text":"default","value":"default"},"hide":0,"label":"Data
      source","name":"datasource","query":"prometheus","regex":"","type":"datasource"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":2,"label":"cluster","name":"cluster","query":"label_values(up{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\"}, cluster)","refresh":2,"sort":1,"type":"query","allValue":".*"},{"allValue":".+","current":{"selected":false,"text":"kube-system","value":"kube-system"},"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":0,"includeAll":true,"label":"namespace","name":"namespace","query":"label_values(container_network_receive_packets_total{cluster=\"$cluster\"},
      namespace)","refresh":2,"sort":1,"type":"query"}]},"time":{"from":"now-1h","to":"now"},"timezone":
      "utc","title":"Kubernetes / Networking / Namespace (Pods)","uid":"8b7a8b326d7a6f1f04244066368c67af"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-namespace-by-pod
    namespace: tomer
    resourceVersion: "2297434"
    uid: db888c30-05da-4d49-a24f-ba9b9d204684
- apiVersion: v1
  data:
    namespace-by-workload.json: '{"editable":true,"links":[{"asDropdown":true,"includeVars":true,"keepTime":true,"tags":["kubernetes-mixin"],"targetBlank":false,"title":"Kubernetes","type":"dashboards"}],"panels":[{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"color":{"fixedColor":"green","mode":"fixed"},"unit":"Bps"}},"gridPos":{"h":9,"w":12,"x":0,"y":0},"id":1,"options":{"displayMode":"basic","showUnfilled":false},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(sum(rate(container_network_receive_bytes_total{cluster=\"$cluster\",namespace=\"$namespace\"}[$__rate_interval])\n*
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n*
      on (cluster,namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=\"$namespace\",
      workload=~\".+\", workload_type=~\"$type\"}) by (workload))\n","legendFormat":"__auto"}],"title":"Current
      Rate of Bytes Received","type":"bargauge"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"color":{"fixedColor":"green","mode":"fixed"},"unit":"Bps"}},"gridPos":{"h":9,"w":12,"x":12,"y":0},"id":2,"options":{"displayMode":"basic","showUnfilled":false},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(sum(rate(container_network_transmit_bytes_total{cluster=\"$cluster\",namespace=\"$namespace\"}[$__rate_interval])\n*
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n*
      on (cluster,namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=\"$namespace\",
      workload=~\".+\", workload_type=~\"$type\"}) by (workload))\n","legendFormat":"__auto"}],"title":"Current
      Rate of Bytes Transmitted","type":"bargauge"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"overrides":[{"matcher":{"id":"byRegexp","options":"/Bytes/"},"properties":[{"id":"unit","value":"binBps"}]},{"matcher":{"id":"byRegexp","options":"/Packets/"},"properties":[{"id":"unit","value":"pps"}]},{"matcher":{"id":"byName","options":"Workload"},"properties":[{"id":"links","value":[{"title":"Drill
      down","url":"/d/728bf77cc1166d2f3133bf25846876cc/kubernetes-networking-workload?${datasource:queryparam}&var-cluster=${cluster}&var-namespace=${namespace}&var-type=${__data.fields.Type}&var-workload=${__data.fields.Workload}"}]}]}]},"gridPos":{"h":9,"w":24,"x":0,"y":9},"id":3,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(sum(rate(container_network_receive_bytes_total{cluster=\"$cluster\",namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod) kube_pod_info{cluster=\"$cluster\",namespace=\"$namespace\",host_network=\"false\"}\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=\"$namespace\",
      workload=~\".+\", workload_type=~\"$type\"}) by (workload, workload_type))\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(sum(rate(container_network_transmit_bytes_total{cluster=\"$cluster\",namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod) kube_pod_info{cluster=\"$cluster\",namespace=\"$namespace\",host_network=\"false\"}\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=\"$namespace\",
      workload=~\".+\", workload_type=~\"$type\"}) by (workload, workload_type))\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(avg(rate(container_network_receive_bytes_total{cluster=\"$cluster\",namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod) kube_pod_info{cluster=\"$cluster\",namespace=\"$namespace\",host_network=\"false\"}\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=\"$namespace\",
      workload=~\".+\", workload_type=~\"$type\"}) by (workload, workload_type))\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(avg(rate(container_network_transmit_bytes_total{cluster=\"$cluster\",namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod) kube_pod_info{cluster=\"$cluster\",namespace=\"$namespace\",host_network=\"false\"}\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=\"$namespace\",
      workload=~\".+\", workload_type=~\"$type\"}) by (workload, workload_type))\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(sum(rate(container_network_receive_packets_total{cluster=\"$cluster\",namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod) kube_pod_info{cluster=\"$cluster\",namespace=\"$namespace\",host_network=\"false\"}\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=\"$namespace\",
      workload=~\".+\", workload_type=~\"$type\"}) by (workload, workload_type))\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(sum(rate(container_network_transmit_packets_total{cluster=\"$cluster\",namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod) kube_pod_info{cluster=\"$cluster\",namespace=\"$namespace\",host_network=\"false\"}\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=\"$namespace\",
      workload=~\".+\", workload_type=~\"$type\"}) by (workload, workload_type))\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(sum(rate(container_network_receive_packets_dropped_total{cluster=\"$cluster\",namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod) kube_pod_info{cluster=\"$cluster\",namespace=\"$namespace\",host_network=\"false\"}\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=\"$namespace\",
      workload=~\".+\", workload_type=~\"$type\"}) by (workload, workload_type))\n","format":"table","instant":true},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(sum(rate(container_network_transmit_packets_dropped_total{cluster=\"$cluster\",namespace=\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod) kube_pod_info{cluster=\"$cluster\",namespace=\"$namespace\",host_network=\"false\"}\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=\"$namespace\",
      workload=~\".+\", workload_type=~\"$type\"}) by (workload, workload_type))\n","format":"table","instant":true}],"title":"Current
      Status","transformations":[{"id":"joinByField","options":{"byField":"workload","mode":"outer"}},{"id":"organize","options":{"excludeByName":{"Time":true,"Time
      1":true,"Time 2":true,"Time 3":true,"Time 4":true,"Time 5":true,"Time 6":true,"Time
      7":true,"Time 8":true,"workload_type 2":true,"workload_type 3":true,"workload_type
      4":true,"workload_type 5":true,"workload_type 6":true,"workload_type 7":true,"workload_type
      8":true},"indexByName":{"Time 1":0,"Time 2":1,"Time 3":2,"Time 4":3,"Time 5":4,"Time
      6":5,"Time 7":6,"Time 8":7,"Value #A":10,"Value #B":11,"Value #C":12,"Value
      #D":13,"Value #E":14,"Value #F":15,"Value #G":16,"Value #H":17,"workload":8,"workload_type
      1":9,"workload_type 2":18,"workload_type 3":19,"workload_type 4":20,"workload_type
      5":21,"workload_type 6":22,"workload_type 7":23,"workload_type 8":24},"renameByName":{"Value
      #A":"Rx Bytes","Value #B":"Tx Bytes","Value #C":"Rx Bytes (Avg)","Value #D":"Tx
      Bytes (Avg)","Value #E":"Rx Packets","Value #F":"Tx Packets","Value #G":"Rx
      Packets Dropped","Value #H":"Tx Packets Dropped","workload":"Workload","workload_type
      1":"Type"}}}],"type":"table"},{"datasource":{"type":"datasource","uid":"-- Mixed
      --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"Bps"}},"gridPos":{"h":9,"w":12,"x":0,"y":18},"id":4,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(sum(rate(container_network_receive_bytes_total{cluster=\"$cluster\",namespace=\"$namespace\"}[$__rate_interval])\n*
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n*
      on (cluster,namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=\"$namespace\",
      workload=~\".+\", workload_type=~\"$type\"}) by (workload))\n","legendFormat":"__auto"}],"title":"Receive
      Bandwidth","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"Bps"}},"gridPos":{"h":9,"w":12,"x":12,"y":18},"id":5,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(sum(rate(container_network_transmit_bytes_total{cluster=\"$cluster\",namespace=\"$namespace\"}[$__rate_interval])\n*
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n*
      on (cluster,namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=\"$namespace\",
      workload=~\".+\", workload_type=~\"$type\"}) by (workload))\n","legendFormat":"__auto"}],"title":"Transmit
      Bandwidth","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"Bps"}},"gridPos":{"h":9,"w":12,"x":0,"y":27},"id":6,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(avg(rate(container_network_receive_bytes_total{cluster=\"$cluster\",namespace=\"$namespace\"}[$__rate_interval])\n*
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n*
      on (cluster,namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=\"$namespace\",
      workload=~\".+\", workload_type=~\"$type\"}) by (workload))\n","legendFormat":"__auto"}],"title":"Average
      Container Bandwidth by Workload: Received","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"Bps"}},"gridPos":{"h":9,"w":12,"x":12,"y":27},"id":7,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(avg(rate(container_network_transmit_bytes_total{cluster=\"$cluster\",namespace=\"$namespace\"}[$__rate_interval])\n*
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n*
      on (cluster,namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=\"$namespace\",
      workload=~\".+\", workload_type=~\"$type\"}) by (workload))\n","legendFormat":"__auto"}],"title":"Average
      Container Bandwidth by Workload: Transmitted","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":9,"w":12,"x":0,"y":36},"id":8,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(sum(rate(container_network_receive_packets_total{cluster=\"$cluster\",namespace=\"$namespace\"}[$__rate_interval])\n*
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n*
      on (cluster,namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=\"$namespace\",
      workload=~\".+\", workload_type=~\"$type\"}) by (workload))\n","legendFormat":"__auto"}],"title":"Rate
      of Received Packets","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":9,"w":12,"x":12,"y":36},"id":9,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(sum(rate(container_network_transmit_packets_total{cluster=\"$cluster\",namespace=\"$namespace\"}[$__rate_interval])\n*
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n*
      on (cluster,namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=\"$namespace\",
      workload=~\".+\", workload_type=~\"$type\"}) by (workload))\n","legendFormat":"__auto"}],"title":"Rate
      of Transmitted Packets","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":9,"w":12,"x":0,"y":45},"id":10,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(sum(rate(container_network_receive_packets_dropped_total{cluster=\"$cluster\",namespace=\"$namespace\"}[$__rate_interval])\n*
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n*
      on (cluster,namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=\"$namespace\",
      workload=~\".+\", workload_type=~\"$type\"}) by (workload))\n","legendFormat":"__auto"}],"title":"Rate
      of Received Packets Dropped","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":9,"w":12,"x":12,"y":45},"id":11,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(sum(rate(container_network_transmit_packets_dropped_total{cluster=\"$cluster\",namespace=\"$namespace\"}[$__rate_interval])\n*
      on (cluster,namespace,pod) group_left ()\n    topk by (cluster,namespace,pod)
      (\n      1,\n      max by (cluster,namespace,pod) (kube_pod_info{host_network=\"false\"})\n    )\n*
      on (cluster,namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=\"$namespace\",
      workload=~\".+\", workload_type=~\"$type\"}) by (workload))\n","legendFormat":"__auto"}],"title":"Rate
      of Transmitted Packets Dropped","type":"timeseries"}],"refresh":"10s","schemaVersion":39,"tags":["kubernetes-mixin"],"templating":{"list":[{"current":{"selected":true,"text":"default","value":"default"},"hide":0,"label":"Data
      source","name":"datasource","query":"prometheus","regex":"","type":"datasource"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":2,"label":"cluster","name":"cluster","query":"label_values(up{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\"}, cluster)","refresh":2,"sort":1,"type":"query","allValue":".*"},{"current":{"selected":false,"text":"kube-system","value":"kube-system"},"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":0,"label":"namespace","name":"namespace","query":"label_values(container_network_receive_packets_total{cluster=\"$cluster\"},
      namespace)","refresh":2,"sort":1,"type":"query"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":0,"includeAll":true,"label":"workload_type","name":"type","query":"label_values(namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=\"$namespace\", workload=~\".+\"}, workload_type)","refresh":2,"sort":1,"type":"query"}]},"time":{"from":"now-1h","to":"now"},"timezone":
      "utc","title":"Kubernetes / Networking / Namespace (Workload)","uid":"bbb2a765a623ae38130206c7d94a160f"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-namespace-by-workload
    namespace: tomer
    resourceVersion: "2297442"
    uid: 155b8e07-d429-4c60-871e-74f81cd1865c
- apiVersion: v1
  data:
    node-cluster-rsrc-use.json: '{"graphTooltip":1,"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":1,"panels":[],"title":"CPU","type":"row"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"showPoints":"never","stacking":{"mode":"normal"}},"unit":"percentunit"}},"gridPos":{"h":7,"w":12,"x":0,"y":1},"id":2,"options":{"legend":{"showLegend":false},"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"((\n  instance:node_cpu_utilisation:rate5m{job=\"node-exporter\",
      cluster=\"$cluster\"}\n  *\n  instance:node_num_cpu:sum{job=\"node-exporter\",
      cluster=\"$cluster\"}\n) != 0 )\n/ scalar(sum(instance:node_num_cpu:sum{job=\"node-exporter\",
      cluster=\"$cluster\"}))\n","legendFormat":"{{ instance }}"}],"title":"CPU Utilisation","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"showPoints":"never","stacking":{"mode":"normal"}},"unit":"percentunit"}},"gridPos":{"h":7,"w":12,"x":12,"y":1},"id":3,"options":{"legend":{"showLegend":false},"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"(\n  instance:node_load1_per_cpu:ratio{job=\"node-exporter\",
      cluster=\"$cluster\"}\n  / scalar(count(instance:node_load1_per_cpu:ratio{job=\"node-exporter\",
      cluster=\"$cluster\"}))\n)  != 0\n","legendFormat":"{{ instance }}"}],"title":"CPU
      Saturation (Load1 per CPU)","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":8},"id":4,"panels":[],"title":"Memory","type":"row"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"showPoints":"never","stacking":{"mode":"normal"}},"unit":"percentunit"}},"gridPos":{"h":7,"w":12,"x":0,"y":9},"id":5,"options":{"legend":{"showLegend":false},"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"(\n  instance:node_memory_utilisation:ratio{job=\"node-exporter\",
      cluster=\"$cluster\"}\n  / scalar(count(instance:node_memory_utilisation:ratio{job=\"node-exporter\",
      cluster=\"$cluster\"}))\n) != 0\n","legendFormat":"{{ instance }}"}],"title":"Memory
      Utilisation","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"showPoints":"never","stacking":{"mode":"normal"}},"unit":"rds"}},"gridPos":{"h":7,"w":12,"x":12,"y":9},"id":6,"options":{"legend":{"showLegend":false},"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"instance:node_vmstat_pgmajfault:rate5m{job=\"node-exporter\",
      cluster=\"$cluster\"}","legendFormat":"{{ instance }}"}],"title":"Memory Saturation
      (Major Page Faults)","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":16},"id":7,"panels":[],"title":"Network","type":"row"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"showPoints":"never","stacking":{"mode":"normal"}},"unit":"Bps"},"overrides":[{"matcher":{"id":"byRegexp","options":"/Transmit/"},"properties":[{"id":"custom.transform","value":"negative-Y"}]}]},"gridPos":{"h":7,"w":12,"x":0,"y":17},"id":8,"options":{"legend":{"showLegend":false},"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"instance:node_network_receive_bytes_excluding_lo:rate5m{job=\"node-exporter\",
      cluster=\"$cluster\"} != 0","legendFormat":"{{ instance }} Receive"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"instance:node_network_transmit_bytes_excluding_lo:rate5m{job=\"node-exporter\",
      cluster=\"$cluster\"} != 0","legendFormat":"{{ instance }} Transmit"}],"title":"Network
      Utilisation (Bytes Receive/Transmit)","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"showPoints":"never","stacking":{"mode":"normal"}},"unit":"Bps"},"overrides":[{"matcher":{"id":"byRegexp","options":"/Transmit/"},"properties":[{"id":"custom.transform","value":"negative-Y"}]}]},"gridPos":{"h":7,"w":12,"x":12,"y":17},"id":9,"options":{"legend":{"showLegend":false},"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"instance:node_network_receive_drop_excluding_lo:rate5m{job=\"node-exporter\",
      cluster=\"$cluster\"} != 0","legendFormat":"{{ instance }} Receive"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"instance:node_network_transmit_drop_excluding_lo:rate5m{job=\"node-exporter\",
      cluster=\"$cluster\"} != 0","legendFormat":"{{ instance }} Transmit"}],"title":"Network
      Saturation (Drops Receive/Transmit)","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":24},"id":10,"panels":[],"title":"Disk
      IO","type":"row"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"showPoints":"never","stacking":{"mode":"normal"}},"unit":"percentunit"}},"gridPos":{"h":7,"w":12,"x":0,"y":25},"id":11,"options":{"legend":{"showLegend":false},"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"instance_device:node_disk_io_time_seconds:rate5m{job=\"node-exporter\",
      cluster=\"$cluster\"}\n/ scalar(count(instance_device:node_disk_io_time_seconds:rate5m{job=\"node-exporter\",
      cluster=\"$cluster\"}))\n","legendFormat":"{{ instance }} {{device}}"}],"title":"Disk
      IO Utilisation","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"showPoints":"never","stacking":{"mode":"normal"}},"unit":"percentunit"}},"gridPos":{"h":7,"w":12,"x":12,"y":25},"id":12,"options":{"legend":{"showLegend":false},"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"instance_device:node_disk_io_time_weighted_seconds:rate5m{job=\"node-exporter\",
      cluster=\"$cluster\"}\n/ scalar(count(instance_device:node_disk_io_time_weighted_seconds:rate5m{job=\"node-exporter\",
      cluster=\"$cluster\"}))\n","legendFormat":"{{ instance }} {{device}}"}],"title":"Disk
      IO Saturation","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":34},"id":13,"panels":[],"title":"Disk
      Space","type":"row"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"showPoints":"never","stacking":{"mode":"normal"}},"unit":"percentunit"}},"gridPos":{"h":7,"w":24,"x":0,"y":35},"id":14,"options":{"legend":{"showLegend":false},"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"sum
      without (device) (\n  max without (fstype, mountpoint) ((\n    node_filesystem_size_bytes{job=\"node-exporter\",
      fstype!=\"\", mountpoint!=\"\", cluster=\"$cluster\"}\n    -\n    node_filesystem_avail_bytes{job=\"node-exporter\",
      fstype!=\"\", mountpoint!=\"\", cluster=\"$cluster\"}\n  ) != 0)\n)\n/ scalar(sum(max
      without (fstype, mountpoint) (node_filesystem_size_bytes{job=\"node-exporter\",
      fstype!=\"\", mountpoint!=\"\", cluster=\"$cluster\"})))\n","legendFormat":"{{
      instance }}"}],"title":"Disk Space Utilisation","type":"timeseries"}],"refresh":"30s","schemaVersion":39,"tags":["node-exporter-mixin"],"templating":{"list":[{"name":"datasource","query":"prometheus","type":"datasource"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":2,"includeAll":false,"name":"cluster","query":"label_values(node_time_seconds,
      cluster)","refresh":2,"sort":1,"type":"query","allValue":".*"}]},"time":{"from":"now-1h","to":"now"},"timezone":
      "utc","title":"Node Exporter / USE Method / Cluster","uid":"3e97d1d02672cdd0861f4c97c64f89b2"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-node-cluster-rsrc-use
    namespace: tomer
    resourceVersion: "2297435"
    uid: 4b1dc335-fe19-471f-9e95-84842d5de0e4
- apiVersion: v1
  data:
    node-rsrc-use.json: '{"graphTooltip":1,"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":1,"panels":[],"title":"CPU","type":"row"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"showPoints":"never","stacking":{"mode":"normal"}},"unit":"percentunit"}},"gridPos":{"h":7,"w":12,"x":0,"y":1},"id":2,"options":{"legend":{"showLegend":false},"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"instance:node_cpu_utilisation:rate5m{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"} != 0","legendFormat":"Utilisation"}],"title":"CPU
      Utilisation","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"showPoints":"never","stacking":{"mode":"normal"}},"unit":"percentunit"}},"gridPos":{"h":7,"w":12,"x":12,"y":1},"id":3,"options":{"legend":{"showLegend":false},"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"instance:node_load1_per_cpu:ratio{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"} != 0","legendFormat":"Saturation"}],"title":"CPU
      Saturation (Load1 per CPU)","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":8},"id":4,"panels":[],"title":"Memory","type":"row"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"showPoints":"never","stacking":{"mode":"normal"}},"unit":"percentunit"}},"gridPos":{"h":7,"w":12,"x":0,"y":9},"id":5,"options":{"legend":{"showLegend":false},"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"instance:node_memory_utilisation:ratio{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"} != 0","legendFormat":"Utilisation"}],"title":"Memory
      Utilisation","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"showPoints":"never","stacking":{"mode":"normal"}},"unit":"rds"}},"gridPos":{"h":7,"w":12,"x":12,"y":9},"id":6,"options":{"legend":{"showLegend":false},"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"instance:node_vmstat_pgmajfault:rate5m{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"} != 0","legendFormat":"Major page
      Faults"}],"title":"Memory Saturation (Major Page Faults)","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":16},"id":7,"panels":[],"title":"Network","type":"row"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"showPoints":"never","stacking":{"mode":"normal"}},"unit":"Bps"},"overrides":[{"matcher":{"id":"byRegexp","options":"/Transmit/"},"properties":[{"id":"custom.transform","value":"negative-Y"}]}]},"gridPos":{"h":7,"w":12,"x":0,"y":17},"id":8,"options":{"legend":{"showLegend":false},"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"instance:node_network_receive_bytes_excluding_lo:rate5m{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"} != 0","legendFormat":"Receive"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"instance:node_network_transmit_bytes_excluding_lo:rate5m{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"} != 0","legendFormat":"Transmit"}],"title":"Network
      Utilisation (Bytes Receive/Transmit)","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"showPoints":"never","stacking":{"mode":"normal"}},"unit":"Bps"},"overrides":[{"matcher":{"id":"byRegexp","options":"/Transmit/"},"properties":[{"id":"custom.transform","value":"negative-Y"}]}]},"gridPos":{"h":7,"w":12,"x":12,"y":17},"id":9,"options":{"legend":{"showLegend":false},"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"instance:node_network_receive_drop_excluding_lo:rate5m{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"} != 0","legendFormat":"Receive"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"instance:node_network_transmit_drop_excluding_lo:rate5m{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"} != 0","legendFormat":"Transmit"}],"title":"Network
      Saturation (Drops Receive/Transmit)","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":24},"id":10,"panels":[],"title":"Disk
      IO","type":"row"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"showPoints":"never","stacking":{"mode":"normal"}},"unit":"percentunit"}},"gridPos":{"h":7,"w":12,"x":0,"y":25},"id":11,"options":{"legend":{"showLegend":false},"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"instance_device:node_disk_io_time_seconds:rate5m{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"} != 0","legendFormat":"{{device}}"}],"title":"Disk
      IO Utilisation","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"showPoints":"never","stacking":{"mode":"normal"}},"unit":"percentunit"}},"gridPos":{"h":7,"w":12,"x":12,"y":25},"id":12,"options":{"legend":{"showLegend":false},"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"instance_device:node_disk_io_time_weighted_seconds:rate5m{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"} != 0","legendFormat":"{{device}}"}],"title":"Disk
      IO Saturation","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":34},"id":13,"panels":[],"title":"Disk
      Space","type":"row"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"showPoints":"never","stacking":{"mode":"normal"}},"unit":"percentunit"}},"gridPos":{"h":7,"w":24,"x":0,"y":35},"id":14,"options":{"legend":{"showLegend":false},"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"sort_desc(1
      -\n  (\n    max without (mountpoint, fstype) (node_filesystem_avail_bytes{job=\"node-exporter\",
      fstype!=\"\", instance=\"$instance\", cluster=\"$cluster\"})\n    /\n    max
      without (mountpoint, fstype) (node_filesystem_size_bytes{job=\"node-exporter\",
      fstype!=\"\", instance=\"$instance\", cluster=\"$cluster\"})\n  ) != 0\n)\n","legendFormat":"{{device}}"}],"title":"Disk
      Space Utilisation","type":"timeseries"}],"refresh":"30s","schemaVersion":39,"tags":["node-exporter-mixin"],"templating":{"list":[{"name":"datasource","query":"prometheus","type":"datasource"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":2,"includeAll":false,"name":"cluster","query":"label_values(node_time_seconds,
      cluster)","refresh":2,"sort":1,"type":"query","allValue":".*"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"name":"instance","query":"label_values(node_exporter_build_info{job=\"node-exporter\",
      cluster=\"$cluster\"}, instance)","refresh":2,"sort":1,"type":"query"}]},"time":{"from":"now-1h","to":"now"},"timezone":
      "utc","title":"Node Exporter / USE Method / Node","uid":"fac67cfbe174d3ef53eb473d73d9212f"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-node-rsrc-use
    namespace: tomer
    resourceVersion: "2297425"
    uid: a783f6d6-5687-4b59-8689-0133cb0c213a
- apiVersion: v1
  data:
    nodes.json: '{"graphTooltip":1,"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":1,"panels":[],"title":"CPU","type":"row"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","stacking":{"mode":"normal"}},"max":1,"min":0,"unit":"percentunit"}},"gridPos":{"h":7,"w":12,"x":0,"y":1},"id":2,"options":{"tooltip":{"mode":"multi"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"(\n  (1
      - sum without (mode) (rate(node_cpu_seconds_total{job=\"node-exporter\", mode=~\"idle|iowait|steal\",
      instance=\"$instance\", cluster=\"$cluster\"}[$__rate_interval])))\n/ ignoring(cpu)
      group_left\n  count without (cpu, mode) (node_cpu_seconds_total{job=\"node-exporter\",
      mode=\"idle\", instance=\"$instance\", cluster=\"$cluster\"})\n)\n","intervalFactor":5,"legendFormat":"{{cpu}}"}],"title":"CPU
      Usage","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":0,"showPoints":"never"},"min":0,"unit":"short"}},"gridPos":{"h":7,"w":12,"x":12,"y":1},"id":3,"options":{"tooltip":{"mode":"multi"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"node_load1{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}","legendFormat":"1m load average"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"node_load5{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}","legendFormat":"5m load average"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"node_load15{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}","legendFormat":"15m load average"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"count(node_cpu_seconds_total{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\", mode=\"idle\"})","legendFormat":"logical
      cores"}],"title":"Load Average","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":8},"id":4,"title":"Memory","type":"row"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","stacking":{"mode":"normal"}},"min":0,"unit":"bytes"}},"gridPos":{"h":7,"w":18,"x":0,"y":9},"id":5,"options":{"tooltip":{"mode":"multi"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"(\n  node_memory_MemTotal_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}\n-\n  node_memory_MemFree_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}\n-\n  node_memory_Buffers_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}\n-\n  node_memory_Cached_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}\n)\n","legendFormat":"memory used"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"node_memory_Buffers_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}","legendFormat":"memory buffers"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"node_memory_Cached_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}","legendFormat":"memory cached"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"node_memory_MemFree_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}","legendFormat":"memory free"}],"title":"Memory
      Usage","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"max":100,"min":0,"thresholds":{"steps":[{"color":"rgba(50,
      172, 45, 0.97)"},{"color":"rgba(237, 129, 40, 0.89)","value":80},{"color":"rgba(245,
      54, 54, 0.9)","value":90}]},"unit":"percent"}},"gridPos":{"h":7,"w":6,"x":18,"y":9},"id":6,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"100
      -\n(\n  avg(node_memory_MemAvailable_bytes{job=\"node-exporter\", instance=\"$instance\",
      cluster=\"$cluster\"}) /\n  avg(node_memory_MemTotal_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"})\n* 100\n)\n"}],"title":"Memory
      Usage","type":"gauge"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":18},"id":7,"panels":[],"title":"Disk","type":"row"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":0,"showPoints":"never"},"min":0},"overrides":[{"matcher":{"id":"byRegexp","options":"/
      read| written/"},"properties":[{"id":"unit","value":"Bps"}]},{"matcher":{"id":"byRegexp","options":"/
      io time/"},"properties":[{"id":"unit","value":"percentunit"}]}]},"gridPos":{"h":7,"w":12,"x":0,"y":19},"id":8,"options":{"tooltip":{"mode":"multi"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"rate(node_disk_read_bytes_total{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\", device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\"}[$__rate_interval])","intervalFactor":1,"legendFormat":"{{device}}
      read"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"rate(node_disk_written_bytes_total{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\", device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\"}[$__rate_interval])","intervalFactor":1,"legendFormat":"{{device}}
      written"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"rate(node_disk_io_time_seconds_total{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\", device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\"}[$__rate_interval])","intervalFactor":1,"legendFormat":"{{device}}
      io time"}],"title":"Disk I/O","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"thresholds":{"steps":[{"color":"green"},{"color":"yellow","value":0.8},{"color":"red","value":0.9}]},"unit":"decbytes"},"overrides":[{"matcher":{"id":"byName","options":"Mounted
      on"},"properties":[{"id":"custom.width","value":260}]},{"matcher":{"id":"byName","options":"Size"},"properties":[{"id":"custom.width","value":93}]},{"matcher":{"id":"byName","options":"Used"},"properties":[{"id":"custom.width","value":72}]},{"matcher":{"id":"byName","options":"Available"},"properties":[{"id":"custom.width","value":88}]},{"matcher":{"id":"byName","options":"Used,
      %"},"properties":[{"id":"unit","value":"percentunit"},{"id":"custom.cellOptions","value":{"type":"gauge"}},{"id":"max","value":1},{"id":"min","value":0}]}]},"gridPos":{"h":7,"w":12,"x":12,"y":19},"id":9,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"max
      by (mountpoint) (node_filesystem_size_bytes{job=\"node-exporter\", instance=\"$instance\",
      cluster=\"$cluster\", fstype!=\"\", mountpoint!=\"\"})\n","format":"table","instant":true,"legendFormat":""},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"max
      by (mountpoint) (node_filesystem_avail_bytes{job=\"node-exporter\", instance=\"$instance\",
      cluster=\"$cluster\", fstype!=\"\", mountpoint!=\"\"})\n","format":"table","instant":true,"legendFormat":""}],"title":"Disk
      Space Usage","transformations":[{"id":"groupBy","options":{"fields":{"Value
      #A":{"aggregations":["lastNotNull"],"operation":"aggregate"},"Value #B":{"aggregations":["lastNotNull"],"operation":"aggregate"},"mountpoint":{"aggregations":[],"operation":"groupby"}}}},{"id":"merge"},{"id":"calculateField","options":{"alias":"Used","binary":{"left":"Value
      #A (lastNotNull)","operator":"-","reducer":"sum","right":"Value #B (lastNotNull)"},"mode":"binary","reduce":{"reducer":"sum"}}},{"id":"calculateField","options":{"alias":"Used,
      %","binary":{"left":"Used","operator":"/","reducer":"sum","right":"Value #A
      (lastNotNull)"},"mode":"binary","reduce":{"reducer":"sum"}}},{"id":"organize","options":{"excludeByName":{},"indexByName":{},"renameByName":{"Value
      #A (lastNotNull)":"Size","Value #B (lastNotNull)":"Available","mountpoint":"Mounted
      on"}}},{"id":"sortBy","options":{"fields":{},"sort":[{"field":"Mounted on"}]}}],"type":"table"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":26},"id":10,"panels":[],"title":"Network","type":"row"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"description":"Network
      received (bits/s)","fieldConfig":{"defaults":{"custom":{"fillOpacity":0,"showPoints":"never"},"min":0,"unit":"bps"}},"gridPos":{"h":7,"w":12,"x":0,"y":27},"id":11,"options":{"tooltip":{"mode":"multi"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"rate(node_network_receive_bytes_total{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\", device!=\"lo\"}[$__rate_interval])
      * 8","intervalFactor":1,"legendFormat":"{{device}}"}],"title":"Network Received","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"description":"Network
      transmitted (bits/s)","fieldConfig":{"defaults":{"custom":{"fillOpacity":0},"min":0,"unit":"bps"}},"gridPos":{"h":7,"w":12,"x":12,"y":27},"id":12,"options":{"tooltip":{"mode":"multi"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"rate(node_network_transmit_bytes_total{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\", device!=\"lo\"}[$__rate_interval])
      * 8","intervalFactor":1,"legendFormat":"{{device}}"}],"title":"Network Transmitted","type":"timeseries"}],"refresh":"30s","schemaVersion":39,"tags":["node-exporter-mixin"],"templating":{"list":[{"name":"datasource","query":"prometheus","type":"datasource"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":2,"label":"Cluster","name":"cluster","query":"label_values(node_uname_info{job=\"node-exporter\",
      sysname!=\"Darwin\"}, cluster)","refresh":2,"type":"query","allValue":".*"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"label":"Instance","name":"instance","query":"label_values(node_uname_info{job=\"node-exporter\",
      cluster=\"$cluster\", sysname!=\"Darwin\"}, instance)","refresh":2,"type":"query"}]},"time":{"from":"now-1h","to":"now"},"timezone":
      "utc","title":"Node Exporter / Nodes","uid":"7d57716318ee0dddbac5a7f451fb7753"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-nodes
    namespace: tomer
    resourceVersion: "2297443"
    uid: e9776776-a4c9-40b6-8659-90fb6db8d61c
- apiVersion: v1
  data:
    nodes-aix.json: '{"graphTooltip":1,"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":1,"panels":[],"title":"CPU","type":"row"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","stacking":{"mode":"normal"}},"max":1,"min":0,"unit":"percentunit"}},"gridPos":{"h":7,"w":12,"x":0,"y":1},"id":2,"options":{"tooltip":{"mode":"multi"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"(\n  (1
      - sum without (mode) (rate(node_cpu_seconds_total{job=\"node-exporter\", mode=~\"idle|iowait|steal\",
      instance=\"$instance\", cluster=\"$cluster\"}[$__rate_interval])))\n/ ignoring(cpu)
      group_left\n  count without (cpu, mode) (node_cpu_seconds_total{job=\"node-exporter\",
      mode=\"idle\", instance=\"$instance\", cluster=\"$cluster\"})\n)\n","intervalFactor":5,"legendFormat":"{{cpu}}"}],"title":"CPU
      Usage","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":0,"showPoints":"never"},"min":0,"unit":"short"}},"gridPos":{"h":7,"w":12,"x":12,"y":1},"id":3,"options":{"tooltip":{"mode":"multi"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"node_load1{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}","legendFormat":"1m load average"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"node_load5{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}","legendFormat":"5m load average"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"node_load15{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}","legendFormat":"15m load average"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"count(node_cpu_seconds_total{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\", mode=\"idle\"})","legendFormat":"logical
      cores"}],"title":"Load Average","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":8},"id":4,"title":"Memory","type":"row"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","stacking":{"mode":"none"}},"min":0,"unit":"bytes"}},"gridPos":{"h":7,"w":18,"x":0,"y":9},"id":5,"options":{"tooltip":{"mode":"multi"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"node_memory_total_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}","legendFormat":"Physical Memory"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"(\n    node_memory_total_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"} -\n    node_memory_available_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}\n)\n","legendFormat":"Memory Used"}],"title":"Memory
      Usage","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"max":100,"min":0,"thresholds":{"steps":[{"color":"rgba(50,
      172, 45, 0.97)"},{"color":"rgba(237, 129, 40, 0.89)","value":80},{"color":"rgba(245,
      54, 54, 0.9)","value":90}]},"unit":"percent"}},"gridPos":{"h":7,"w":6,"x":18,"y":9},"id":6,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"100
      -\n(\n  avg(node_memory_available_bytes{job=\"node-exporter\", instance=\"$instance\",
      cluster=\"$cluster\"}) /\n  avg(node_memory_total_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"})\n  * 100\n)\n"}],"title":"Memory
      Usage","type":"gauge"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":18},"id":7,"panels":[],"title":"Disk","type":"row"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":0,"showPoints":"never"},"min":0},"overrides":[{"matcher":{"id":"byRegexp","options":"/
      read| written/"},"properties":[{"id":"unit","value":"Bps"}]},{"matcher":{"id":"byRegexp","options":"/
      io time/"},"properties":[{"id":"unit","value":"percentunit"}]}]},"gridPos":{"h":7,"w":12,"x":0,"y":19},"id":8,"options":{"tooltip":{"mode":"multi"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"rate(node_disk_read_bytes_total{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\", device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\"}[$__rate_interval])","intervalFactor":1,"legendFormat":"{{device}}
      read"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"rate(node_disk_written_bytes_total{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\", device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\"}[$__rate_interval])","intervalFactor":1,"legendFormat":"{{device}}
      written"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"rate(node_disk_io_time_seconds_total{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\", device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\"}[$__rate_interval])","intervalFactor":1,"legendFormat":"{{device}}
      io time"}],"title":"Disk I/O","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"thresholds":{"steps":[{"color":"green"},{"color":"yellow","value":0.8},{"color":"red","value":0.9}]},"unit":"decbytes"},"overrides":[{"matcher":{"id":"byName","options":"Mounted
      on"},"properties":[{"id":"custom.width","value":260}]},{"matcher":{"id":"byName","options":"Size"},"properties":[{"id":"custom.width","value":93}]},{"matcher":{"id":"byName","options":"Used"},"properties":[{"id":"custom.width","value":72}]},{"matcher":{"id":"byName","options":"Available"},"properties":[{"id":"custom.width","value":88}]},{"matcher":{"id":"byName","options":"Used,
      %"},"properties":[{"id":"unit","value":"percentunit"},{"id":"custom.cellOptions","value":{"type":"gauge"}},{"id":"max","value":1},{"id":"min","value":0}]}]},"gridPos":{"h":7,"w":12,"x":12,"y":19},"id":9,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"max
      by (mountpoint) (node_filesystem_size_bytes{job=\"node-exporter\", instance=\"$instance\",
      cluster=\"$cluster\", fstype!=\"\", mountpoint!=\"\"})\n","format":"table","instant":true,"legendFormat":""},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"max
      by (mountpoint) (node_filesystem_avail_bytes{job=\"node-exporter\", instance=\"$instance\",
      cluster=\"$cluster\", fstype!=\"\", mountpoint!=\"\"})\n","format":"table","instant":true,"legendFormat":""}],"title":"Disk
      Space Usage","transformations":[{"id":"groupBy","options":{"fields":{"Value
      #A":{"aggregations":["lastNotNull"],"operation":"aggregate"},"Value #B":{"aggregations":["lastNotNull"],"operation":"aggregate"},"mountpoint":{"aggregations":[],"operation":"groupby"}}}},{"id":"merge"},{"id":"calculateField","options":{"alias":"Used","binary":{"left":"Value
      #A (lastNotNull)","operator":"-","reducer":"sum","right":"Value #B (lastNotNull)"},"mode":"binary","reduce":{"reducer":"sum"}}},{"id":"calculateField","options":{"alias":"Used,
      %","binary":{"left":"Used","operator":"/","reducer":"sum","right":"Value #A
      (lastNotNull)"},"mode":"binary","reduce":{"reducer":"sum"}}},{"id":"organize","options":{"excludeByName":{},"indexByName":{},"renameByName":{"Value
      #A (lastNotNull)":"Size","Value #B (lastNotNull)":"Available","mountpoint":"Mounted
      on"}}},{"id":"sortBy","options":{"fields":{},"sort":[{"field":"Mounted on"}]}}],"type":"table"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":26},"id":10,"panels":[],"title":"Network","type":"row"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"description":"Network
      received (bits/s)","fieldConfig":{"defaults":{"custom":{"fillOpacity":0,"showPoints":"never"},"min":0,"unit":"bps"}},"gridPos":{"h":7,"w":12,"x":0,"y":27},"id":11,"options":{"tooltip":{"mode":"multi"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"rate(node_network_receive_bytes_total{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\", device!=\"lo\"}[$__rate_interval])
      * 8","intervalFactor":1,"legendFormat":"{{device}}"}],"title":"Network Received","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"description":"Network
      transmitted (bits/s)","fieldConfig":{"defaults":{"custom":{"fillOpacity":0},"min":0,"unit":"bps"}},"gridPos":{"h":7,"w":12,"x":12,"y":27},"id":12,"options":{"tooltip":{"mode":"multi"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"rate(node_network_transmit_bytes_total{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\", device!=\"lo\"}[$__rate_interval])
      * 8","intervalFactor":1,"legendFormat":"{{device}}"}],"title":"Network Transmitted","type":"timeseries"}],"refresh":"30s","schemaVersion":39,"tags":["node-exporter-mixin"],"templating":{"list":[{"name":"datasource","query":"prometheus","type":"datasource"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":2,"label":"Cluster","name":"cluster","query":"label_values(node_uname_info{job=\"node-exporter\",
      sysname!=\"Darwin\"}, cluster)","refresh":2,"type":"query","allValue":".*"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"label":"Instance","name":"instance","query":"label_values(node_uname_info{job=\"node-exporter\",
      cluster=\"$cluster\", sysname!=\"Darwin\"}, instance)","refresh":2,"type":"query"}]},"time":{"from":"now-1h","to":"now"},"timezone":
      "utc","title":"Node Exporter / AIX","uid":"7e0a61e486f727d763fb1d86fdd629c2"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-nodes-aix
    namespace: tomer
    resourceVersion: "2297428"
    uid: 2c81046a-7d6b-4e65-a651-d198f96f494b
- apiVersion: v1
  data:
    nodes-darwin.json: '{"graphTooltip":1,"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":1,"panels":[],"title":"CPU","type":"row"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","stacking":{"mode":"normal"}},"max":1,"min":0,"unit":"percentunit"}},"gridPos":{"h":7,"w":12,"x":0,"y":1},"id":2,"options":{"tooltip":{"mode":"multi"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"(\n  (1
      - sum without (mode) (rate(node_cpu_seconds_total{job=\"node-exporter\", mode=~\"idle|iowait|steal\",
      instance=\"$instance\", cluster=\"$cluster\"}[$__rate_interval])))\n/ ignoring(cpu)
      group_left\n  count without (cpu, mode) (node_cpu_seconds_total{job=\"node-exporter\",
      mode=\"idle\", instance=\"$instance\", cluster=\"$cluster\"})\n)\n","intervalFactor":5,"legendFormat":"{{cpu}}"}],"title":"CPU
      Usage","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":0,"showPoints":"never"},"min":0,"unit":"short"}},"gridPos":{"h":7,"w":12,"x":12,"y":1},"id":3,"options":{"tooltip":{"mode":"multi"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"node_load1{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}","legendFormat":"1m load average"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"node_load5{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}","legendFormat":"5m load average"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"node_load15{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}","legendFormat":"15m load average"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"count(node_cpu_seconds_total{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\", mode=\"idle\"})","legendFormat":"logical
      cores"}],"title":"Load Average","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":8},"id":4,"title":"Memory","type":"row"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","stacking":{"mode":"none"}},"min":0,"unit":"bytes"}},"gridPos":{"h":7,"w":18,"x":0,"y":9},"id":5,"options":{"tooltip":{"mode":"multi"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"node_memory_total_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}","legendFormat":"Physical Memory"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"(\n    node_memory_internal_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"} -\n    node_memory_purgeable_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"} +\n    node_memory_wired_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"} +\n    node_memory_compressed_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}\n)\n","legendFormat":"Memory Used"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"(\n    node_memory_internal_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"} -\n    node_memory_purgeable_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}\n)\n","legendFormat":"App Memory"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"node_memory_wired_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}","legendFormat":"Wired Memory"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"node_memory_compressed_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}","legendFormat":"Compressed"}],"title":"Memory
      Usage","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"max":100,"min":0,"thresholds":{"steps":[{"color":"rgba(50,
      172, 45, 0.97)"},{"color":"rgba(237, 129, 40, 0.89)","value":80},{"color":"rgba(245,
      54, 54, 0.9)","value":90}]},"unit":"percent"}},"gridPos":{"h":7,"w":6,"x":18,"y":9},"id":6,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"(\n    (\n      avg(node_memory_internal_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}) -\n      avg(node_memory_purgeable_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}) +\n      avg(node_memory_wired_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"}) +\n      avg(node_memory_compressed_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"})\n    ) /\n    avg(node_memory_total_bytes{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\"})\n)\n*\n100\n"}],"title":"Memory
      Usage","type":"gauge"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":18},"id":7,"panels":[],"title":"Disk","type":"row"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":0,"showPoints":"never"},"min":0},"overrides":[{"matcher":{"id":"byRegexp","options":"/
      read| written/"},"properties":[{"id":"unit","value":"Bps"}]},{"matcher":{"id":"byRegexp","options":"/
      io time/"},"properties":[{"id":"unit","value":"percentunit"}]}]},"gridPos":{"h":7,"w":12,"x":0,"y":19},"id":8,"options":{"tooltip":{"mode":"multi"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"rate(node_disk_read_bytes_total{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\", device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\"}[$__rate_interval])","intervalFactor":1,"legendFormat":"{{device}}
      read"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"rate(node_disk_written_bytes_total{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\", device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\"}[$__rate_interval])","intervalFactor":1,"legendFormat":"{{device}}
      written"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"rate(node_disk_io_time_seconds_total{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\", device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\"}[$__rate_interval])","intervalFactor":1,"legendFormat":"{{device}}
      io time"}],"title":"Disk I/O","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"fieldConfig":{"defaults":{"thresholds":{"steps":[{"color":"green"},{"color":"yellow","value":0.8},{"color":"red","value":0.9}]},"unit":"decbytes"},"overrides":[{"matcher":{"id":"byName","options":"Mounted
      on"},"properties":[{"id":"custom.width","value":260}]},{"matcher":{"id":"byName","options":"Size"},"properties":[{"id":"custom.width","value":93}]},{"matcher":{"id":"byName","options":"Used"},"properties":[{"id":"custom.width","value":72}]},{"matcher":{"id":"byName","options":"Available"},"properties":[{"id":"custom.width","value":88}]},{"matcher":{"id":"byName","options":"Used,
      %"},"properties":[{"id":"unit","value":"percentunit"},{"id":"custom.cellOptions","value":{"type":"gauge"}},{"id":"max","value":1},{"id":"min","value":0}]}]},"gridPos":{"h":7,"w":12,"x":12,"y":19},"id":9,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"max
      by (mountpoint) (node_filesystem_size_bytes{job=\"node-exporter\", instance=\"$instance\",
      cluster=\"$cluster\", fstype!=\"\", mountpoint!=\"\"})\n","format":"table","instant":true,"legendFormat":""},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"max
      by (mountpoint) (node_filesystem_avail_bytes{job=\"node-exporter\", instance=\"$instance\",
      cluster=\"$cluster\", fstype!=\"\", mountpoint!=\"\"})\n","format":"table","instant":true,"legendFormat":""}],"title":"Disk
      Space Usage","transformations":[{"id":"groupBy","options":{"fields":{"Value
      #A":{"aggregations":["lastNotNull"],"operation":"aggregate"},"Value #B":{"aggregations":["lastNotNull"],"operation":"aggregate"},"mountpoint":{"aggregations":[],"operation":"groupby"}}}},{"id":"merge"},{"id":"calculateField","options":{"alias":"Used","binary":{"left":"Value
      #A (lastNotNull)","operator":"-","reducer":"sum","right":"Value #B (lastNotNull)"},"mode":"binary","reduce":{"reducer":"sum"}}},{"id":"calculateField","options":{"alias":"Used,
      %","binary":{"left":"Used","operator":"/","reducer":"sum","right":"Value #A
      (lastNotNull)"},"mode":"binary","reduce":{"reducer":"sum"}}},{"id":"organize","options":{"excludeByName":{},"indexByName":{},"renameByName":{"Value
      #A (lastNotNull)":"Size","Value #B (lastNotNull)":"Available","mountpoint":"Mounted
      on"}}},{"id":"sortBy","options":{"fields":{},"sort":[{"field":"Mounted on"}]}}],"type":"table"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":26},"id":10,"panels":[],"title":"Network","type":"row"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"description":"Network
      received (bits/s)","fieldConfig":{"defaults":{"custom":{"fillOpacity":0,"showPoints":"never"},"min":0,"unit":"bps"}},"gridPos":{"h":7,"w":12,"x":0,"y":27},"id":11,"options":{"tooltip":{"mode":"multi"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"rate(node_network_receive_bytes_total{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\", device!=\"lo\"}[$__rate_interval])
      * 8","intervalFactor":1,"legendFormat":"{{device}}"}],"title":"Network Received","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"description":"Network
      transmitted (bits/s)","fieldConfig":{"defaults":{"custom":{"fillOpacity":0},"min":0,"unit":"bps"}},"gridPos":{"h":7,"w":12,"x":12,"y":27},"id":12,"options":{"tooltip":{"mode":"multi"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"rate(node_network_transmit_bytes_total{job=\"node-exporter\",
      instance=\"$instance\", cluster=\"$cluster\", device!=\"lo\"}[$__rate_interval])
      * 8","intervalFactor":1,"legendFormat":"{{device}}"}],"title":"Network Transmitted","type":"timeseries"}],"refresh":"30s","schemaVersion":39,"tags":["node-exporter-mixin"],"templating":{"list":[{"name":"datasource","query":"prometheus","type":"datasource"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":2,"label":"Cluster","name":"cluster","query":"label_values(node_uname_info{job=\"node-exporter\",
      sysname=\"Darwin\"},  cluster)","refresh":2,"type":"query","allValue":".*"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"label":"Instance","name":"instance","query":"label_values(node_uname_info{job=\"node-exporter\",
      cluster=\"$cluster\", sysname=\"Darwin\"}, instance)","refresh":2,"type":"query"}]},"time":{"from":"now-1h","to":"now"},"timezone":
      "utc","title":"Node Exporter / MacOS","uid":"629701ea43bf69291922ea45f4a87d37"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-nodes-darwin
    namespace: tomer
    resourceVersion: "2297441"
    uid: 5f311cf8-b155-4ad2-a817-f2dc8ca15fca
- apiVersion: v1
  data:
    persistentvolumesusage.json: '{"editable":true,"links":[{"asDropdown":true,"includeVars":true,"keepTime":true,"tags":["kubernetes-mixin"],"targetBlank":false,"title":"Kubernetes","type":"dashboards"}],"panels":[{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"bytes"}},"gridPos":{"h":7,"w":18,"y":0},"id":1,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(\n  sum
      without(instance, node) (topk(1, (kubelet_volume_stats_capacity_bytes{cluster=\"$cluster\",
      job=\"kubelet\", metrics_path=\"/metrics\", namespace=\"$namespace\", persistentvolumeclaim=\"$volume\"})))\n  -\n  sum
      without(instance, node) (topk(1, (kubelet_volume_stats_available_bytes{cluster=\"$cluster\",
      job=\"kubelet\", metrics_path=\"/metrics\", namespace=\"$namespace\", persistentvolumeclaim=\"$volume\"})))\n)\n","legendFormat":"Used
      Space"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      without(instance, node) (topk(1, (kubelet_volume_stats_available_bytes{cluster=\"$cluster\",
      job=\"kubelet\", metrics_path=\"/metrics\", namespace=\"$namespace\", persistentvolumeclaim=\"$volume\"})))\n","legendFormat":"Free
      Space"}],"title":"Volume Space Usage","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"color":{"mode":"thresholds"},"max":100,"min":0,"thresholds":{"mode":"absolute","steps":[{"color":"green","value":0},{"color":"orange","value":80},{"color":"red","value":90}]},"unit":"percent"}},"gridPos":{"h":7,"w":6,"x":18,"y":0},"id":2,"interval":"1m","pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"max
      without(instance,node) (\n(\n  topk(1, kubelet_volume_stats_capacity_bytes{cluster=\"$cluster\",
      job=\"kubelet\", metrics_path=\"/metrics\", namespace=\"$namespace\", persistentvolumeclaim=\"$volume\"})\n  -\n  topk(1,
      kubelet_volume_stats_available_bytes{cluster=\"$cluster\", job=\"kubelet\",
      metrics_path=\"/metrics\", namespace=\"$namespace\", persistentvolumeclaim=\"$volume\"})\n)\n/\ntopk(1,
      kubelet_volume_stats_capacity_bytes{cluster=\"$cluster\", job=\"kubelet\", metrics_path=\"/metrics\",
      namespace=\"$namespace\", persistentvolumeclaim=\"$volume\"})\n* 100)\n","instant":true}],"title":"Volume
      Space Usage","type":"gauge"},{"datasource":{"type":"datasource","uid":"-- Mixed
      --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"none"}},"gridPos":{"h":7,"w":18,"y":7},"id":3,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum
      without(instance, node) (topk(1, (kubelet_volume_stats_inodes_used{cluster=\"$cluster\",
      job=\"kubelet\", metrics_path=\"/metrics\", namespace=\"$namespace\", persistentvolumeclaim=\"$volume\"})))","legendFormat":"Used
      inodes"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"(\n  sum
      without(instance, node) (topk(1, (kubelet_volume_stats_inodes{cluster=\"$cluster\",
      job=\"kubelet\", metrics_path=\"/metrics\", namespace=\"$namespace\", persistentvolumeclaim=\"$volume\"})))\n  -\n  sum
      without(instance, node) (topk(1, (kubelet_volume_stats_inodes_used{cluster=\"$cluster\",
      job=\"kubelet\", metrics_path=\"/metrics\", namespace=\"$namespace\", persistentvolumeclaim=\"$volume\"})))\n)\n","legendFormat":"Free
      inodes"}],"title":"Volume inodes Usage","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"color":{"mode":"thresholds"},"max":100,"min":0,"thresholds":{"mode":"absolute","steps":[{"color":"green","value":0},{"color":"orange","value":80},{"color":"red","value":90}]},"unit":"percent"}},"gridPos":{"h":7,"w":6,"x":18,"y":7},"id":4,"interval":"1m","pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"max
      without(instance,node) (\ntopk(1, kubelet_volume_stats_inodes_used{cluster=\"$cluster\",
      job=\"kubelet\", metrics_path=\"/metrics\", namespace=\"$namespace\", persistentvolumeclaim=\"$volume\"})\n/\ntopk(1,
      kubelet_volume_stats_inodes{cluster=\"$cluster\", job=\"kubelet\", metrics_path=\"/metrics\",
      namespace=\"$namespace\", persistentvolumeclaim=\"$volume\"})\n* 100)\n","instant":true}],"title":"Volume
      inodes Usage","type":"gauge"}],"refresh":"10s","schemaVersion":39,"tags":["kubernetes-mixin"],"templating":{"list":[{"current":{"selected":true,"text":"default","value":"default"},"hide":0,"label":"Data
      source","name":"datasource","query":"prometheus","regex":"","type":"datasource"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":2,"label":"cluster","name":"cluster","query":"label_values(kubelet_volume_stats_capacity_bytes{job=\"kubelet\",
      metrics_path=\"/metrics\"}, cluster)","refresh":2,"sort":1,"type":"query","allValue":".*"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":0,"label":"Namespace","name":"namespace","query":"label_values(kubelet_volume_stats_capacity_bytes{cluster=\"$cluster\",
      job=\"kubelet\", metrics_path=\"/metrics\"}, namespace)","refresh":2,"sort":1,"type":"query"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":0,"label":"PersistentVolumeClaim","name":"volume","query":"label_values(kubelet_volume_stats_capacity_bytes{cluster=\"$cluster\",
      job=\"kubelet\", metrics_path=\"/metrics\", namespace=\"$namespace\"}, persistentvolumeclaim)","refresh":2,"sort":1,"type":"query"}]},"time":{"from":"now-1h","to":"now"},"timezone":
      "utc","title":"Kubernetes / Persistent Volumes","uid":"919b92a8e8041bd567af9edab12c840c"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-persistentvolumesusage
    namespace: tomer
    resourceVersion: "2297438"
    uid: 635f1a17-2404-467b-b17b-02f46e3bd0df
- apiVersion: v1
  data:
    pod-total.json: '{"editable":true,"links":[{"asDropdown":true,"includeVars":true,"keepTime":true,"tags":["kubernetes-mixin"],"targetBlank":false,"title":"Kubernetes","type":"dashboards"}],"panels":[{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"displayName":"$pod","max":10000000000,"min":0,"thresholds":{"steps":[{"color":"dark-green","index":0,"value":null},{"color":"dark-yellow","index":1,"value":5000000000},{"color":"dark-red","index":2,"value":7000000000}]},"unit":"Bps"}},"gridPos":{"h":9,"w":12,"x":0,"y":0},"id":1,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_receive_bytes_total{cluster=\"$cluster\",namespace=~\"$namespace\",
      pod=~\"$pod\"}[$__rate_interval]))","legendFormat":"__auto"}],"title":"Current
      Rate of Bytes Received","type":"gauge"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"displayName":"$pod","max":10000000000,"min":0,"thresholds":{"steps":[{"color":"dark-green","index":0,"value":null},{"color":"dark-yellow","index":1,"value":5000000000},{"color":"dark-red","index":2,"value":7000000000}]},"unit":"Bps"}},"gridPos":{"h":9,"w":12,"x":12,"y":0},"id":2,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_transmit_bytes_total{cluster=\"$cluster\",namespace=~\"$namespace\",
      pod=~\"$pod\"}[$__rate_interval]))","legendFormat":"__auto"}],"title":"Current
      Rate of Bytes Transmitted","type":"gauge"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"},"unit":"binBps"}},"gridPos":{"h":9,"w":12,"x":0,"y":9},"id":3,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_receive_bytes_total{cluster=\"$cluster\",namespace=~\"$namespace\",
      pod=~\"$pod\"}[$__rate_interval])) by (pod)","legendFormat":"__auto"}],"title":"Receive
      Bandwidth","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"},"unit":"binBps"}},"gridPos":{"h":9,"w":12,"x":12,"y":9},"id":4,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_transmit_bytes_total{cluster=\"$cluster\",namespace=~\"$namespace\",
      pod=~\"$pod\"}[$__rate_interval])) by (pod)","legendFormat":"__auto"}],"title":"Transmit
      Bandwidth","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"},"unit":"pps"}},"gridPos":{"h":9,"w":12,"x":0,"y":18},"id":5,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_receive_packets_total{cluster=\"$cluster\",namespace=~\"$namespace\",
      pod=~\"$pod\"}[$__rate_interval])) by (pod)","legendFormat":"__auto"}],"title":"Rate
      of Received Packets","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"},"unit":"pps"}},"gridPos":{"h":9,"w":12,"x":12,"y":18},"id":6,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_transmit_packets_total{cluster=\"$cluster\",namespace=~\"$namespace\",
      pod=~\"$pod\"}[$__rate_interval])) by (pod)","legendFormat":"__auto"}],"title":"Rate
      of Transmitted Packets","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"},"unit":"pps"}},"gridPos":{"h":9,"w":12,"x":0,"y":27},"id":7,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_receive_packets_dropped_total{cluster=\"$cluster\",namespace=~\"$namespace\",
      pod=~\"$pod\"}[$__rate_interval])) by (pod)","legendFormat":"__auto"}],"title":"Rate
      of Received Packets Dropped","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"showPoints":"never"},"unit":"pps"}},"gridPos":{"h":9,"w":12,"x":12,"y":27},"id":8,"interval":"1m","options":{"legend":{"asTable":true,"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(container_network_transmit_packets_dropped_total{cluster=\"$cluster\",namespace=~\"$namespace\",
      pod=~\"$pod\"}[$__rate_interval])) by (pod)","legendFormat":"__auto"}],"title":"Rate
      of Transmitted Packets Dropped","type":"timeseries"}],"refresh":"10s","schemaVersion":39,"tags":["kubernetes-mixin"],"templating":{"list":[{"current":{"selected":true,"text":"default","value":"default"},"hide":0,"label":"Data
      source","name":"datasource","query":"prometheus","regex":"","type":"datasource"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":2,"label":"cluster","name":"cluster","query":"label_values(up{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\"}, cluster)","refresh":2,"sort":1,"type":"query","allValue":".*"},{"allValue":".+","current":{"selected":false,"text":"kube-system","value":"kube-system"},"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":0,"includeAll":true,"label":"namespace","name":"namespace","query":"label_values(container_network_receive_packets_total{cluster=\"$cluster\"},
      namespace)","refresh":2,"sort":1,"type":"query"},{"current":{"selected":false,"text":"kube-system","value":"kube-system"},"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":0,"label":"pod","name":"pod","query":"label_values(container_network_receive_packets_total{cluster=\"$cluster\",namespace=~\"$namespace\"},
      pod)","refresh":2,"sort":1,"type":"query"}]},"time":{"from":"now-1h","to":"now"},"timezone":
      "utc","title":"Kubernetes / Networking / Pod","uid":"7a18067ce943a40ae25454675c19ff5c"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-pod-total
    namespace: tomer
    resourceVersion: "2297429"
    uid: b77eaa27-a3fb-4c26-8fac-0952c4051d35
- apiVersion: v1
  data:
    prometheus.json: '{"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":1,"panels":[],"title":"Prometheus
      Stats","type":"row"},{"datasource":{"type":"prometheus","uid":"$datasource"},"fieldConfig":{"defaults":{"decimals":2,"displayName":"","unit":"short"},"overrides":[{"matcher":{"id":"byName","options":"Time"},"properties":[{"id":"displayName","value":"Time"},{"id":"custom.align","value":null},{"id":"custom.hidden","value":"true"}]},{"matcher":{"id":"byName","options":"cluster"},"properties":[{"id":"custom.align","value":null},{"id":"unit","value":"short"},{"id":"decimals","value":2},{"id":"displayName","value":"Cluster"}]},{"matcher":{"id":"byName","options":"job"},"properties":[{"id":"custom.align","value":null},{"id":"unit","value":"short"},{"id":"decimals","value":2},{"id":"displayName","value":"Job"}]},{"matcher":{"id":"byName","options":"instance"},"properties":[{"id":"displayName","value":"Instance"},{"id":"custom.align","value":null},{"id":"unit","value":"short"},{"id":"decimals","value":2}]},{"matcher":{"id":"byName","options":"version"},"properties":[{"id":"displayName","value":"Version"},{"id":"custom.align","value":null},{"id":"unit","value":"short"},{"id":"decimals","value":2}]},{"matcher":{"id":"byName","options":"Value
      #A"},"properties":[{"id":"displayName","value":"Count"},{"id":"custom.align","value":null},{"id":"unit","value":"short"},{"id":"decimals","value":2},{"id":"custom.hidden","value":"true"}]},{"matcher":{"id":"byName","options":"Value
      #B"},"properties":[{"id":"displayName","value":"Uptime"},{"id":"custom.align","value":null},{"id":"unit","value":"s"}]}]},"gridPos":{"h":7,"w":24,"x":0,"y":1},"id":2,"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"count
      by (cluster, job, instance, version) (prometheus_build_info{cluster=~\"$cluster\",
      job=~\"$job\", instance=~\"$instance\"})","format":"table","instant":true,"legendFormat":""},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"max
      by (cluster, job, instance) (time() - process_start_time_seconds{cluster=~\"$cluster\",
      job=~\"$job\", instance=~\"$instance\"})","format":"table","instant":true,"legendFormat":""}],"title":"Prometheus
      Stats","type":"table"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":8},"id":3,"panels":[],"title":"Discovery","type":"row"},{"datasource":{"type":"prometheus","uid":"$datasource"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never"},"min":0,"unit":"ms"}},"gridPos":{"h":7,"w":12,"x":0,"y":9},"id":4,"options":{"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"sum(rate(prometheus_target_sync_length_seconds_sum{cluster=~\"$cluster\",job=~\"$job\",instance=~\"$instance\"}[5m]))
      by (cluster, job, scrape_job, instance) * 1e3","format":"time_series","legendFormat":"{{cluster}}:{{job}}:{{instance}}:{{scrape_job}}"}],"title":"Target
      Sync","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"$datasource"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"lineWidth":0,"showPoints":"never","stacking":{"mode":"normal"}},"min":0,"unit":"short"}},"gridPos":{"h":7,"w":12,"x":12,"y":9},"id":5,"options":{"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"sum
      by (cluster, job, instance) (prometheus_sd_discovered_targets{cluster=~\"$cluster\",
      job=~\"$job\",instance=~\"$instance\"})","format":"time_series","legendFormat":"{{cluster}}:{{job}}:{{instance}}"}],"title":"Targets","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":16},"id":6,"panels":[],"title":"Retrieval","type":"row"},{"datasource":{"type":"prometheus","uid":"$datasource"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never"},"min":0,"unit":"ms"}},"gridPos":{"h":7,"w":8,"x":0,"y":17},"id":7,"options":{"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"rate(prometheus_target_interval_length_seconds_sum{cluster=~\"$cluster\",
      job=~\"$job\",instance=~\"$instance\"}[5m]) / rate(prometheus_target_interval_length_seconds_count{cluster=~\"$cluster\",
      job=~\"$job\",instance=~\"$instance\"}[5m]) * 1e3","format":"time_series","legendFormat":"{{cluster}}:{{job}}:{{instance}}
      {{interval}} configured"}],"title":"Average Scrape Interval Duration","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"$datasource"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"lineWidth":0,"showPoints":"never","stacking":{"mode":"normal"}},"min":0,"unit":"ms"}},"gridPos":{"h":7,"w":8,"x":8,"y":17},"id":8,"options":{"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"sum
      by (cluster, job, instance) (rate(prometheus_target_scrapes_exceeded_body_size_limit_total{cluster=~\"$cluster\",job=~\"$job\",instance=~\"$instance\"}[1m]))","format":"time_series","legendFormat":"exceeded
      body size limit: {{cluster}} {{job}} {{instance}}"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"sum
      by (cluster, job, instance) (rate(prometheus_target_scrapes_exceeded_sample_limit_total{cluster=~\"$cluster\",job=~\"$job\",instance=~\"$instance\"}[1m]))","format":"time_series","legendFormat":"exceeded
      sample limit: {{cluster}} {{job}} {{instance}}"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"sum
      by (cluster, job, instance) (rate(prometheus_target_scrapes_sample_duplicate_timestamp_total{cluster=~\"$cluster\",job=~\"$job\",instance=~\"$instance\"}[1m]))","format":"time_series","legendFormat":"duplicate
      timestamp: {{cluster}} {{job}} {{instance}}"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"sum
      by (cluster, job, instance) (rate(prometheus_target_scrapes_sample_out_of_bounds_total{cluster=~\"$cluster\",job=~\"$job\",instance=~\"$instance\"}[1m]))","format":"time_series","legendFormat":"out
      of bounds: {{cluster}} {{job}} {{instance}}"},{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"sum
      by (cluster, job, instance) (rate(prometheus_target_scrapes_sample_out_of_order_total{cluster=~\"$cluster\",job=~\"$job\",instance=~\"$instance\"}[1m]))","format":"time_series","legendFormat":"out
      of order: {{cluster}} {{job}} {{instance}}"}],"title":"Scrape failures","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"$datasource"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"lineWidth":0,"showPoints":"never","stacking":{"mode":"normal"}},"min":0,"unit":"short"}},"gridPos":{"h":7,"w":8,"x":16,"y":17},"id":9,"options":{"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"rate(prometheus_tsdb_head_samples_appended_total{cluster=~\"$cluster\",
      job=~\"$job\",instance=~\"$instance\"}[5m])","format":"time_series","legendFormat":"{{cluster}}
      {{job}} {{instance}}"}],"title":"Appended Samples","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":24},"id":10,"panels":[],"title":"Storage","type":"row"},{"datasource":{"type":"prometheus","uid":"$datasource"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"lineWidth":0,"showPoints":"never","stacking":{"mode":"normal"}},"min":0,"unit":"short"}},"gridPos":{"h":7,"w":12,"x":0,"y":25},"id":11,"options":{"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"prometheus_tsdb_head_series{cluster=~\"$cluster\",job=~\"$job\",instance=~\"$instance\"}","format":"time_series","legendFormat":"{{cluster}}
      {{job}} {{instance}} head series"}],"title":"Head Series","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"$datasource"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"lineWidth":0,"showPoints":"never","stacking":{"mode":"normal"}},"min":0,"unit":"short"}},"gridPos":{"h":7,"w":12,"x":12,"y":25},"id":12,"options":{"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"prometheus_tsdb_head_chunks{cluster=~\"$cluster\",job=~\"$job\",instance=~\"$instance\"}","format":"time_series","legendFormat":"{{cluster}}
      {{job}} {{instance}} head chunks"}],"title":"Head Chunks","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":32},"id":13,"panels":[],"title":"Query","type":"row"},{"datasource":{"type":"prometheus","uid":"$datasource"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"lineWidth":0,"showPoints":"never","stacking":{"mode":"normal"}},"min":0,"unit":"short"}},"gridPos":{"h":7,"w":12,"x":0,"y":33},"id":14,"options":{"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"rate(prometheus_engine_query_duration_seconds_count{cluster=~\"$cluster\",job=~\"$job\",instance=~\"$instance\",slice=\"inner_eval\"}[5m])","format":"time_series","legendFormat":"{{cluster}}
      {{job}} {{instance}}"}],"title":"Query Rate","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"$datasource"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":100,"lineWidth":0,"showPoints":"never","stacking":{"mode":"normal"}},"min":0,"unit":"ms"}},"gridPos":{"h":7,"w":12,"x":12,"y":33},"id":15,"options":{"tooltip":{"mode":"multi","sort":"desc"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"$datasource"},"expr":"max
      by (slice) (prometheus_engine_query_duration_seconds{quantile=\"0.9\",cluster=~\"$cluster\",
      job=~\"$job\",instance=~\"$instance\"}) * 1e3","format":"time_series","legendFormat":"{{slice}}"}],"title":"Stage
      Duration","type":"timeseries"}],"schemaVersion":39,"tags":["prometheus-mixin"],"templating":{"list":[{"current":{"selected":false,"text":"default","value":"default"},"hide":0,"label":"Data
      source","name":"datasource","query":"prometheus","type":"datasource"},{"allValue":".*","current":{"selected":false,"text":["$__all"],"value":["$__all"]},"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":2,"includeAll":true,"label":"cluster","multi":true,"name":"cluster","query":"label_values(prometheus_build_info{},
      cluster)","refresh":2,"sort":2,"type":"query"},{"allValue":".+","datasource":{"type":"prometheus","uid":"${datasource}"},"includeAll":true,"label":"job","multi":true,"name":"job","query":"label_values(prometheus_build_info{cluster=~\"$cluster\"},
      job)","refresh":2,"sort":2,"type":"query"},{"allValue":".+","datasource":{"type":"prometheus","uid":"${datasource}"},"includeAll":true,"label":"instance","multi":true,"name":"instance","query":"label_values(prometheus_build_info{cluster=~\"$cluster\",
      job=~\"$job\"}, instance)","refresh":2,"sort":2,"type":"query"}]},"time":{"from":"now-1h","to":"now"},"timepicker":{"refresh_intervals":["60s"]},"timezone":
      "utc","title":"Prometheus / Overview"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-prometheus
    namespace: tomer
    resourceVersion: "2297430"
    uid: 1bc535f1-20ee-446e-848d-510f4ea37785
- apiVersion: v1
  data:
    proxy.json: '{"editable":true,"links":[{"asDropdown":true,"includeVars":true,"keepTime":true,"tags":["kubernetes-mixin"],"targetBlank":false,"title":"Kubernetes","type":"dashboards"}],"panels":[{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"unit":"none"}},"gridPos":{"h":7,"w":4,"x":0,"y":0},"id":1,"interval":"1m","options":{"colorMode":"none"},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(up{cluster=\"$cluster\",
      job=\"kube-proxy\"})","instant":true}],"title":"Up","type":"stat"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"ops"}},"gridPos":{"h":7,"w":10,"x":4,"y":0},"id":2,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(kubeproxy_sync_proxy_rules_duration_seconds_count{cluster=\"$cluster\",
      job=\"kube-proxy\", instance=~\"$instance\"}[$__rate_interval]))","legendFormat":"rate"}],"title":"Rules
      Sync Rate","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"s"}},"gridPos":{"h":7,"w":10,"x":14,"y":0},"id":3,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"histogram_quantile(0.99,rate(kubeproxy_sync_proxy_rules_duration_seconds_bucket{cluster=\"$cluster\",
      job=\"kube-proxy\", instance=~\"$instance\"}[$__rate_interval]))","legendFormat":"{{instance}}"}],"title":"Rules
      Sync Latency 99th Quantile","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"ops"}},"gridPos":{"h":7,"w":12,"x":0,"y":7},"id":4,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(kubeproxy_network_programming_duration_seconds_count{cluster=\"$cluster\",
      job=\"kube-proxy\", instance=~\"$instance\"}[$__rate_interval]))","legendFormat":"rate"}],"title":"Network
      Programming Rate","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"s"}},"gridPos":{"h":7,"w":12,"x":12,"y":7},"id":5,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"histogram_quantile(0.99,
      sum(rate(kubeproxy_network_programming_duration_seconds_bucket{cluster=\"$cluster\",
      job=\"kube-proxy\", instance=~\"$instance\"}[$__rate_interval])) by (instance,
      le))","legendFormat":"{{instance}}"}],"title":"Network Programming Latency 99th
      Quantile","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"ops"}},"gridPos":{"h":7,"w":8,"x":0,"y":14},"id":6,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(rest_client_requests_total{cluster=\"$cluster\",job=\"kube-proxy\",
      instance=~\"$instance\",code=~\"2..\"}[$__rate_interval]))","legendFormat":"2xx"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(rest_client_requests_total{cluster=\"$cluster\",job=\"kube-proxy\",
      instance=~\"$instance\",code=~\"3..\"}[$__rate_interval]))","legendFormat":"3xx"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(rest_client_requests_total{cluster=\"$cluster\",job=\"kube-proxy\",
      instance=~\"$instance\",code=~\"4..\"}[$__rate_interval]))","legendFormat":"4xx"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(rest_client_requests_total{cluster=\"$cluster\",job=\"kube-proxy\",
      instance=~\"$instance\",code=~\"5..\"}[$__rate_interval]))","legendFormat":"5xx"}],"title":"Kube
      API Request Rate","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"ops"}},"gridPos":{"h":7,"w":16,"x":8,"y":14},"id":7,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"histogram_quantile(0.99,
      sum(rate(rest_client_request_duration_seconds_bucket{cluster=\"$cluster\", job=\"kube-proxy\",instance=~\"$instance\",verb=\"POST\"}[$__rate_interval]))
      by (verb, le))","legendFormat":"{{verb}}"}],"title":"Post Request Latency 99th
      Quantile","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"s"}},"gridPos":{"h":7,"w":24,"x":0,"y":21},"id":8,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"histogram_quantile(0.99,
      sum(rate(rest_client_request_duration_seconds_bucket{cluster=\"$cluster\", job=\"kube-proxy\",
      instance=~\"$instance\", verb=\"GET\"}[$__rate_interval])) by (verb, le))","legendFormat":"{{verb}}"}],"title":"Get
      Request Latency 99th Quantile","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"bytes"}},"gridPos":{"h":7,"w":8,"x":0,"y":28},"id":9,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"process_resident_memory_bytes{cluster=\"$cluster\",
      job=\"kube-proxy\",instance=~\"$instance\"}","legendFormat":"{{instance}}"}],"title":"Memory","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"short"}},"gridPos":{"h":7,"w":8,"x":8,"y":28},"id":10,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"rate(process_cpu_seconds_total{cluster=\"$cluster\",
      job=\"kube-proxy\",instance=~\"$instance\"}[$__rate_interval])","legendFormat":"{{instance}}"}],"title":"CPU
      usage","type":"timeseries"},{"datasource":{"type":"datasource","uid":"-- Mixed
      --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"short"}},"gridPos":{"h":7,"w":8,"x":16,"y":28},"id":11,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"go_goroutines{cluster=\"$cluster\",
      job=\"kube-proxy\",instance=~\"$instance\"}","legendFormat":"{{instance}}"}],"title":"Goroutines","type":"timeseries"}],"refresh":"10s","schemaVersion":39,"tags":["kubernetes-mixin"],"templating":{"list":[{"current":{"selected":true,"text":"default","value":"default"},"hide":0,"label":"Data
      source","name":"datasource","query":"prometheus","regex":"","type":"datasource"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":2,"label":"cluster","name":"cluster","query":"label_values(up{job=\"kube-proxy\"},
      cluster)","refresh":2,"sort":1,"type":"query","allValue":".*"},{"allValue":".+","datasource":{"type":"prometheus","uid":"${datasource}"},"hide":0,"includeAll":true,"label":"instance","name":"instance","query":"label_values(up{job=\"kube-proxy\",
      cluster=\"$cluster\", job=\"kube-proxy\"}, instance)","refresh":2,"type":"query"}]},"time":{"from":"now-1h","to":"now"},"timezone":
      "utc","title":"Kubernetes / Proxy","uid":"632e265de029684c40b21cb76bca4f94"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-proxy
    namespace: tomer
    resourceVersion: "2297448"
    uid: 6bdea7a7-e5c6-4453-9fe7-3f46d9f4ea0f
- apiVersion: v1
  data:
    scheduler.json: '{"editable":true,"links":[{"asDropdown":true,"includeVars":true,"keepTime":true,"tags":["kubernetes-mixin"],"targetBlank":false,"title":"Kubernetes","type":"dashboards"}],"panels":[{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"unit":"none"}},"gridPos":{"h":7,"w":4,"x":0,"y":0},"id":1,"interval":"1m","options":{"colorMode":"none"},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(up{cluster=\"$cluster\",
      job=\"kube-scheduler\"})","instant":true}],"title":"Up","type":"stat"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"ops"}},"gridPos":{"h":7,"w":10,"x":4,"y":0},"id":2,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(scheduler_e2e_scheduling_duration_seconds_count{cluster=\"$cluster\",
      job=\"kube-scheduler\", instance=~\"$instance\"}[$__rate_interval])) by (cluster,
      instance)","legendFormat":"{{cluster}} {{instance}} e2e"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(scheduler_binding_duration_seconds_count{cluster=\"$cluster\",
      job=\"kube-scheduler\", instance=~\"$instance\"}[$__rate_interval])) by (cluster,
      instance)","legendFormat":"{{cluster}} {{instance}} binding"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(scheduler_scheduling_algorithm_duration_seconds_count{cluster=\"$cluster\",
      job=\"kube-scheduler\", instance=~\"$instance\"}[$__rate_interval])) by (cluster,
      instance)","legendFormat":"{{cluster}} {{instance}} scheduling algorithm"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(scheduler_volume_scheduling_duration_seconds_count{cluster=\"$cluster\",
      job=\"kube-scheduler\", instance=~\"$instance\"}[$__rate_interval])) by (cluster,
      instance)","legendFormat":"{{cluster}} {{instance}} volume"}],"title":"Scheduling
      Rate","type":"timeseries"},{"datasource":{"type":"datasource","uid":"-- Mixed
      --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"s"}},"gridPos":{"h":7,"w":10,"x":14,"y":0},"id":3,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"histogram_quantile(0.99,
      sum(rate(scheduler_e2e_scheduling_duration_seconds_bucket{cluster=\"$cluster\",
      job=\"kube-scheduler\",instance=~\"$instance\"}[$__rate_interval])) by (cluster,
      instance, le))","legendFormat":"{{cluster}} {{instance}} e2e"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"histogram_quantile(0.99,
      sum(rate(scheduler_binding_duration_seconds_bucket{cluster=\"$cluster\", job=\"kube-scheduler\",instance=~\"$instance\"}[$__rate_interval]))
      by (cluster, instance, le))","legendFormat":"{{cluster}} {{instance}} binding"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"histogram_quantile(0.99,
      sum(rate(scheduler_scheduling_algorithm_duration_seconds_bucket{cluster=\"$cluster\",
      job=\"kube-scheduler\",instance=~\"$instance\"}[$__rate_interval])) by (cluster,
      instance, le))","legendFormat":"{{cluster}} {{instance}} scheduling algorithm"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"histogram_quantile(0.99,
      sum(rate(scheduler_volume_scheduling_duration_seconds_bucket{cluster=\"$cluster\",
      job=\"kube-scheduler\",instance=~\"$instance\"}[$__rate_interval])) by (cluster,
      instance, le))","legendFormat":"{{cluster}} {{instance}} volume"}],"title":"Scheduling
      latency 99th Quantile","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"ops"}},"gridPos":{"h":7,"w":8,"x":0,"y":7},"id":4,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(rest_client_requests_total{cluster=\"$cluster\",
      job=\"kube-scheduler\", instance=~\"$instance\",code=~\"2..\"}[$__rate_interval]))","legendFormat":"2xx"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(rest_client_requests_total{cluster=\"$cluster\",
      job=\"kube-scheduler\", instance=~\"$instance\",code=~\"3..\"}[$__rate_interval]))","legendFormat":"3xx"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(rest_client_requests_total{cluster=\"$cluster\",
      job=\"kube-scheduler\", instance=~\"$instance\",code=~\"4..\"}[$__rate_interval]))","legendFormat":"4xx"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sum(rate(rest_client_requests_total{cluster=\"$cluster\",
      job=\"kube-scheduler\", instance=~\"$instance\",code=~\"5..\"}[$__rate_interval]))","legendFormat":"5xx"}],"title":"Kube
      API Request Rate","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"ops"}},"gridPos":{"h":7,"w":16,"x":8,"y":7},"id":5,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"histogram_quantile(0.99,
      sum(rate(rest_client_request_duration_seconds_bucket{cluster=\"$cluster\", job=\"kube-scheduler\",
      instance=~\"$instance\", verb=\"POST\"}[$__rate_interval])) by (verb, le))","legendFormat":"{{verb}}"}],"title":"Post
      Request Latency 99th Quantile","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"s"}},"gridPos":{"h":7,"w":24,"x":0,"y":14},"id":6,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"histogram_quantile(0.99,
      sum(rate(rest_client_request_duration_seconds_bucket{cluster=\"$cluster\", job=\"kube-scheduler\",
      instance=~\"$instance\", verb=\"GET\"}[$__rate_interval])) by (verb, le))","legendFormat":"{{verb}}"}],"title":"Get
      Request Latency 99th Quantile","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"bytes"}},"gridPos":{"h":7,"w":8,"x":0,"y":21},"id":7,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"process_resident_memory_bytes{cluster=\"$cluster\",
      job=\"kube-scheduler\", instance=~\"$instance\"}","legendFormat":"{{instance}}"}],"title":"Memory","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"short"}},"gridPos":{"h":7,"w":8,"x":8,"y":21},"id":8,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"rate(process_cpu_seconds_total{cluster=\"$cluster\",
      job=\"kube-scheduler\", instance=~\"$instance\"}[$__rate_interval])","legendFormat":"{{instance}}"}],"title":"CPU
      usage","type":"timeseries"},{"datasource":{"type":"datasource","uid":"-- Mixed
      --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"short"}},"gridPos":{"h":7,"w":8,"x":16,"y":21},"id":9,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"go_goroutines{cluster=\"$cluster\",
      job=\"kube-scheduler\",instance=~\"$instance\"}","legendFormat":"{{instance}}"}],"title":"Goroutines","type":"timeseries"}],"refresh":"10s","schemaVersion":39,"tags":["kubernetes-mixin"],"templating":{"list":[{"current":{"selected":true,"text":"default","value":"default"},"hide":0,"label":"Data
      source","name":"datasource","query":"prometheus","regex":"","type":"datasource"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":2,"label":"cluster","name":"cluster","query":"label_values(up{job=\"kube-scheduler\"},
      cluster)","refresh":2,"sort":1,"type":"query","allValue":".*"},{"allValue":".+","datasource":{"type":"prometheus","uid":"${datasource}"},"hide":0,"includeAll":true,"label":"instance","name":"instance","query":"label_values(up{job=\"kube-scheduler\",
      cluster=\"$cluster\"}, instance)","refresh":2,"type":"query"}]},"time":{"from":"now-1h","to":"now"},"timezone":
      "utc","title":"Kubernetes / Scheduler","uid":"2e6b6a3b4bddf1427b3a55aa1311c656"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-scheduler
    namespace: tomer
    resourceVersion: "2297445"
    uid: 18b3cc4b-446e-452c-94ea-d6ad47f23221
- apiVersion: v1
  data:
    workload-total.json: '{"editable":true,"links":[{"asDropdown":true,"includeVars":true,"keepTime":true,"tags":["kubernetes-mixin"],"targetBlank":false,"title":"Kubernetes","type":"dashboards"}],"panels":[{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"color":{"fixedColor":"green","mode":"fixed"},"unit":"Bps"}},"gridPos":{"h":9,"w":12,"x":0,"y":0},"id":1,"options":{"displayMode":"basic","showUnfilled":false},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(sum(rate(container_network_receive_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\",namespace=~\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=~\"$namespace\",
      workload=~\"$workload\", workload_type=~\"$type\"}) by (pod))\n","legendFormat":"__auto"}],"title":"Current
      Rate of Bytes Received","type":"bargauge"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"color":{"fixedColor":"green","mode":"fixed"},"unit":"Bps"}},"gridPos":{"h":9,"w":12,"x":12,"y":0},"id":2,"options":{"displayMode":"basic","showUnfilled":false},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(sum(rate(container_network_transmit_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\",namespace=~\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=~\"$namespace\",
      workload=~\"$workload\", workload_type=~\"$type\"}) by (pod))\n","legendFormat":"__auto"}],"title":"Current
      Rate of Bytes Transmitted","type":"bargauge"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"color":{"fixedColor":"green","mode":"fixed"},"unit":"Bps"}},"gridPos":{"h":9,"w":12,"x":0,"y":9},"id":3,"options":{"displayMode":"basic","showUnfilled":false},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(avg(rate(container_network_receive_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\",namespace=~\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=~\"$namespace\",
      workload=~\"$workload\", workload_type=~\"$type\"}) by (pod))\n","legendFormat":"__auto"}],"title":"Average
      Rate of Bytes Received","type":"bargauge"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"color":{"fixedColor":"green","mode":"fixed"},"unit":"Bps"}},"gridPos":{"h":9,"w":12,"x":12,"y":9},"id":4,"options":{"displayMode":"basic","showUnfilled":false},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(avg(rate(container_network_transmit_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\",namespace=~\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=~\"$namespace\",
      workload=~\"$workload\", workload_type=~\"$type\"}) by (pod))\n","legendFormat":"__auto"}],"title":"Average
      Rate of Bytes Transmitted","type":"bargauge"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"binBps"}},"gridPos":{"h":9,"w":12,"x":0,"y":18},"id":5,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(sum(rate(container_network_receive_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\",namespace=~\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=~\"$namespace\",
      workload=~\"$workload\", workload_type=~\"$type\"}) by (pod))\n","legendFormat":"__auto"}],"title":"Receive
      Bandwidth","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"binBps"}},"gridPos":{"h":9,"w":12,"x":12,"y":18},"id":6,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(sum(rate(container_network_transmit_bytes_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\",namespace=~\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=~\"$namespace\",
      workload=~\"$workload\", workload_type=~\"$type\"}) by (pod))\n","legendFormat":"__auto"}],"title":"Transmit
      Bandwidth","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":9,"w":12,"x":0,"y":27},"id":7,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(sum(rate(container_network_receive_packets_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\",namespace=~\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=~\"$namespace\",
      workload=~\"$workload\", workload_type=~\"$type\"}) by (pod))\n","legendFormat":"__auto"}],"title":"Rate
      of Received Packets","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":9,"w":12,"x":12,"y":27},"id":8,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(sum(rate(container_network_transmit_packets_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\",namespace=~\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=~\"$namespace\",
      workload=~\"$workload\", workload_type=~\"$type\"}) by (pod))\n","legendFormat":"__auto"}],"title":"Rate
      of Transmitted Packets","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":9,"w":12,"x":0,"y":36},"id":9,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(sum(rate(container_network_receive_packets_dropped_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\",namespace=~\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=~\"$namespace\",
      workload=~\"$workload\", workload_type=~\"$type\"}) by (pod))\n","legendFormat":"__auto"}],"title":"Rate
      of Received Packets Dropped","type":"timeseries"},{"datasource":{"type":"datasource","uid":"--
      Mixed --"},"fieldConfig":{"defaults":{"custom":{"fillOpacity":10,"showPoints":"never","spanNulls":true},"unit":"pps"}},"gridPos":{"h":9,"w":12,"x":12,"y":36},"id":10,"interval":"1m","options":{"legend":{"asTable":true,"calcs":["lastNotNull"],"displayMode":"table","placement":"right","showLegend":true},"tooltip":{"mode":"single"}},"pluginVersion":"v11.4.0","targets":[{"datasource":{"type":"prometheus","uid":"${datasource}"},"expr":"sort_desc(sum(rate(container_network_transmit_packets_dropped_total{job=\"kubelet\",
      metrics_path=\"/metrics/cadvisor\", cluster=\"$cluster\",namespace=~\"$namespace\"}[$__rate_interval])\n*
      on (namespace,pod)\ngroup_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",namespace=~\"$namespace\",
      workload=~\"$workload\", workload_type=~\"$type\"}) by (pod))\n","legendFormat":"__auto"}],"title":"Rate
      of Transmitted Packets Dropped","type":"timeseries"}],"refresh":"10s","schemaVersion":39,"tags":["kubernetes-mixin"],"templating":{"list":[{"current":{"selected":true,"text":"default","value":"default"},"hide":0,"label":"Data
      source","name":"datasource","query":"prometheus","regex":"","type":"datasource"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":2,"label":"cluster","name":"cluster","query":"label_values(kube_pod_info{job=\"kube-state-metrics\"},
      cluster)","refresh":2,"sort":1,"type":"query","allValue":".*"},{"allValue":".+","current":{"selected":false,"text":"kube-system","value":"kube-system"},"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":0,"includeAll":true,"label":"namespace","name":"namespace","query":"label_values(container_network_receive_packets_total{cluster=\"$cluster\"},
      namespace)","refresh":2,"sort":1,"type":"query"},{"datasource":{"type":"prometheus","uid":"${datasource}"},"hide":0,"label":"workload","name":"workload","query":"label_values(namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=~\"$namespace\", workload=~\".+\"}, workload)","refresh":2,"sort":1,"type":"query"},{"allValue":".+","datasource":{"type":"prometheus","uid":"${datasource}"},"hide":0,"includeAll":true,"label":"workload_type","name":"type","query":"label_values(namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\",
      namespace=~\"$namespace\", workload=~\"$workload\"}, workload_type)","refresh":2,"sort":1,"type":"query"}]},"time":{"from":"now-1h","to":"now"},"timezone":
      "utc","title":"Kubernetes / Networking / Workload","uid":"728bf77cc1166d2f3133bf25846876cc"}'
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-grafana
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      grafana_dashboard: "1"
      heritage: Helm
      release: tomer-prom
    name: tomer-prom-kube-prometheus-workload-total
    namespace: tomer
    resourceVersion: "2297420"
    uid: 5fff1d36-4c2f-41f7-ac95-e6784cb3e8db
- apiVersion: v1
  data:
    alertmanager.yaml: Z2xvYmFsOgogIHJlc29sdmVfdGltZW91dDogNW0KaW5oaWJpdF9ydWxlczoKLSBlcXVhbDoKICAtIG5hbWVzcGFjZQogIC0gYWxlcnRuYW1lCiAgc291cmNlX21hdGNoZXJzOgogIC0gc2V2ZXJpdHkgPSBjcml0aWNhbAogIHRhcmdldF9tYXRjaGVyczoKICAtIHNldmVyaXR5ID1+IHdhcm5pbmd8aW5mbwotIGVxdWFsOgogIC0gbmFtZXNwYWNlCiAgLSBhbGVydG5hbWUKICBzb3VyY2VfbWF0Y2hlcnM6CiAgLSBzZXZlcml0eSA9IHdhcm5pbmcKICB0YXJnZXRfbWF0Y2hlcnM6CiAgLSBzZXZlcml0eSA9IGluZm8KLSBlcXVhbDoKICAtIG5hbWVzcGFjZQogIHNvdXJjZV9tYXRjaGVyczoKICAtIGFsZXJ0bmFtZSA9IEluZm9JbmhpYml0b3IKICB0YXJnZXRfbWF0Y2hlcnM6CiAgLSBzZXZlcml0eSA9IGluZm8KLSB0YXJnZXRfbWF0Y2hlcnM6CiAgLSBhbGVydG5hbWUgPSBJbmZvSW5oaWJpdG9yCnJlY2VpdmVyczoKLSBuYW1lOiAibnVsbCIKcm91dGU6CiAgZ3JvdXBfYnk6CiAgLSBuYW1lc3BhY2UKICBncm91cF9pbnRlcnZhbDogNW0KICBncm91cF93YWl0OiAzMHMKICByZWNlaXZlcjogIm51bGwiCiAgcmVwZWF0X2ludGVydmFsOiAxMmgKICByb3V0ZXM6CiAgLSBtYXRjaGVyczoKICAgIC0gYWxlcnRuYW1lID0gIldhdGNoZG9nIgogICAgcmVjZWl2ZXI6ICJudWxsIgp0ZW1wbGF0ZXM6Ci0gL2V0Yy9hbGVydG1hbmFnZXIvY29uZmlnLyoudG1wbA==
  kind: Secret
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app: kube-prometheus-stack-alertmanager
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 69.6.0
      chart: kube-prometheus-stack-69.6.0
      heritage: Helm
      release: tomer-prom
    name: alertmanager-tomer-prom-kube-prometheus-alertmanager
    namespace: tomer
    resourceVersion: "2297416"
    uid: b6021bae-7462-4742-bd83-e42b9d6ba94f
  type: Opaque
- apiVersion: v1
  data:
    alertmanager.yaml.gz: H4sIAAAAAAAA/7ySy2r0MAyF934KMcsf5k8vdBOYB5gn6DJoXMUR+JLKcoaB0mcvTtppCg3tqlvpWN+xjpxPJ/StARDKyU/UKQdKRVt4CEZSUVqalngiaWEXi/c7A+AklbE7XWp7DxED5REtVXF9lZf6Nw8BAqodSGZJFaEn0ToBDrB7rM2n5D4ZZ2Rt4f4mXysclWRCP5us7kZCXVVv7wbDceATayfFVzN7UBRH2q3he8g0kbBe4PAKZ5TI0b1w7JMByKmIpU09WGFli94A0HNZlvh1Eauf/cyHX2LfXf4FdZ3LMfbpuKw0yRZ8A7c95+M85oCq4nonSmH0qEt0Dalt5ikBIzqSxqbYs2v+/dcwevMWAAD//yheIjPGAgAA
  kind: Secret
  metadata:
    creationTimestamp: "2025-03-03T19:50:33Z"
    labels:
      managed-by: prometheus-operator
    name: alertmanager-tomer-prom-kube-prometheus-alertmanager-generated
    namespace: tomer
    ownerReferences:
    - apiVersion: monitoring.coreos.com/v1
      blockOwnerDeletion: true
      controller: true
      kind: Alertmanager
      name: tomer-prom-kube-prometheus-alertmanager
      uid: fc624fc7-4a6f-4d77-91de-80b9eafb56cb
    resourceVersion: "2297814"
    uid: dc5f86bf-4720-4bf0-835c-043263a92437
  type: Opaque
- apiVersion: v1
  kind: Secret
  metadata:
    creationTimestamp: "2025-03-03T19:50:33Z"
    labels:
      managed-by: prometheus-operator
    name: alertmanager-tomer-prom-kube-prometheus-alertmanager-tls-assets-0
    namespace: tomer
    ownerReferences:
    - apiVersion: monitoring.coreos.com/v1
      blockOwnerDeletion: true
      controller: true
      kind: Alertmanager
      name: tomer-prom-kube-prometheus-alertmanager
      uid: fc624fc7-4a6f-4d77-91de-80b9eafb56cb
    resourceVersion: "2297824"
    uid: 093c1e89-eec2-4477-aba9-a8a1e1addb9f
  type: Opaque
- apiVersion: v1
  data:
    web-config.yaml: ""
  kind: Secret
  metadata:
    creationTimestamp: "2025-03-03T19:50:33Z"
    labels:
      managed-by: prometheus-operator
    name: alertmanager-tomer-prom-kube-prometheus-alertmanager-web-config
    namespace: tomer
    ownerReferences:
    - apiVersion: monitoring.coreos.com/v1
      blockOwnerDeletion: true
      controller: true
      kind: Alertmanager
      name: tomer-prom-kube-prometheus-alertmanager
      uid: fc624fc7-4a6f-4d77-91de-80b9eafb56cb
    resourceVersion: "2297832"
    uid: eb824312-b520-4334-aed0-7e74805d9ed8
  type: Opaque
- apiVersion: v1
  data:
    ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJkakNDQVJ5Z0F3SUJBZ0lSQVBIeXNmcisrQXBpZm5vUEdJNCtuQWd3Q2dZSUtvWkl6ajBFQXdJd0R6RU4KTUFzR0ExVUVDaE1FYm1sc01UQWdGdzB5TlRBek1ETXdPREExTVRGYUdBOHlNVEkxTURJd056QTRNRFV4TVZvdwpEekVOTUFzR0ExVUVDaE1FYm1sc01UQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJJeFh1a0pHClRiZDU2MVNLN3lMdFAzdlBsTG9CR1RqTElzM2tsdVFTbGFVVk44dHhLakl3aG5ZZVhaN2NSY1A1ODJvbHp4b2IKMVRldjl3dW9yUWI0TTJ1alZ6QlZNQTRHQTFVZER3RUIvd1FFQXdJQ0JEQVRCZ05WSFNVRUREQUtCZ2dyQmdFRgpCUWNEQVRBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJSRHd4clplWWNIeTl3TE9JWnprS2xjCmt5ZjJXREFLQmdncWhrak9QUVFEQWdOSUFEQkZBaUVBKzBIcEs4aGp4TnFDdWwvUkdBNWdnTHNFeUpuUjVmYkUKVjVZVFRTVnpTR2tDSUNscEhqRmIyTUVEd2lncEZMUFFHN1E5YitGeDVlZUQxUHlOMlRKbDlnSTQKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ6VENDQVhTZ0F3SUJBZ0lRRUwzVXV1TFc5dkwrSlc3YTRSZ0x4akFLQmdncWhrak9QUVFEQWpBUE1RMHcKQ3dZRFZRUUtFd1J1YVd3eE1DQVhEVEkxTURNd016QTRNRFV4TVZvWUR6SXhNalV3TWpBM01EZ3dOVEV4V2pBUApNUTB3Q3dZRFZRUUtFd1J1YVd3eU1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRVB4VDdIb1JSClhSeW5Ma0ROTmJSeDhGTGVmVjdxdFB0eTJsTnhybnhoNm9TYXVDeFB3U2xublMrTzRGK1doSFdndUlkdnZFOHgKbUd3OVRTUVJ6a3BCSWFPQnJ6Q0JyREFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3dDZ1lJS3dZQgpCUVVIQXdFd0RBWURWUjBUQVFIL0JBSXdBREIzQmdOVkhSRUVjREJ1Z2pCcGJtZHlaWE56TFhSdmJXVnlMV2x1ClozSmxjM010Ym1kcGJuZ3RZMjl1ZEhKdmJHeGxjaTFoWkcxcGMzTnBiMjZDT21sdVozSmxjM010ZEc5dFpYSXQKYVc1bmNtVnpjeTF1WjJsdWVDMWpiMjUwY205c2JHVnlMV0ZrYldsemMybHZiaTUwYjIxbGNpNXpkbU13Q2dZSQpLb1pJemowRUF3SURSd0F3UkFJZ2IwWk4zZTZ1ZTRwcTR0QWQyZ2Q4alJLOWdMWVJkUEFwR0FEUE5zV3hybHNDCklEd25RRXROVUM3U0JLL203WG52WmRlZHZxelhQYmF3K1VEZHFLMldTWndMCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUwra1diUXlIODJyRkw1Sm5SbVUwdWhLTHB2eVNkNU02OUZJekhESmZPNndvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFUHhUN0hvUlJYUnluTGtETk5iUng4RkxlZlY3cXRQdHkybE54cm54aDZvU2F1Q3hQd1NsbgpuUytPNEYrV2hIV2d1SWR2dkU4eG1HdzlUU1FSemtwQklRPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
  kind: Secret
  metadata:
    creationTimestamp: "2025-03-03T08:10:11Z"
    name: ingress-tomer-ingress-nginx-admission
    namespace: tomer
    resourceVersion: "1408820"
    uid: 8968cff9-ff96-4456-9844-75046690aec2
  type: Opaque
- apiVersion: v1
  data:
    ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJkekNDQVJ5Z0F3SUJBZ0lSQU0zVUJaVlpMTzduRTJ3UTNrb2RITnd3Q2dZSUtvWkl6ajBFQXdJd0R6RU4KTUFzR0ExVUVDaE1FYm1sc01UQWdGdzB5TlRBek1ESXdPVEV6TlRkYUdBOHlNVEkxTURJd05qQTVNVE0xTjFvdwpEekVOTUFzR0ExVUVDaE1FYm1sc01UQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJMK3p2KzZ2ClhQVGF1RFVEdWVoKzFmU29hUUEzMGprVCsrRzRvWFRjemFYdVV4TmdURmE3UVpmVHFZMllIb0paQnY5R0M4aXkKbEc5bGZYK245YU84bWNpalZ6QlZNQTRHQTFVZER3RUIvd1FFQXdJQ0JEQVRCZ05WSFNVRUREQUtCZ2dyQmdFRgpCUWNEQVRBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJUcGRQUnQ4ZDlFemo0NERrMmNBSnQ3CkxLajZVekFLQmdncWhrak9QUVFEQWdOSkFEQkdBaUVBNkFFUGx2TmZHNG9zdkFSSnRJR3FnQkZaRzJ6cHVjc1kKOGhnMWg3aWxrV3NDSVFEZ24rTGJGYnRBNGQ4Q2h3SE9Dc0hXWG8vMGdBQ01UdXNTaDN3alMram15UT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ3ekNDQVdxZ0F3SUJBZ0lRQkdqVHZTTjdnZlZIaXVxVVZUTTJPVEFLQmdncWhrak9QUVFEQWpBUE1RMHcKQ3dZRFZRUUtFd1J1YVd3eE1DQVhEVEkxTURNd01qQTVNVE0xTjFvWUR6SXhNalV3TWpBMk1Ea3hNelUzV2pBUApNUTB3Q3dZRFZRUUtFd1J1YVd3eU1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRTFYUERaSnpPCld6bXRGNFhXRlA3bE9uR3RaQmFnUkxiZ0RCUWVrSDhTZ0I1L2FEdlZUaWRYRm9JS2YxaDI5Wkdxamtnb0NpeHQKaEJURUxIK0JnMS9JVDZPQnBUQ0JvakFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3dDZ1lJS3dZQgpCUVVIQXdFd0RBWURWUjBUQVFIL0JBSXdBREJ0QmdOVkhSRUVaakJrZ2l0cGJtZHlaWE56TVMxcGJtZHlaWE56CkxXNW5hVzU0TFdOdmJuUnliMnhzWlhJdFlXUnRhWE56YVc5dWdqVnBibWR5WlhOek1TMXBibWR5WlhOekxXNW4KYVc1NExXTnZiblJ5YjJ4c1pYSXRZV1J0YVhOemFXOXVMblJ2YldWeUxuTjJZekFLQmdncWhrak9QUVFEQWdOSApBREJFQWlBdDI1anZZcHZ4WkdFQ2R0MzA1MGJieFZ2MSs0eUtZamxaWk0wbTVKdkdrQUlnWW1Ma1lHVk9RV3IxCm5pbEM5U1FCSExaSVJTeVBEOGlPQnJFQUVwQ2txU3c9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUpWSTh3b1NlbjcvT2UvYmpqcXhmSTRiaHlmUDhFeHEyeFU4aTBId0tnbWZvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFMVhQRFpKek9Xem10RjRYV0ZQN2xPbkd0WkJhZ1JMYmdEQlFla0g4U2dCNS9hRHZWVGlkWApGb0lLZjFoMjlaR3Fqa2dvQ2l4dGhCVEVMSCtCZzEvSVR3PT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
  kind: Secret
  metadata:
    creationTimestamp: "2025-03-02T09:18:57Z"
    name: ingress1-ingress-nginx-admission
    namespace: tomer
    resourceVersion: "828684"
    uid: 7ac70f2f-bba9-4b8a-ad54-3c0ed26b7d2a
  type: Opaque
- apiVersion: v1
  data:
    ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJkVENDQVJ1Z0F3SUJBZ0lRSlgyU28vSmowRXVmVFlMRENxSlZzekFLQmdncWhrak9QUVFEQWpBUE1RMHcKQ3dZRFZRUUtFd1J1YVd3eE1DQVhEVEkxTURNd01qQTRNell4TkZvWUR6SXhNalV3TWpBMk1EZ3pOakUwV2pBUApNUTB3Q3dZRFZRUUtFd1J1YVd3eE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRVFBbytNeWcrCjBjVmlZSlFVaTNZMzMrKy9qc3c1UEdQUHZyMk41ekx0aEIzMFBHejFpbmJaT1IrOGJiRTVaSlpkb3lPcVY4c3oKM0dJVGJ1a0VSUm1uNjZOWE1GVXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CTUdBMVVkSlFRTU1Bb0dDQ3NHQVFVRgpCd01CTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRk1BSzdXUDBqNUVBRXgwci9LeTVXdEhECmJMbkxNQW9HQ0NxR1NNNDlCQU1DQTBnQU1FVUNJUUMzeHRHUmxpYVJ6clhKeFJTaFpQOXhON2h0K242d2I4TU0KWi9zUGN6c3RtQUlnU0N2alY4N3ozQ1M2WlErM3FWU1RuNXM4WWd5bStUM1lhOUwrWmZvV0I2dz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ6ekNDQVhTZ0F3SUJBZ0lRRjFWaWZwMVNkRjR1RWJOZ1ROUTN0ekFLQmdncWhrak9QUVFEQWpBUE1RMHcKQ3dZRFZRUUtFd1J1YVd3eE1DQVhEVEkxTURNd01qQTRNell4TkZvWUR6SXhNalV3TWpBMk1EZ3pOakUwV2pBUApNUTB3Q3dZRFZRUUtFd1J1YVd3eU1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRXJIanNvNXoxClUrNUVqZit3TS9kSXdLRjI1NGRIOEppM0pYR0pTOHNORy8yRXVUSmR5WG9LWG5wSkFsTVpvSE1tT0htTzdPa2oKNXBNK1VVVTlhcElZSTZPQnJ6Q0JyREFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3dDZ1lJS3dZQgpCUVVIQXdFd0RBWURWUjBUQVFIL0JBSXdBREIzQmdOVkhSRUVjREJ1Z2pCdVoybHVlQzFwYm1keVpYTnpMV2x1ClozSmxjM010Ym1kcGJuZ3RZMjl1ZEhKdmJHeGxjaTFoWkcxcGMzTnBiMjZDT201bmFXNTRMV2x1WjNKbGMzTXQKYVc1bmNtVnpjeTF1WjJsdWVDMWpiMjUwY205c2JHVnlMV0ZrYldsemMybHZiaTUwYjIxbGNpNXpkbU13Q2dZSQpLb1pJemowRUF3SURTUUF3UmdJaEFKanVKdXZZTU96bmZQQjRhM09CQldDZy80QjNoa0FvQ3FaSnladTJYLzFtCkFpRUEvT05rbkxSUENTdDAxLzBhdHI4YWV6OVdLLzR6YnMzdzE5SnFVeEtLUGdzPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSURiKytyQVVzSVVKTmJoMDgzaCtxSkFSVnhOeU5GcEYwdFNBTWJFQ0VuWnJvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFckhqc281ejFVKzVFamYrd00vZEl3S0YyNTRkSDhKaTNKWEdKUzhzTkcvMkV1VEpkeVhvSwpYbnBKQWxNWm9ITW1PSG1PN09rajVwTStVVVU5YXBJWUl3PT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
  kind: Secret
  metadata:
    creationTimestamp: "2025-03-02T08:41:14Z"
    name: nginx-ingress-ingress-nginx-admission
    namespace: tomer
    resourceVersion: "817750"
    uid: 20c4e511-6213-41c9-8e94-47833d0cc6f9
  type: Opaque
- apiVersion: v1
  data:
    prometheus.yaml.gz: H4sIAAAAAAAA/+ydzXPjKBbA7/krOPTB7il/xEm6e5zD1lTNbu1hZ3Zq59pVFIbnmDECLSAnqdX+71OgD0v+GjvtuJ34XWQLxOPx+PqBEDwoM2FqfEWI45alQKX2YBdMjcnN0F0RAk8erGaKKjYB5cKThKTWJOBnkLkx8SYBO4jXXnDvzbMJ9JZPNP6uhKUWUiU5G5MPnd/+/TP99adf/t4NUS6YypiXRq9oYzMFdCoVuPFVjwzA88FS2iD4uoZDby+deiFYlNkbDj72n1mirkpTcKOn8iHG9YeZUM0SGBMHdiE5/GK09KZM967UMwXWJ0yzB7CD4RUhM6ONraxJpkw5uCIkBLMaPDjqxDJmQnrEGgVjAlqkRmpfGDHo4lLGocyQ0qW66RW5ckVIAt5K7mjK/GxMBuVtMLJmEwV05n06GhNvs6CFhahXO35nMsuhlf/RIPGfZ/YBfOE5JpT6JKWNHK7sFgUxHvJ0TOYAaQy8UTKlCXhGmwYpTF48R1ma7vdkasGB9nUACw/wNCad1RxynvF5K5+696U9jqWzBQUs5vMBejcDVbovC9rRdXSgpjQpivVhiq6FrLW1GRxBz6ro09RYXxWnOpZQgnuPMNleVndIZEJYcI6WxXgutTg4UK2Qg5RZ5o0dk/umhr8aAfed/sdu6ZgqxiEB7cfkw/+u/7+hHmkj4HzT85sRhyUnNeKQ1NSN2ybLNPz2FliV2jplbZml9yESUyO2STswsUESN9ozqcFuk1k/0KpHwpqD6lGIKp2tNin/YFKByH/POAcQILpHtGzVS2wqJL2VZ6viuB5gnxpelWFau4SeaMbcbGs3VXtWluj/0L3foO51dKuMXvrt0mX/mBMjMhUgqh1H8E92F6NNCfjQ+f2fP/3n525LVmxsjwYw1+cDMMgqyCpvjVUsKMMEWOQV5BXklffKK/vWcmSWV2OWVIYgJ51xETBlmfJxJm0GQevArSGwV66UXzwttQOeWaBuLlO6ACunz0u9CClUL5O+VDP6cRYnwMZksGB2YDM9cMAteDdYPtiXZlBajHFuMu0HnPW5DbpNgFmw1Js56BdJiiHfCH5xk6RGQ1lH92aEdrCqptVl6ug0k1qzkAIOJJlWqCYvFoFOMu/izrfTR4hBiEGIWYeYIzSk26KrieRIcz47WxeEp13wVM2b0P27aRrLU21P1S6w4LmgFv6bgfN53RVWLtQps9FVrrt2qchs8XbPATdaODrJ+Bz8fWf4tX99lw+/9kfhchMv8f42XuLfT+HyOVy+hMuP+fXX/uguXOPl810+ym/ym3B7m9+Gn0/55/xL/mN+fZePhvnNML8d5rd3+d2w2/naH3b/1rJerN7fgp7cWBDanRA8owbu2XlILg3wXml+rczDC5la2+P12nLW9UzpCGkPaQ9p70i094eZ/Cv8OSns7dPGIPO91oRZvA9VwBqlwPZOv2CpTTEvm0Iru0KcJTsHiNpSpBCqEKoQqhCqEKoQqi4BqsBzgZNBb51jQi4iuSC5ILkguSC5ILlcArmk1jw9I7q8dXSJ2YjsguyC7ILsguyC7HIJ7OL4DESm8A0W4tM34lNdkhChEKEQoRChEKEQoS4AoRT4DexUdi+Fo5cJOM+SdOnxukxFCPOe8VkssYJ5VocyApZgh+h1UvRqekqzbJkOobFtMpqApsAfncHmX9zh9NgMdHwF9/jqDgkMCQwJ7GIIrNnenOzbuz3bmHpvnhLD2nE0HzgUqRDvTvqBH3eSmhSKL/Nc7ryx7AGWTvVXe931z/b6o7t81L+LX9jd5dejYf5p+Dpf11Vkur4P1V+RqbeMzxse1HmmQIM7O3hd2Yb1Om7DunkbrAFnYiFd3MoIqRepF6kXqRepF6kXqRepF6l3nXrLCJbVkKcZ7fCpo35mjfcKRE233nimcmWYoGwBEYavhy4veG7lqcyBbTt117n3hSpOHe1IQ3lmLWifSxMhdkWByvUR5MPMr6XCAhOOJmAfQJRODrg3lhY+LadHK0NtLNzKm2bQ4yUtgcTYZ9pJWJqCiNSYu0eWHi+GTpBJBThuZeqNdblnbh7h30PuZ6Vh2NOLo+wRx00KOxM4ZVJltrLp/UyCZZbPnl8eZxweTKuecy1eDf7R2Dntf7zvcKZkzqWSWZJzLXP1xPOAHcpwpoR2uc+06vY/Hs3mLgV+kDhZoUvRo9Yi+z/cv87ocfQ232tsGQOm1kzi7oA4AsQRII4AcQSII0AcAeIIEEeA73EE+C34V7zLMJvWBL8S5lWHWPwVmS3Ra+VMMw7Wu8GQRkF0147XIpHOSaMpZ2WL3thEeg+jvB3uOhiy1oBlfalvZQVc5Is7OyNjIWO9RcY6CHOQQL4HgTR69jM6CvSC+/2lw4X0/O/jHC088xMhBSHlvUMKnp91BpyCJ34ipyCnvJBT8LxPZBVklffOKnje53fhlbiGq3pdd/p3Om+ERlZWmEjtPNP8m1eqtOScgABOuN6mXbBOMpdxvn0psgGyAbLBkRa07GiATrW+BfnkFHzSGL+H5rAHT6HpP+ludBWmvGDPFISb9wk320ol7hqHqIOog6iDu8ZdPOSU236E4N6JSSHGZJ6aKTVWgC0/M5RamMcxGborpsB6qeNC1vh/87eZVSzRq64RpT4NTghWk3EJaxRWHhpYConrrVMLU/k0JoOiTrW5ZQdHbSOpTSy1QlMrPJVKugDrYnoWozIha2ne2J1ubAT2rLO1uXYtA24Y7Qg6bOnW19dh/BkAAP//P8F8hEeaAAA=
  kind: Secret
  metadata:
    creationTimestamp: "2025-03-03T19:50:35Z"
    labels:
      managed-by: prometheus-operator
    name: prometheus-tomer-prom-kube-prometheus-prometheus
    namespace: tomer
    ownerReferences:
    - apiVersion: monitoring.coreos.com/v1
      blockOwnerDeletion: true
      controller: true
      kind: Prometheus
      name: tomer-prom-kube-prometheus-prometheus
      uid: c567f2d1-7eb0-4d57-9d49-a147ae4e8d98
    resourceVersion: "2298017"
    uid: 4fe25511-f5d5-4ee5-9779-b0ae7bb65459
  type: Opaque
- apiVersion: v1
  data:
    prometheus.http-client-file.yaml: dGxzX2NvbmZpZzoKICBpbnNlY3VyZV9za2lwX3ZlcmlmeTogdHJ1ZQo=
  kind: Secret
  metadata:
    creationTimestamp: "2025-03-03T19:50:35Z"
    labels:
      managed-by: prometheus-operator
    name: prometheus-tomer-prom-kube-prometheus-prometheus-thanos-prometheus-http-client-file
    namespace: tomer
    ownerReferences:
    - apiVersion: monitoring.coreos.com/v1
      blockOwnerDeletion: true
      controller: true
      kind: Prometheus
      name: tomer-prom-kube-prometheus-prometheus
      uid: c567f2d1-7eb0-4d57-9d49-a147ae4e8d98
    resourceVersion: "2298020"
    uid: 75b330e4-de28-4e12-9d8f-2dcff207544f
  type: Opaque
- apiVersion: v1
  data:
    0_tomer_tomer-prom-kube-prometheus-admission_ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJkVENDQVJ1Z0F3SUJBZ0lRYlhzZGhIVjVodStEdWVNOGcvQkdDekFLQmdncWhrak9QUVFEQWpBUE1RMHcKQ3dZRFZRUUtFd1J1YVd3eE1DQVhEVEkxTURNd016QTVNREV6TlZvWUR6SXhNalV3TWpBM01Ea3dNVE0xV2pBUApNUTB3Q3dZRFZRUUtFd1J1YVd3eE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRU9QWmR5ZWFDCmFCNUlaRTU5MUpaVDZLL0lKaHZ4cUpodEFpV2dpOEpWRkNxQ3p3YkpmbXNZa3hvODBTQXVsYk9obU1LZlRJbjEKZGtwaG5RVGFiUVhKVWFOWE1GVXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CTUdBMVVkSlFRTU1Bb0dDQ3NHQVFVRgpCd01CTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRkRBR1REeTN2YUxoY2ZYZUxrd1ZNaWtKCitZbDFNQW9HQ0NxR1NNNDlCQU1DQTBnQU1FVUNJRDIyMWtwelBKcVcxRk4wT3JMOEh2MTN0cnlDNDQ0MjdqWmgKR1ZaNmdKNGJBaUVBK1M3ei85REdqUEJKaEtpNHo4MFBFRHhYK0lCZ2I1Tmx3ZUVvTjQ3U0d3Yz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  kind: Secret
  metadata:
    creationTimestamp: "2025-03-03T19:50:35Z"
    labels:
      managed-by: prometheus-operator
    name: prometheus-tomer-prom-kube-prometheus-prometheus-tls-assets-0
    namespace: tomer
    ownerReferences:
    - apiVersion: monitoring.coreos.com/v1
      blockOwnerDeletion: true
      controller: true
      kind: Prometheus
      name: tomer-prom-kube-prometheus-prometheus
      uid: c567f2d1-7eb0-4d57-9d49-a147ae4e8d98
    resourceVersion: "2298018"
    uid: f8aadb1a-c1e1-4caf-8901-59871ee2490a
  type: Opaque
- apiVersion: v1
  data:
    web-config.yaml: ""
  kind: Secret
  metadata:
    creationTimestamp: "2025-03-03T19:50:35Z"
    labels:
      managed-by: prometheus-operator
    name: prometheus-tomer-prom-kube-prometheus-prometheus-web-config
    namespace: tomer
    ownerReferences:
    - apiVersion: monitoring.coreos.com/v1
      blockOwnerDeletion: true
      controller: true
      kind: Prometheus
      name: tomer-prom-kube-prometheus-prometheus
      uid: c567f2d1-7eb0-4d57-9d49-a147ae4e8d98
    resourceVersion: "2298019"
    uid: 92e77d04-d448-4ca3-9578-13ebe7dba729
  type: Opaque
- apiVersion: v1
  data:
    release: SDRzSUFBQUFBQUFDLyt5OVdaUGl5TEl1K2xmUzZqenNlMjEzZFVzaXFkVzAyWDVBSkpxU1ZEVUNOTVJkeDdacG9DUkJTR2dsWWhESDluKy9GcUY1QWpGa1ZmYzY5ZERXbFNCQ01iaDcrUFM1LzU5UHZ1NHRQLzN4S2R4NHkvZlBybSsvTDdmYlQ3OThjdjF2bTA5Ly9KOVAzOXozYmZqZjFqS0FtMmhwZmZyakUwVlEvYzlFN3pQUm01Ty8vOUhyL2RFamZ1MlJQYUwvRDVJY2dFKy9mSUw2bFQrd2xuQVo0a2Z4SDF2ejNRMUNkK04vK3VNVDcyOURIY0luYytNRjZLRlB2M3phaG5xNDIzNzY0MVAyaWw4KytadHdpVDZhTzh1blpBbWZmZHYxajAvbXhnL2ZOeEF1MzU4Y2ZmdGtMSmYra3hzUHVyUisvYWZQaDArZUhqMkYrbnI1cEQ5OVd4NmVQTmZmaGN2dDA3Zk4rMVBvTEovZ1JyZWVEQjNxdnJsOGYrTC9mQW8zVDhieVNkL3JMdFFOdVB6MW43NjIyVDJadXY5MDBFUFR3VCtLSi9sa1JFL3ZPOTkzZmZ2cFA5WTdZMm1HOE1sZWhrL2I1ZnZlTlpkUG56K2ozZDhHdXJsOHdnZndWRHFHejZXMWZDNnM1ZlBuelM0TWR1SFR3YlhRTVBqTi8vRlAvNS8rMEg5YUhuVzBXMDk4L091bjBOSFJLdGZMN2ROdXUzemFmTU5UekVmNzQ1LyswNU1ldVBMeWZldHUvRCtlL0dWNDJMeXZYZC8rZGYzNzlsZDM4OXVlUk0rc1hkLzZJeDBXZmVBdFE5M1NReDJQOFBTRUZ2TkgrdnI4STd5K1A1NitiVGJvczIyd05KUG5rK1dOb0w3ZGl2aTM1ZVdiNkl2NDBmY2RYRzZUbnowOWZYNXlOdHZ3ajZmRDRmQnI4cnBmelkyWGZ2MzA1SVJoOEVmKzU5TlRvSWZPdHZRSkdnVjlPbytDNVI5UGY3NHZ2N25IOHZkUFQ0WnVycGUrOVVmMTg2ZjBCQnUrcVd6RExINnc2YmxnOHg0MkR2RDA1Tzg4WS9uK3g5UHZSUFY3Tk9VL25uNkxQLzVmVDNQSDNUNXRseWJpbHlkMys3VHhZZlQwdnZ6WHpuMWZXay91dDZmNVpJWStqNGwyNlNPS3RUTGFMaHpsMDFNSXF4dGMzTERQN1p1OVhacnZ5MUFzcnZwekNMZUlHdmxzQWkydi91VkpmNXJoMzJPQzFGM01MSmcrbCsraCs4MDE5WEQ1cFB2VzAzb1pQWG03YmZpa3d5MWVUUEMrMmJ2V0VwMU9sWUNMNUJxUGZvbGE0d2szVTJ6aE55SGMvbXEraDM4OC9YTkhFRDNUMExmTEw4OVBTOS9jV0VzTFR4bC9zY3lmWGkramxxZlh5eWgvT01SVWlHVEV1NzhNbDVqcDhKUSsvYzh2bjB4SGZ3K1JNRTVYZ1A2ZHlPMlNpUGoweXlkbmd6OUdETEQ5NDdmZmJEZDBkZ1k2cjkveXdYK3IvbWk3MmIyYlNJTCtmMWY5OEgvLzhta2ZiL21uUHo0OS8wcFN2eElORWp3V1FnWGhoVWpnTlJ2emFiZEZSeTZ5dktnKzZkc24vZWw5aVViRkIzeU04Tm1YWlBDblh6NnRsOUZoODI3aENlZFhWallwVDNjeEtTM2YwUlBaVnBtQjd1dmg1dFAvL0pKOXhPcm11dlRCTm56ZitQYnFWUHdzMURjazFYdnVmL255cGRmcmZmcWYvLzNMSjlmRWkwczNheGVnR2Y1NmNOZXV0N1JjL2RmTnUvMGIraXRBZi8xbWJqeHY0MjkvQzUyZFoveG0vbWIyZnhQUlhQOGJidXpOcjl1OS9WdWZJSUxqNS9LSHZ3YSsvZW1YVHpsZGYvcmowNTdDbndUNUoyUzY3YnJ2YjBJZDdmb1drWWVPdUVjMzhTRzZtOTlNUi9kdGZFZCtmdnFQRWYvSEUrTWVuekJkUFlYTGJZaEUvZFAvODc5SWl1ci8vdi8reHovOXowK0x3RUtjbHh4ZlBMV241TFFMaC9sNUgwL2duejZhUXZtZHdmdnlmUW1YK2hadDRqY2RicGVJbUJFMTVkT1BPZUMveUY4cDhsZmlNNEVlZ0J0ei9la1Bmd2ZoTDUvQ3BSZEFIVi91K1RsbUgvNG1mcDJQWjcrR3h4Q1JIZWFMVHpMclFKNkZPOUFUb05sN0N3M1BDZ3pmdGpWcXNMTTRZVyt3UjJpNjlFWlQzMnpOazZIaDBvSGhpNFNtSExkQW1lNUdkdkNQWlVUWXVxTEZ2Mkdad1BEZmJIN2Qzd05XbmhvOWdlRGQ0VTcybUsybHlLZUpKKzROWDRvTTZyZ0ZLcjh6S1RteVBMZ0NzejZ4VkduSWMrUmd0TGFnTmFJSm5WM1lta29mREJhdU5GVUtET3JabG1YaGpXZUZQczhKcE9IMUE4TXpiWXQxb0VrdDBQdERRMkYyZ0h2N1VwelhLOXZmVzZQaEJpamt3ZUxXOWdRQ3grQmthRWI5bFVIMUNkTWJiQTFXamlhK0NFMGZCQnExMkJuZVlBMWtlbS82MG1uaU9ZVEZEWVBYR1QzNE50M1lQQ3MvbSt3Z3NrWTBMelBTVkNYNmYwcGorZHRpUEpqSkwrUS9sbEduOWU0TVNvSUxOQTczdHRNNWlUQkhhUHg0M2tBNW5rQ245eEhyVnpZa05VOWVXZXpCQnBSTThGeTJEbnN5STNlYVFrS3pSenZvNzJWdmErdEtmMlZ3OGhyTWhxNnU5SDNUazA5bVJPNEFCWGZMVWIvNHZNdVBudTF2S3RIbGQrVzk5QUJwc0VjOEZqcC9kSzc4aUFpTm5reVluRXp3YkhBeXFQNUJVNlhObnpQaEh4TmZQQURsYllmWHlZbkdHME1VejJEQXUrdlhaVzhiOHF5OEE0VjlldHo1MHFmWDJScXQ5WlVmMFhESm9lK205b3lSRmd0Ry9EWmZEOGFTUEpqT1NXSHhweHIrZ3gvMUZVMDVra0I5MjVWNXBYOENxa0RwaWdnblhzNERadFRmV0p4ME1LTnVaN3dnQjEvbmhNU29KUDNuQWs0SHdzaDV0eFFCYWoxcHk3T1lQN0wzNEgzMW1CQ280a0ZEZjNQaFB4QlBhOVNSQk96QzVyMGFmKzlLejZmbjArRjNsYlY2bG5MYzRyRm12RDF4NmNHMzJUQ2NLQVBTNG1qU0d0SC9NcW5Cem1RWlFuOGgzR1hVUDVtc3ZKcjQ4YjRySjhZcTd0RzNHUitNL1BBZmt4a05EVzlhTzR2a0RJVEZDK0UyN0FmbUp6TTYrLzdBWXVYUUpMY0hkZFkvV1N4RFdPajhGR21OYVptU2t6a3hhOENoZFl1STd0eVJqYzlucGJPLzJ6d0VnVWxCZ21leFRQZ3lpWDVmTHhOK25NbjA0S3NyL1NPbW1lTDVTUU9lay9ZOHk2dzBDdkVNM1RkNmNzU3p6TUZrajRGR01ZU3VESFk4QndKdEZwLy94T1h4MmpYSzJmTWpRZEZWTWJCR2RFeERwODErRWtuL3lQYURJNzRJWE5oQU45ZS9keEU5dTlrWmNDSzZHenlleFRMTTBaWCtpUjhKYndiRnJLY2VzOVdVL2dxb3ZOdUpGM3lwYjdJTGZLWXpkV29iQ3RQbk9jblJrZHllMFI1UVRkdFE0TTVTMFJuU250SGpzVnpuMmVOZVU2YTJsci9QbnNsRDIySi90elVQM1EvQTBaV2pvM2xIT0xFRFlQVFFQY0RzZU01eUxGYmM4SnkwQVRNNlBXdGI4OWUyNmNzN0E5RjJOUFQxbnV3Q1JTU01FZTBEZFdybjhoblJVZDh4RlBsa3Nzd0t6T2gvTENNNk1EeHhheWtTNUVkQ1lIaFdCRlR4TkZINnZxNzBueWRlOGZtVUg3cjhybnhIQUYvZUdpd2FLNWUva3htNXQxVHBZS2xUMjZMZ0dzOVBqZGNvSEVyeUpBQXVqZVdlcHNDZEdRM2RLWFVrelo0RXpUV2M4dTZ3azN5ME9IaUlaVlBBb1gySno2SkNONHc4bTQ5b2R6bWpJMHZwNzlDZGdQZGJSWFFqN2cyRmRBeFBPbjIxUy9KdE9pZWtiL00xSTByelJqNCtHSlIwZXBoTUd4R2hTY2xiZk1ZOUh1c1RFdy9mbDVIaHlRU2lXVjM1Zlk5L095YzdubkYyTHR1MjhSQ3ZXQ3l6MDZqRkFOMmRFeWhBZzVVZGsxcnM1bGhlSXRvNE9pWTMzR0VhVklVZHdMVGZENHhvc0RJbzhtQlFmV2o0MDBHWnB6ckx0eENva2dOWWh0Qm04WjJPNUN1UHp5TFhGK0l6SVQyakovUTBWVmcvYnQvNTlaS2svNVNZd2RmcGdtUyt6WGo3Njh2dytlMWw4L3cyUEN0UGoyOHJjL2MyZWo1TVZ1TXYrRGNqbWpBaXBJK0k2TDMyVWhtUXBrczdKa2R2ZFVWMExCYnVEYmNndDVLN1k3Um1kb2p1TklVOEdPekNubVU2QzlJdEdZSm5TVWVuNUJQUHlZaHY5c0JOZE03aWZxODJyL0c0dzdXdWlzcmJiUGpsenhsOUFncEpBVlY0UWVla3FRTGtSL3gvL2prZkkxbjRvck5NWkkzNnRNblJDbENGRStLVjVDNXpUQlptbjMxMWFYVG1QYU1udkNQZW1YamI1K1Q4cVRlc0U0U0I0VTIvOE9Oc3o5RVkrYm5PTjYvOGFHanpzYXo0VWxocjRmTkVIczAzTnZBRys1RTd0UGtSbmVsT1FCM2JBZ3RQOG1wc0E0L1pJajA2bml2NlBZUDBKQ0xXdmZzeEg0L3c3ekhQbWw0ZldpelNjZUYrUW1WelJMVGltTDIzTDVoMjJ1K0dqTGVtOGZQNWU3bWFEb0QxaHZUOXNSNElQWDRrQlNhcEhiSE5FSytyTXFiNEZkSDlWNWMrcTVObnVpd2hialZWUEMwOCtZVHV5VmhQVEhoMVdueDNxb1BHbjVtK3ZBWHEyNWQ0RHVnL3d0Ylp3Y2w2MmRoV3orcE52T3hjMEI2RStYTkRHK3Y5TDhrNXB2OXh0R094VG1HL3MvL0M1THNGc3BXK3V2VFU5R1JQViszWHluTm9MMXhORWQrQjBsODNqQlBQTzczcjVwdlhwdS9SZjdGYzNOaEFkUnhEcGJkQXp1NkkxdDlnbWZMU1BpWS9vbmVXUXJwQTViL3dML2FodUIvNUdFaW1iZXpKSVpsN1JDOTBGcDZRYmFQMVlsdFFWOTlzZytwdjBmMERWSWJVVlFHQ0ViNy9GblBtRFgrZjZnbEE2V01kQVl3S3VrV0pyOUMrUzF2emxNOTdNcU0zUms4a2lwL0ZaMkQxcktnUGx5d1RtdXdSWW5xYUZ2WVl6MUdBMXJqR2w2SEZIazhqT3hDS2M3d3d0eTNQanUwRkphOU1EOWxObVM2VzJiNDhpODVFQ29DSDdXUjBUeVA2ZkFmcTJqWlUrV1NOYU1mZ3hEM1BDcERuNk1qb2dRQ3dNcUtMSnBsVWxqMU1zaFlzczBsb3NjeGFVeVVucGFrYWZjeEl3dURlenNxZmt1eENleDcxVjZZLy9jSy9IRjFORmFHNG1xSTlXU0Y5SG96b0ZWQUY0cy9rZldqL0psNElsL09OL1Njcm9QdVVFa2RJVm9qSWpsanpMUHJ1R2EyTFNIaWtMcXQ2MHRZOGJQNnI1TFRLbkNULzdTeGhzSHpmL2hvR01QZVRMSHZiL2F0TFU3cENmRUhuYTQxb1QxZU9FT3RKY3pLMFZKSFFGSEdEMXZucURoSWI3L2QvamRaSTc4SG5nZStXUko0VTdockhNZjNwYnVSdTlrald4ZkpGZ2dEZHMyZnNjOTRkaHVYbkdkTGdwdlprTFc0MFZTQW1hMHg3UlYwUC8yN2VBOUQwaFFEZDVkOUdOSUYwWVMwYVVtOFIvVHZQU1pHdWtITkxBVWltMkx4THVQeUlMTmlyL1hYODkrWVY3NGNkdkppZTdGajVPdEwxT1VoMlc1NGNtUlM2bTJuSGpHalNwTkQ1Q1AxRUoxL0Y5eVM5MVJRQkdxUG4xM3pmQ0J1d3NxY3IvVFo5R2EreHRBY2NIZWxLbndEdTBCWFV0MUJRMzRwM01iNEhDbjluOU01ekI5djA1SU9CZGZhaCt4cnhOZzkvZDlIbkZ2WXh2ZG5pNmkzZUt3K0dpNTdzQVE4Kzh5TStMSjhCdWhQaXY3RytFRzFlcHowQnh2dzR4dXZSVkhtTDZBYlp6TXNaZmJRVVpxc3JJQURJdmxIcFEzS1A3MGJRZ3Vnc0xLV2Y4alBCdjJnbm5zWHJQaUUrMWlpR1JIZTFTUTNRZmsrS05KNk1Zd01QUW9PVlRqekxSR0NHZENVUzZZZHJiQk55MGdiSm50ZjhQTVp6K0liUEw5YmpzVDhtbU5pYmYwMTY1Q0RScmRaQUFZSGhOZXVCWmJ1RkxQbG9DblNZK3d3V0E2UkRSVHJXdGZQbkx6NTcvZGxndldhaXB1c1lybU02eGJvY1dwTmpLVWVpZ1Y0eTNlWGNmS3UrVDRGTmVhK3E4eGZtTk9yUGdIS0VTTjZsdkhvOVB5Sjc3eUlQMU42VHp1OTIvci8wZHlZZm1DV1h5QUo4VDVYczZVd0dtaDZ5ejVnVG1EMi9UdEY1OTZ3VHoyWjdqZTg1WFoyaSt5UGlXWkkwT0NtbzJPWnJvTkpib3dkRG9QUUpFOWx3MkFZbWtmekVkd2crVis3dGFqbWIrMEhKa215S2VYbTRXMlJ6ajJrbTliTlc1Vzc4dWZ3bmxva2VzdC9qL1VZOGpuazdwdW5Ba0VVU2VDQllqb2J1Wk1ZWGFEYldoL0hmZG5xM2xQVFluQVk5T1lwMUVEblNWYW1mNkF4d3lWMTF6MVQ4dVpuZUFVMllqejNGNzVTZnJWRnByZ0U0NC9NdnpoUHBOWllxQkJZSFg5RDdnT29ReGIyMjJBSFFGSEo3eG83SWZCMUFGZVpBRVVuVGc4UnlrYTI1dkllY21QSXUybnZhSlBwN0F3cDdvemU5Yks4b2pBOW0vZXJ2c0kyQytHaXFpakxTcVMvYkc2UURxTVd1K0J0c3cvZ0NhYXlaazlRVDlwWTZ2SEkrVm1UMDVBTWV4Mk8yQmp2b0xUZ2hzRHk0QllvRkpWVmNhY294dHBWWEcrelBSN3BtcXkvSWc2R21XSEJ5YVN6MzhqbzF5b2tNYWtERWE3eE1IOW4rVVBJSzJVc21RMGNHQlFJajhSODJmQjd2RlNmdEZZVUpqZEdOWTQ5b1pBdXVrUXpoWDNpN2ZMZGpYOWhLVTJsSDgrQldWNlVndGZrQUord1RHeTdreDh6YkhPdkt6QnBrbi9VWm1SbU1ab3YrV0NWRlpnR0JNQ1dRL1VRMzNZOHQ1eUJ1VEcrd3QxSzdrN3QvSC9IY0dCRXN5QUV0alVsaGJtOGFiTy9zbVpjWkkvdzVKNmZadkxHOGora1dhb3IwcCtFZCt3czB4ekY2aDN4YXFpSUJzTDdjalk2Qndxem55SjZURVY5SkxOS3Z6UjQ4V2F3Y0ZtZ25sNE90Y2pHT2o1aXN2RUw2bFlidUEvU09hWGRkSnRtN3VoNlRuVVA3dlp2UnV6dE14Mm1UUVhoY0U4bDlYL0w0RVEvTmlMZlRNNi9kcmR3TmE1N1JhMTJ4b05tYlhxRmZ4KytYV09nRFZTenIyZGp2MGwvcFhDejdxaklmSkwrWnBudlF1RTVobU9nbXlkeWtsNGJ4TWhwczB1R1NlYVJySy83dVlIcHdaN0dhemErSHlYNUtBYUNRSGR5c3IxLzYreVo5dmh3L3h6ckF4QTVVTUV0MExvb2hrSjFramJEdWhmVVRNNkpkb0lpT3BZcVE1OFE5MHRGbUpkOXdQQTdQb25jYzEyWkVPNmEzc0EwV2hycUtiV1hDd0w1TmVPSkhqcnVjeGZxVk5PN1BZOTBMN2tBVTA4anI3Q3A3NjB4OG9vMk9DYnozcnhkOHg1VllSM0JHVHNScmY0UmRSZzEyWmcvcFhpS0J6dEpTK29HcHloRFJHRkJFSE51WUxhYTdFWlJQQU50Ym9tTzRpSzRHRk5iOVdXWlgwRS9SZWV4TmwwYlB3R1hza3c2c0VZMTAveFcrSTlkd2pPa1Z4MGJXdGtVeE8ydEVVN295dHJYMjlaWitydzI3eTY1ejQ1VDJaaVNoY1pqUzl5K2JRVldlSVJzR3NITEV1OFBOaFJ5QVNqeDRYYks1c0IyQ2ZYZDlRUnBWYmErR3VYVGNtem9OVG0yaGZKWWQ5R2dSOGVVcXpUdkIvc2VpUDQ2alNjMDdCaVpsaDNtTThQbDF0QllTL1JwQXc0LzlraGJyQkdaRTkzVGx1T1U1TVRCVUdza0hiSy9qc1Y2T1JkdmlQeWVuWS9uT3g3Yk40ai9qMkMxWmpHTW0vRCtJYVdrYTVEa0FyQVdSUHExaE9mRDhlaWZ0NXVPV2FkWTFlbGdYdWtTN0Iwc1J0cm9xYmhaNXZndk85Y2o5VDdKOXN5M2lwMmZoek5ONUx2QjU4V1Y2WTJVdmUvOGl0bm0vcnFweTZuY3NwM2gzdWxtTUIyT1Y2TlB6aFR4ZmpKa1hhYloyK1pGelQrdzJLTktta09YbHlGTzBGNWpYQ3I0N0FmMGJacy9VZkJEWDcvSENydW9vL0VnNmxmZnNOcitmUVpFaG9uV0RaVnlnSEU5WG5HWHM3K1BlMG5kc2dISU1KNzY0bVZDeFh5KzJueTdHekZNZjRDN1ZpeTdGS2ZNNHNQQ1d6K0hacnVnMmpmRzd4SzQ2bUtOK2d6OFo3YmVJZUQvVmRWdkdPTmltS3UrdDRybmt0a1ZiTFBpQS9ibkt3RXYyaFFBNGxvRDBoN1ArNGZOenBrakg4QmdmS05OUTg5ZnB2SE5mRWN4enlDcjdVNlRIMEZBR3UzbENBOGx6YlRaNzZkbXFMbnZ1dmw0VTR2YzMwTnNwdVhmMjV2cm9hSjY4eFRxaGVtNXZrcmhOMTloM211dlJmb1pKem1RZngwRmE4d0U2K05selA5ckNOaWd0amYrVS9FRDUvWVJqNW5zTDhUMzIrY3FuYTJ5Z2JKd0ZnK3hIMHZDbHIvWFlRNWttNnIrWjdyUlViNDdYbE1aUmkzNjA2L1dLM0Y3TzVObFVFVmZvZnJKU0h1Q2FiSzdHOTd2NXYvbnJ4NzVvajRySXRzWDZmbEhlNDd1Q1d5T1o0QmdzOUhSRlh2TXNzellVZUVyaUpqMmdDQnVER3J6LzNXTURtaUtGdWlwaU9TaFRzcXV6ZzczZWUvdFJ0b1FEV0RJd2UwaG05OVYwajFOZjdVTmpQMDE2MjR3dXZQL1p0dEw5aUdoMGY2LzBFZjB2ZzNvY0g3ZnRQZEp4TmVvMlB1KzRuOGw2R3Zsb2xjbzB6Q3RaWGtyUkpyaWtleFY0QlZwUTg1eTlRWVduYXU3eDYreU1ML3JxdlprV2NrTHFjWmcwZjZYSTU3eVgvZHQ5OEI3K0dGbVU1amVNNk9RTThmZVladU85ZVg2VmthMkRlVWlNNDhQcUZQTlNIQ2ZHV0lLVnB1SzhxNU5Ca1pBZmwzTG8wamd5bXNjV2NHODJ6ckZpajRHaFFBSW9VNXpYRWR0Wnc0M21yNU9jQ2Vuckl2YVI0SmlSMmFPaEZxMnZpWG0wblVHeVRua09GREVDcXZScVVJLzFnM1NUanpmSnRNYTVKL3Y3aUJqVUEraUpqbTFjTnRocmYzdGZXWXRNOHVNMVptZExvTFZXOUpvbUg2WXJueVl6K2RUQjk5SjIvdWQwcDBxczRhcTVQLzZ1N09CWExYeWY1YmY5N2ZNbTBqV05CVWVqUXNSajMwMHZhbnIzQjhpR3h0eW54ck1zWUplMDdKN0R2SXJPN1FvK1RHV1JORXJIenZQYlpUclZwK1oxM3F2RTFMcU5NL0hTdGJickFhL1ZPSkhIckhRSzhjUDFaMWpXYWJyT01jbjdhSXFwTk9wZlF2YnZpWkxSaDN1SmZycnBUQmR6UjhiWlBOaHM3RWZuT0dUcm0yWm5jVEdmNEZ4dTB5M2pGV21QTUVqb0dNcmhrV05lbGZQUWRKNlZmSVd2QnRXZjVmSDhPR2RCVmtWb3JsTGZ4dG01bC9NV1NQa0VWTDZZUThHWjNvQTBYMjRZNjRZY2lJN2pPd1o3M0Zza0hla3FqbTM3WUNHZk5JclpwcmpVTmp2cDdINCtKTCtoZ2ZmVG5BRmZoSWozRFpXZW10NEE1NnNpT1k2eFR5eVNxOE9veVErblVjeEJVNFRBWUNHaEszS0MzNUVpb3pmRStRNlRHVTNQeDRkWHBGZUM4V0JuY0JEVGc0VDJXUlg3WmsrQ3h2eTY4M3RjN0Y5K3RqakI0Vmx5RHppY2w5OHFENERxRUtiSGlBWWxrUWFMZFN3c3V5ZUp2WjdtOFpRd0FIRitSRTlYcFEyZnpUL0ZjTWI3bnZxdjBUMkNjMHQ3WW1DeGcyaUpub3V4b3hGUTZiMUpRY0xvSVQyQ3hCaWhEQSthUHFOWWdkbVQ0dC9OQm5ndWFUN0JOeFZqbGRJeis0TDMycGNjRUNXL3I4VEh2Nm5rRUQrVHhjTFQ1d3BZaGd5ek5jWG5YS0RudGE2S1dFOUVkMnlPdHhpRy9HZ1FHQjRrVkNyWjcya2hod1RKbmVLem5MakpmMGV1Q21PUVpvL2ZHK3hncFNtSHZlYkIzWVNDTzEyVnZobktZRzBwUjBUTG0zeE9oVG5Yc1NMRlhJMExPV3ZwR0EzZkpmS240TXUrS0hQTCtVUGwrV1Q1RytWOVJUckwzbEtGRmJKNWsrZUxuOVg0M3N5d0tmS3B3c3RFZWZ6aUhvRzl3Y2toV0pCWUQ4anhERVNXdjUvdXMzbklNRDRoMXIwWXBQdmJYL2pSSUV6NUJKMDFHcWZPZy8vVmxsTWY2Tys2VjArcHYzUTlIelJWY0F3MURSVnRFS2trMzVFRmxhL2swc25GY0F3TGIzWDlwTENMcWRMZkdUMHB2aGFRdUdMaE9vVTh4VnVLNFpmUThCalhZQmVoVm56ZUpTbE5PUWFBalNHUmZ5cEkzSW13T2JSeCtXb29RRUdTOVJKaHJpYVRtWm84VVRNMWVTQ01uQnhTS1l2VDZVSmtYckc0dUJSQ2E3bzY2ckQ5MXJWZ1dNT1pVZ2VjN0Jvc1BPbE1EaXZOMTllcFJFS3k1L0s2YStwZzhiZExUa0ttbldPTUt1UEU1NW1GVDR0N0diTzhISnJzRWJ1dE9xUlgxTU93TW1hWlNtZ3hWclhQcHZvVjRMZllURkNGbmFZY0dta2kyOXNSbWJrRmNWa0NUb0tHU20vamNNdmxjSFg5akpMUWRITDJFd1VpY1JnWkhyTnREOWNWYURWTDhYZ09kV1U2dUw1c1JDbHRJOXZEQ1laamwrWWVKakREUVVYTnFLWlBKdWNudmhnc2N6SkpBWnJVZ0RROUVaYjNRb2o1Y2thM3FmYm54NDN5UFNpc2NZVy9PNUZYd1ErYmVDNWJ2d2NDUUpHT2ljdU1GRTAxZnYzSzVIRGJCVW5UVTJJUjhCZlNzSUVIL2JuQ0hPWWx5Qzg1bVBRZVVBcWllUjhKclRmTTE2UktLN05BdzNqUHFMNm5LMWFvcWNOQk5VelhMT3ZPcERIN2FQeCtPcWFvcVhRcFRmK2JTdXc3MEdoRG1Rc1NyYU8xSkVsaFBpVGdpdXVWMXgrN1hqVCtoNndYcmFQTGVxc3liV1gwYURqeDVKMm1DRnVnRk9nNUtWOVFnbkxNNzZkcmt4TDNKcnNvdzlJdjMyTWJ3eHNRNTBwWmFOVGdVTHlUem9XVm11WlFUR000dXdjek1rOVpXRjBxSjNUNVBXMW5wbUdYUyt0Nll4UEZsNzRhbEFSbjJYMTBGTXh6NmZYczRHU04rOURpckwzcGJRdnJGR0JTYWdDWGFTbmVLeE1GSGlaS1duTGxnanozazNIR3VHeU1nRlJ2Zk1lUDRlSHNHVjhmTm1uU0dRcTZYdCtmcUttTGZEdjQ2cDlOY1c4TjdlSHlXSmZIRHpXa1crQXdDZzZuWGJqejJzS2lGWmh3aC9mcWxOeS9VTzZvYlcwWWZueU8vdHJuVHpwTEZ1bjMwaHVTa1lZdndoa2w5d3Z6RFRYVlFmZnNlcUlja2M2eU02bEZsN2xtdjV1emNBV1UvZ2tzUXJpc3VpVzd3bFJZMlRFNGFUT2xIS2hSSVcvMHhPSlpib0RDYkMzVytUSlJuTDNabTE0NE13ZHF5cEhReCtJR0tPTDdEUEhSNk55ODZKM1JtOXF2ckh3OHM5NTBEaTg2SzY5MEV1dWxOdThPc3JueDdycWdYeVJ6R0pFci9IeEV4dVc1enU5cDR6dHVPL2VLVGtVSS9UdzFxa1czaWtoM21aUTQrMU9WSWt0WjNIQkh4VEk0S3c5Q1dvSEZPbnRMbFdxNm5VWGh0SURpUExBcnlPakp4RVNKOWJlYjUrR1IwT0tFUU91OU5kdUJ5V2NUSlh2dUFrMjFqWGM5cmFlL2w5bkJ3YUNPZTlDRHRFVXhFWkFGdEU4NDNKN1RVWExYejBqQzZORjdneDM0eXhucDRPZG5aSVQyQ3UzZjdmc2tCU2FGWmZNYlFQZUdLdVJwNDI3UmJvYW5aQjdiK0RtK2FKOE1MRTRnd1UxN2thV3hMK1R4b2JqdXpIYVpxQkpoWENnRjJEUk8wMTZZSHJNRDFNSVdXQ1NyRHJiQXhmdUMwNGZQcE1ndk9TblNGa3dFa3RJcWNjci83Ly9peDdnYzJNSENKU0xnaWVkU2VwL2FWakpYbmgxRThlZDJWaFpHVTkrUzd4ZDJNUXlYbHBGNUhVbFVZa1A5em5NTWFmUmlxTGJCeXJ2WFdlSnFqbVVqMnBlMW5zcDB2K291ckQ4VHk2QnMvTE93cUtaUWM3TmJTcmM4ZDd0MU4vN253OUp3TnB2MTlqZHorUjUrOW5SZnQ1ZnZ2MGE2Vi9OWFhmWjd0S1p5ZFBCOXRQMFczLy9qSkdXM3dJOWx5TkpsbjFmWDhkRXpsaUpIQzAvMkV0L2JpaDhYVWowNEVSb3NPT21LdFVNNi9TeDVmakxDME91OTZVblFkSEhZTmt2ejBtWjBEQWtiaTNTOVpBblltL1pteFhOaUFLaWt0RW1lRnBmWVMzMi8ranZ6RUZUTGwrQnlJUk9sc0JibDk3MjFHci9xRk55QmwwMDIxNUZYS1dmQ2RrLzdiU2pSRnBjWmM4bDBUOEowRDBkdVVpWWwwYys3cGJjM2xKS2JCbmtacEhqLzU4bTcwSndSMzRRVGZFNDVGSVJueC9hVUdOdlRzdjVvVzZxWXBzRGcrZGIydFZpQ2o4djB3VmROcFFNNUxldXgydGlZYmtaa3FDbDlCMUQ0RHQ5UGV0cHg1S1dscThyalBuelBNUlNUeEdmK1VmdGNLdVh6b0hrQ0RwOVBFVEp3ZFZvWEdtdXVNRHROc2JDOWhuZ0xuL09vdjdaVUlVM0wrNzJVaXJpYW5yNitEQS82Q3gyK2NXOXVGWkxBajJqMExoS293Z3dvV2xMU3FoZ091N1NmZGYveFJFVzBxb1VtQlgzRGs5Y1RaSnYwWkdqYVdjaHBiNnlUL1IwSksyM1d6MUxESnZYOWRkR2NkRlY4bWM0M2RueUg0M01pTlMrQVdtK2F6bmx2ZXBaamVQQkx2WHpaTUd3b2VmdzZtUkhoeUgyejgzUWtac2VQazdtNlNjazRUajRCWEZZS2wwTjBqUjZvUUsvb2wra3Nsa0VZaGh1bnJpRStpL2MxK2U0dkpiZGkya3pPSFpjZExjTFR2dHhhQW5BVWwvVEY1NkZSNC9SY1Rra2E0dGY3YUFxbkw4UjI4YkNpQzZSeWtDM0x3VGcySUVlTmQ0K2JsWnNPc2hoQ1VqNE15Y3FSeHh4MHVRRHp3V05NY2JucGhQK1NzbjNCTzdJdnY3cjBTNGtHcGtHbGJOODFQTlV0elRrTi8vMFZaR0RIZE5aVTV1VHlxcDZXY1kxdlE4enZvY0p6YTN4V3U0TE10YitOU2o3R1ovR2tYU3NUTzlncFhlZWF5QmdvUU9CV1NnMTJLR2x4azA3WEVqck93OVdGMHRTRk1tODMrbzd4M1ZTUyswMmxGRmxwWnhJeExhYXlldktZOHJsaGNZL3lkSVJIbExzbWkxQ08zWTNsMWJOdy9DUEtyRStVWXBwMS84YXl4ZjJUNWVGeW95ZExFZjZGN05xczVGOVA4RFdsSHl5OU9PWmRLWmxZSDc4NEg3dVc3dmRmblcyejFjYjRIT2loNmZ4bXd0MDJYTDYvYitEeUwyU2twWmlSUjR4aGVvS2pSVGxHNXZWQmhsMCt0M1dHZ1N4ZGJKemdhc3JiVGxObFFtY0hrYTRHaVNMWmYvL0t2ZFdVa3F5Mk5FUk1zbmcxRkpuUUZNbXgyUGpDdjBKd2RNeGZUNFZGUzIxYXo0RUdTK3hNeXQ3SHhpUC9oZWZvQ016SXJHL0ZKUDZiTkZrcjBoUUpUamg2Yi9hbVlWS3plV3VNamdlakp4SVRWVDZBbnVDQXRKN3VTQ2hnbFdNSE9XRGxMVkFsT0ZIcHZjSEMxWExHZitGWkFRSnZnTjRSSzdGS2JEaGp4eEFiLzg3c3lTdU5raUZnNVRYZXB3VFhXcWx4ZTE3cFNyRzBtUEZiQlhxWEd0TmZ5dGdNTWxQQWk1ZUNSVUZDdjRPbWpTTDJ0emh1bG1QMTNKSkRWYThKWEt5NU81bmhHcVp4M2loWHJzTmJuSlBweVg2Y3g1YWNSVnB2T2NsNUt1WldsWXdGcnBBVTVGblozcVFCOUV4NThkTTZzZ0NhbmxBeE9LeTRobW8ycG54QXltRE5BZG1hUTlWVklCcXViN20rL1ZNdS9vWGtvanhDTkkxazNqM0cyNVZLdFdONC9iM0ZWaS9wbWd4enYrTDZJSXVTL0VOL1d5cnRteDZ6QnJORUhpcHdaL1lreDJBUFd4TUhxSElabXZDY3E3UHkxcGoxVC9wb2tNZytDUnFzVElBWmtqWEhRT3V0MGZ0Y29JQTlmaWVXMFdRQlIzaU1mNmVLcEVhSkVDZ1NCTGllV29MZFQ5ZVIxRDg3cjlnVThQN1lFZElQREU5QzhzNFdDL1c3MjJyNDR4eHNkb0JvZy9qcWxqQzdZZWFjUEJTVjlkaGhmaXUrS3A5dnV4RndXWEhQYXJJaHVzc01GbVRZNW5VRkw5SXlvcC9Na0RVNCtXU3h5SEFZeFBtOUgwU3paazkyZFU5ZVdWd20xOU01ekd2WTErSFZoc24xK05weGxhZnFOYTF2VmZncnhzOHRNaC85eTN4ZjZ1RXk3dG4zMTViNGw5SnJ1cm81aStrM09QUlJjMGw3K04xbDE1azNjRDlDOHFhVkxkTHE3T2c5SCt1V2Vhem0rK0ZTKzE3SjZKWFgrZ2pOa1U4cmptZWFZdXJLT2N2RjIxTEZvTFozc1cwVlpUQUtaMjk0OHM1NjJaUzAwa0s2VFhHK0tjTGsxbW9CNlh5cis1QWp6TTdjaUpVd2RPSUtMSVRtMTZKanNveXJLOGZBWWlFNlQzb3h6dDNaWnRUbk5mWE41ajBodnRsNjJsRlRqZ2VkSFIvNXpNWDFaay9qejJ5QTZJaVRJekNqVCtnY3dJeEdONUg5Tm5zK3ZtRVhwRVFZakFpeHhzMkpOUEFsYUs1QllIandwTFB5K3FzN1BEUjBEc3NySldXZFV1b2REQjdqaWsxQ28zTHFLbTFBZDFkZGUvZFYxRGdZbEVTWE5MeUMxdENnL2RsbktqUGQrOTRTSFgwZG5lK1dVdWUvNFNNczN1Y0MwdWhoV3QySDh1T29peHl6RzU4dm9vbmF1K1BjZnNhbUIvY0p1Z21uTk0wclhYRDRFZDM4elB4RzkzMnFBZnQwcEN1REJJbVZkL0JwMVhMYlhmRXhNayttMFYyY1ZyNDRsV2drUWVzdE9IbHJwRjFPdUxjelNNdkc1OXZQcTE1Sk9hYkxBb0s1MWxrbTYrU1V5Sk5wdVhOUDhTNTlaVWxvZWhhODQ1d1Q5R0p4amRiV29BVEh5TDViVitoditQZEhPVmIzcytXN2VBN3lGTW53QlR2WTZvcll2MVRaL1pJK25DRi9NUTJsSHNQNnV6VlY4Q3Uwa2JyWFU4OUh3M2M0aFROTE5YMXNHT0g0OERETXBMbmk1czdzZ1ZXOUl4UlI3V1RiREh1Yk5uVE1panNBWXYwOHFhdzZlTGczdXZCT29QU3B4czVkS1cvWDRReE4zYnZpVkxjRmlBeUsrTkxVSVlzZkpkV1JHQUdDVlh1M3JhU2FDWVoxZlhYcFdsZkFaRDhySGNnNmRIRm9zeHRqVkRWaitPQlV2Wk1iOWRDcmJZSVk0UzBwZmFxcWU3ek4rYnE4YXBIRDk2NnowZmJ6ejZDTXk1M1hhbDB2MHVxZXQrOUxvdzU2dW94VUhrZjFjMnE2Wjh2ZjNSajZicHBqQXdxNmVFWTVaTzhCZW14ak5hd3pxT3JqbTl2MTNzREliVUpUQmFKd1gveHBySEdIV3RMMGNoNXJxN2gzbHcyUzZWQm5xdHc4MWdhSk81aFg0RVo1NThEQkdwMXpuSm85aU82bTc4eExpcUUvOHd3aTVWNW5menhnM1lSQkhXRWFSYXJZWGVYdkhtZDNWZC81dmRmY0xFY0s1LzBoTXExQTB3MXl0ZU1lUENUQ2x2MUxpYi83NlczOTd0N1dlSjFPTnQrL29MZjFoK2NSM0J1ckx4VzM4Qi9oUGZ3WnU3cytkcGNremhiQVNOTktUYWJKbXBuT3N2aDAvelJaTzQ0WkRkMmNIeG5INE9pTk5oKzcyWHNpbXNhZnpXZ1AwWkdsQ2hEM3AvQkV5TFBiWnpNYUhpZXJNUVlzV0p5MFJacXRRZlhYSnNGNEZpdEhrZ2QzdWlwdU1PRGdwUW9HeDE3YXJQaEVsaXhXeVFjcTlhditUckxnTG8wMTkwenR3Ymd0R3RIUUsvdGhOMS9UZTlzOG55MWFlNVgvUm8rSWV0UThrdy9JTXhwK0tEOTJrV05mUjQzUGw2MUhMazlzZnhCdFhmQjY0cDdnamMvYzY1SEM5VVI3aWRhR1FiZDVqY2oyOVRkWnpTM2UwUUtObER4cWlkVjhUa051ZlA3NmFFT3hibGVscDNwZS95clpqeWJ2UU9MNWQwS2dDaFZ2NlUzZXZ5S2QrQVk3Y0RYbGtINFhORmpic1NjMnl6WFE3S1FJd2tsWHBiM3ByeE12YVlzWE5pazhWSGdtem9IRHY0dUxnV1Q5NWpJUGJTdy9rcUlHaEthWXFTZTIxT01OUFRPTndVdEZEMnpSWTl2ZEUxUHl4aWM2MEwzUmhLd09JbzRDVEpOSWRzTzdNVWoyUzVQWHNaRXVVbTlyb1ZCQ1RFZmt3OEVjRC9XQ3htc0pEVldPN3hMUEhDVGczcGIxcFhYZVU0RDlvM1BVbXQ2Wm5KMlNlVTJRSG9lOUtUY1dvdkEwQlc2UnJwTjZaUnA0REJxKzFuaitxWHlvZWFycmUyenpDVEJiOG9XOU1XL3h5Q2IxeUJlZTdEVjRpU3VlM2FUMlhpRnFYYkpUR3IxU3R4VTdpY0hpOHM3eTN4clA1bDR3U3RrcmZLdUhiZmdZYndhVDhWM3MvV3ZxUVZ5bmtTWVBTT2UrczFmcHNSMjhIZC9UMDkwOHg0SlhObXJ3Y0JkenFSK2tDMWZxejVlOXhyZDZ0SEhSSWNreGZTbTlINzd3NDhGTzhwakE0T1FvNXpHNkxUL3dBWGJNMlI0c2o3Vmo2dDdUb3E1VTllZytpTDd0WGRVYmZKME44d2dkVzlxajV4cHRONjc4M2VOc3Qrbzd2L2VhTDBXalBsS20yUzF5dGVNZVZMSzVidkRZK3N2d3NIbGZCeHZvbXRHL0tSekM4R1RDb2dhUlRxWnV3MExkc3BHRGEwVGRqMC9OYXZlbDdTeXIySFZrN3ZlTW52Q082NGVsc0pveUh2cHIra3lxaG4xSEtNUmo4T3p1MEs2NFI3KzBKZER5cTQxdGNnSXNRU2JRMzdrck9JVlFGSk56c2ZzNGcxMU0yMXpOSkc2bGE3RzVhc3hqVjd6c0dUMzB6cVJtWEJ5Z0RnenFlWnY4N21RcDRnb284aG9vMDUrSnNEY253bTVzbnFQM2dDa0VOek4zSjFhVjNtb0pqbDFjM240KzNydzkwWkdxdUIzdjNHYzZTZkNHaTZWS3cySnA4S3dlMmlIRFlqTUpuNkRmd2VUZlh3cDQ2a2VJN1orZzNoOE9Yb3VCUG4rM2loVS9RY0UvUWNIZFFNRzh5NzgycEJZVnF4aWtWV3BPeVp3b29BcHU1UmtmcU5QWHB0VE1CNEM3ZmlKNS8xTENjSUdFRVBhWWZzY0tCNDlCR3Y1RUF2OUVBajhJQ1R3enFDUDhPSm9Qc2xJenlkbUdQSnVVRVdUcU9ZM1hsNlo3VE43a2c4cHJQU0luYmJ0ODM3dm1VamZOemM0UC8xM3ZpYk1kNWIrYmk2UG95bWhBbzMrQXNud05YZjY4SzM3ZUZZKzRLenlHdE5oQjB2bXJUbmN5TzNnSHlzMGxTODkxTW5jc1Zkb2JDbzU4MVBtTGtmWTZKZS91OGd6dmRlaGFldWo2ZHZwWm04UzhwMWxFV2l3NU0vZHd2MnJNZFNEdE41M0VpU2NqT2ltMEh4ZWZORDM1YUNrd0FzclVMcHRtMlB4SWl0ZTkyVG9uRWNpa21VU0RCc2VQdE5kNmIzdlRrejJnQ3REd1JEaWhjTUZ2eFAxb2x6ZUdHLzkvNlE1d2t5ekRGNE80c0h6SjNDdFJvUm45dmpLUnVSVFA4YVEzRjE4dTdrK0c3RXVja0R2OTVKeHFCWUtaVW0ybGJFK24xZHBLZGszQ05raXFSeFpsTERlc2laMXQrSmxDc2VQTTBSMFljZkhaVUtQR0lZamovMWdLbC9zMS85NnBYM1BWK2Z3NmUxenY3MjhqK21ncEE2S0k1bTBzNGt6QkhhN0ZNaUpYMm96MFRHOFFKcmRadVRkNTFLazNlZlcyQ2ZpUjh4QVgwbXVwMkh4Yi84TTdVRjVkODZIdnJtelJzWmZqdi9PTjlzaWI3T09zbE13Tmxsc3BhZUFxazJWdzRxVjduL0YzM2QxMktBVU5DdmtIV01aU21uSkVaNVM2cW5EdnpYSk5PZWFnTCtLZXgzVzBNR0Zud1VGODl4UXR1a0xPYmtGK040MWhyY2JGNS9kbU1VNWV5Vithek9pWHhWcW01ZkdpTm80czArT3BMREhGbkl5V2VudTFRcUpBVGVycXNXbE9tSnp2RmZlb25MQkRxZkVhenY4WThjV2Mzd0N3TWdNOEFMV2VkUHJxMGw4TnFnOVRkMnJoUFRPZ2dnQ29WdU8rVG1iSWtramw3akZBUEpYZWRZV0tKSm1HVk5xWGF3S2sxeFd1TFo3eHc0S2wyVG16ZzhoNnVUV1hNMitLYWVZTk52ZW1YODF4b2c4eHdubTRMOVA5Z0hxYkRlcTBkTWVkWUxFd0JNcUF0TEtLTk1WN1FRb01SZDVicWpRSHVHR2pkTG8xUi92OGU3cm1aWGQ3MTdrR2NyVzZaNDlFZFhyTjQ3WUhQUitjSytNTjRwcHpUUEhkMmJqN3VLbUFsT2RMcmU1R2ROYkhyTjdKN3IxSXhnNzFrUXZ6cm5yaTBaa1hHbzA1dUw5enZxK1I1akdydExIalJROU12UUZrNG1HSjlUSWNnbEhsd1BTUTdTUUloaC9mb2JneGhBY0MwQ3MweWhoWnBYY0xFWDNTMlFGcHNGTmI4eFkyVUJsU1V3NjRhTDlBTlRkS3pEMVNwdjNLNFFaVSt5UUhPcGk0c1c0T1dQbVpIemxyWFJHSjE5blFuYmg4MEdSNVZwdXh0ZTlSbzBjcGZnWmIzTTdlekJwVnROaEpZM0ZycVNJQlZDSDJ3dGFTWno1T0wreW0wLzB3M2ExSlI0dHdML05NUDJ2V2t5YXpvY3ZiRjJyL3NvV211OXhiOFI2SGhpY2REQXJ1clBMbk9JY3k3Nk0rREhHeVNQbVpQTHpZVGtPZEdxa1czNXZmMi9JcHAxVXBPdy9Ma3lQTkw0ZENEUmFleW5XSjQyWjRGK3NxVTRPOWlTTmlWOVpTWm85UVU4VnNmNjZhVTd0TXVyaFhsNTh0ZXVsVEdpWUswUks2dkk0Ujd5YTBXK3JYWDFwSDRVNDE2L3NTTithdDBPUDU1cWN0YzUzeEYrcE9CelgrdWpNOFhxTHhwak1FbEV3OEpBeWZOa3J1OEs1N2FmcXN2ZFEreHdiZHNrUDliL1lZbUwxUytrQVBlMGVIOTlNZFVBRTAvTE9wQzdVcVVwTVpmZWowZmpadDdvdnVKVE83cXk3TktaUGJsSHlhOUVSQ1V5WHkzSmxhS28zdDZJOCtzN2lKL1BlaEw5eVFraHFnOCtoM2w1ZnlEbkQwWGxmNmhFbmhacmZuem5XcnEySnBya25EMGxyYVNzV3YxREZsNWZZeTgzNFNhRzRQM0pWVXByWnlFNG1xR3J1eGUwTFdnNlFsNTdoY3V2cGNFc2ZIWlZwMXlwSjZaQmJVdmYzYS9pcWx3eitpUkxqRnlxSEpIckdaMC9UT2pqQ2NCL1ZINnhMSU1qZCsrTDZCY1BuKzJkejQzMXpiMDRQUHVtVTVTOTFhdm05dkNtRkpmTkkzOTlRaDJQMWlVSDFQVnl4UlU0ZmZrMjg2WmlpVytPaWF2UEVINW9YZjM0TlA2eUUrR1lTNEQvNEk5dzdINS9QQWZtNnhxWGlGdXdhTUhhZ3BFalQ5S3J5T3Y2S0VmU1A5QnUrYlkzUXpCUjlNYi9DOGxFVm9GV2JZbk9wWE1xQmpRNDRnSGJPZXJ2SGprUkRGTmRwL1U4TjdScTRzVlNRTWlnaE5UdGd2dVhXb3M3SURXRG5DQ3RhRDBsU1NjK3ZxaUd1a2x3ZFRkR2dHSFFqWllzWERUNUg3RUNoT2g3Yiswc29jOVozR0d1bTNWdXRwSHJOaHpzR2pHWXZRZXNQSFFkbThtSjRTcE9mQkdBMDNUWXlFNlBWMVZxT1o2RTcxWldkMVloWkYrc2tzMzQxWjVQWGptYVZ4ek8vQkxDVGdmZ0N6S05JSE1FdUZVYW9HY2JubldCeEhuaXZNNFh2R0J6cm1qWlNJNDBjWnh4M1V5MVVpVU9pSE1vT1hxcDhkOG43OGV3ejZpMVhZSDg0WXhUcUY3WEhuNDlib1dYUERnd2VUbFlscFkxNFY3UmpzY1c5RjVDbDlicUpVOTN2bzRxYnZNLzcxYWlGWE5XcVNkd0oybXF1cHA1dlYwdjI5S3JPbVNPdUprczN2K3ZYNWRHVDBuUDZDa29sWnVwNlVicm40dTRrcVFxdGdZTjVzVU9KT0RUYzBibGRFMHV4SmUyTkd4bXI1ckdEcytwZDVGYkRPVkZNRngwaGpOSng0TWtia1doK1JCL3o1L0VQUDcyTFhoTVkxY0lKajRFNGQwanRRMTF0K0pNWFYvV2ZETDMrZXF5ZVh5UE5TTG1BOFJwUDVVcjJnNWhhSHpzUzBoU1RmK0hVMlhGZWJtMTl0OGxqNjB0djQyelB0NXVUakdlR0t0VForSkl3MVJRNE5xajhINnRSdDBmSWNrNk5QNVNDNDVBQ0YzQnRRaE5aUEcvNFJOdnhsZ240a1BydFRnbExMeFhCak82dkwydWVtamlQdTBWQ0xFOHBQaGNTZnRJVVlEdmJNSzVaRlIzckx4MXVmVWE3S1JabHV0RFRvQ0tnZ3dJcmkyZ21RMERWOStLWXJaTkNRak5mKzdCVkoxR25RYmhFbi9VT1FGVnVrU1pPVmNOc0ZpeFBRLy8xbGQvOU4vYmV6YnVmSWoraFFWL296ZE1FczVTeUo3bExTYU5OdnJtb3AxOFdIZVdYN3R0ZHlJYjdiTGhTVEhheW5iUW50R1EwUDF6b2w0eUtKU2VMaTJzTGpMUnJCQStjUzh2N2FoWWdiTFBQUlBVYkpzSXZjZm01OHZsNjB0b3V5dHdmamprV091NDF4cGhEeVE5ck9yUTFmVEx3MVp1bk1BTnMvWlVuUW5RMHFhV2NTaVZIMStIWVlHNk1uRWxQbEdPQmtwVEp2bHI5TDd5S08zdklqcDhPOG5iM1prMmlEaFk1SnlhZFVLWHRzWVRqOGpsMnRpRFNiZjk1OW40dGpYVnQ0WE5xWlpOZGl2b1ZuWitmUHFxVXdkUEdNR3R2L25WbHpTN3ZBQjUvTEJ4YjZiaTNrM1NDenovSUVPNGd1M0Z2enBsWXdaNUxXK2lZbEV0WFdsNDN0WXV3cjVSL1RvZDNXTmJLUXVhN05USHRSMGN1Nmt0bURKNjBuTmNqdWJML3E3Vkh6ZS8rMFZNV1Z4UjY2My8xdDd5c2tqNmIzZmZwczFWaXNGZ1ZPOUlKRW4wcm5VUWZrZGJuckx1c1BYV2hDM0dpcUFCZWNzTWVBVjZJcHFUTyt1M1NXaVlCTVJ3WWx3cFRIU2c2eGRoNDQ5OXZIdFA4OC8vNWlRZnU2L0tqck1CdERrYU5LNGZtSzdFMEt3QmNkTGRSeHIzbk1OdjN1ZGRiV0lqTnpJSHB0TFQrYkM5YlQwT0JFV0h3R1VQQmtjZkh2SnIzTFRzbmsvWWtENTJLcjBBNWp5ZU9ra0gxemtmS0hGN0R2VXFDK3kzMS9ESUFucjVhS3VBVU41MlN3MEFPSzJOZW80eFgzZm1uTUM4V256N1lMZEV6UDZ1Wm85Tkd6VE5oa0V6Y1h2RzZRMXkrMytEMndySFIwcFE5TjJIUUhkSndQMGhOV2pXMWJVL21hRit2L29RWGtGOTNtbURRVWFHby9Hc3QrbWNYQThKWjVKSzFIczB6Q3MrdEJ0dTdMcHRnd3FCUjB1TDRGWlpMOHZ5Q1JicmMxMk1HcXJhbEM2aStiajZWdkMwWmc1dU1CTFEzYnorZXJPOXhicWhoTmtJeWttTzBFOGEwNzJPcUtFQ0k1WXJESHZSYjFUOGJob1VYdEgxYWsvenNYNHo5WkxCTlpuSHpBOTdLM2FPSmozRGJUVXVtcDZRMWMwTjAzVkIvN3cxdWJIZ1BMazNkSWJyV3VoNjA5MDdtb3RzRkNDaUE1MUJQanZaaDlmT0YvMDVNZHdNTHphK0lFcUNrUzBsdE9Kb2wwSDZIN1hlTFhmM3N2M1dGUU1WZHQyaEtmbitreE82VHZDR3dJbDdOREZnRGhYemFEam5yVjFPZ0p4Q1Y1Z1dnMGZrZDlma25Ca01LOWdrSExWVjI1K1hjNFdDZnROV3F3L2VyU2l5azViR29SbmRHcWNNR1BzVUI3TlNvVXFXbGMxOURXMmNISllncnp6TUNRMDFiYUtmeG1sNXhKdWllLzg2d0VnY2VRQmpmTno2RGwzWmRsek0zeUp3U3FGT21LZUdvRHo3WFlRZTA4cXNpRTZjR1ZHZlVQaUU3aWNselgwa0NIK2ZwTlFQY2M4RzU2QThLZ3hMM3hzckhsc1RqOVBpMmNPKzloWTNPM0pqdG9jVmVCZ0kvZG82NnlCS2QyZHBBWFZYN0ZQSU1iaWNoVDA1TTlYYlhUWmwzcndsN2tkQ2JURVZCQXNCemg1SUdDelVPV2ZQY1RWVnFadzZ0a1VoeFl2bWtmcTd6WVRWN2tZT3cyM3NHK1J5eUxVOTlFdXI2SHk1Q3VNUldjMWRZNDM3Q0NBaWp2QTZiVEdFMnk0QVFJUFBpYzJyNlg2WUVJaTQzWlN2ZE9sdTFXTzdQYWZkWmxEMDFPMkZ2c1lHVlFoeTg4STQ4WGpYcHdwbE9zTC9pTjhYc3Z5WXpVcDE2VUEyZnYxY3Y2VHNOM3VjeDdQZS9qVEJKeXlFVVc2NXRsU1dHaXB0S3h6K1dTbmk2RHZjSEpJVmlRdUhTZUdYMU1DYzVFbHhjTlNzSUZncHI4TkpZMzJGb0tDZWR4ZWIxYXNaM3V0Z2U1Qnh5dXNYMUo5b2ZwZkdvMDFrRWZUZnc2TzQxeUlvTWFFRzIwbXBRTG5LYUZYOUxuSjFRNlQvRmIvTXowdFVWV0pNMFJHMmt5S1lPWTJOQ2pRYlltbFNJTEpXanZwY3VPaFZzU2hKQ2NJOWl5QktHNXdoek82Q0FoejhielRXM3NDU1VUV2pSSWZDR0RQS2JkS0lNVG1jWW1QaG8xYi9JN1VSTWFiK1JSclBQL2FYakgvbGVYSmt4ZmhuOVYvV1NpaU5Cc29KRUdHaUROSHI4MzJNRktVdzU3WERpUGhaNnVpQTdPQ1RyOGlIMlFueTFPY09RS2p6ZnlUT2VpZFcxajNtR3pkWkRMNSt6SGh6ZWJLNDk1bTMrekE5OG04dm1sMklUMlVzN0FkV09keVM4NFh5UnFZL1Q0aXpRd1UvcUJOUzdvalA3YnhkL01sY0VhRjJDSjFwVUd3TFd4dnR5d2w0TGhRV0phaktQY212OXdabzNuY2t4dXp0bW83VS9qdkNOTjZaOXRORnk5ODl2a2hzQmU4bXZIdW0zSkZtdHAybFlvanJjK20rUis5bjJ0OW5zaE5sUGRJOTUrWmFWQTYwMXQza3NUMmVNRVhoeERVQmdmek5BekpEU3gvcDdFOG1lbGVkWWJMWStFb243Y0ZOTjIrWkYwNlJtYkw4a1IzaTdMbGZXbFhLVnpjcVdKYjY4dStJYnRyWEZhdEdOYjVzZnlkNWY4RWxoSG42Y0ZONks3YzJ5cXpTWkxjNnMyak93ZXQ2bzF1SHgwYmhCaFVFZG9lbzE1ZStYdnV1ZXBWc2Q4OUp3ZDRJRUF5YzJ5VFVYbm44K3Z6V05pUE9EQkhlTHZEOGxoOHFXOXlRNjJCbVgxRnowNkFncXpSbklFRjVSV2NOR3RFcjFZN09CZ1VNYzk2TUc1R2V0Y1NINmRrQ3pCeFZPdXpkTzYvUDZBSDAzYitidEYzMm1yTUpIU2QyNXp0dVFQTnplaHJjV3JMVmFPREFYdUV1QU1aM3JNQ3NnME5EMFk1N2wweTRVbGdDcUV1dEtQODBYWFZvUUxSTEp5cEN1RE5ib3JES3EvcnVXdFkxcDA5dWJkOXN6Rk8xQXhxQ05wS0xLSTk0Sjd1OHRlNktvUG43UGx6OXZqTkpYTTkzUlZydE1sdmFIZ1l6VFNaeXEyQ0tJcmk0TmpYY1ZOZmMvZk5kMWtTamMvU1VVM0tkaGZDVTJUQlpvbmsvMnB4S2ZaUXUyR2wzcGN2T2hmUGFPYnhNQWp1V0MvZW9WeHgwbStYSVBOcUdPYjk2MnhRYnhPeWYyTEJWNHYwUHJzbkQ4dWpZc25lU29XU3g2TTRmMzVaNWQ5VHUwMGxoWDlqc2dWVUFXaW9WRjZCTlJwZmI5d3ZvWUFIOUU0dXhuWStBai9RWWRHQUoxb0k2NU9CTlQxRjU2VHR1ajl6VDRHSE85TDhqVGEvQkM0RlJKRWQ3VEZIazhUTDRUTGFYUE9SVW92aUM1dnk3Mjd5aFpMNVcrVFRkdEY3eW43U3RYcjdhNGJDK1FXQUczTEFHNGliK25maTJnREtyMDFlakRFTTNlYjY1ZHBLbjB3eXpYS1NyLzdDZHQrUkUyejd3aUJkcnRwMzQrRmt0L1NPcUxZdS9odjFMZTRpcWpNSkJNTnpYUFFXVlVtako2NDBwUWpMbFBaSlpLaVUvSmFtOVd6SkV4UFBoZ3NYR25xUlcwNVFyeXNLNkl6alJ1VnBiUldrN0ttSjFPNmlrdUQ4enJTb25wQ2Y4N0NVRmZyMlFGbm5pMk5meEVhVHNYbkptRm9PTm9YT1N0Um44MkxFL1l4M1l0alpQRVlMTnlCN3NpNWcra05Zb3VGa0pBRnR0V1ZQcXhaQ1hYZTdsS2Y1QUNRaGlpTDZOWWhnR0psR3BPWm93MDdaMWsxSWhVYlpWRUR1bGFCdTRVbk80Q0RuVXY4Ti8wbUhhOVFrekJGTGxlUXpSMnp1QzZnKzFwNjExZTlqamc2UEJubHFMK3ZLK0lDZ3F3cWorcWFRQmJOVGJPbXNteWdab1RCNVpzKzAyQzJOWmwxZjUyZkdrcnY5cnR5ZUJjS3ZFdmRuNjhkSXkwZFVhbHZ0YnBEbzZhN3UrTVlWMnB6T2ZLNm94WmFRQTdXa0djcE9yQzdGNjZNVUx6R3M5UFpFOHRzZFlVNVZTUG9sZTh1MWhvNmoxWmMyOExvWXhDUlJpM0tUT2VmZDgvYUxZNTExVHo1RVkzT3FHdjduK0t6Rjg2cWlONUlyTlFLRHpTaURzL1FWZ3RLOGRIbmNqQTl1RStpRWx0TkZVLzFUQUM2K1psTEhwTld0R0tEekQ3TEUvUlpUeUM2dHhxalRtZXl2bVAwV3dWOTNZd0d1VmIrTlVaNTdwQ0Z6ZU45UkhTeEJXbkpqK2hzdjBxWlA1VjdQMFg5ZGIvNzI5N1hrQ1dkb2hwSDdlakFNc0tpUytXQlMzZmRaZjJoQzNxaEU5b1BlL1lkeC9Ua3Fla05WaURsc1ZMVmxETThjT2EzbDFIV0xSSDFLekthaXhIZ3RreWlvZzVUaUxhMjdWc2FoUzI4MDlvYWxPQVlXWVIyM1lxaVMrMThKS094L2RVVEEyUmZZaDFTeFRLL0VXbUk5RGxRZkNacFFScG5TbllwV1pVZ0lSUDd2cGgxK2RYSFl4SWFybDVBZGg1TFlxRVBWSkZvYW8xMklmdW5pRXJ2ZXVjbGU5cy80SHNuYTIvWGhNUTlTL2RiWFFGUTY4R1Z3VFlqWERKMFlQZDd2enptQmFUT3VZeGRUUlg4anFYYTRySmdhbFBsa0VaMDBLbEJYdC9TY3E5RGRrR24rVUREMTc2Y3l5cGZqQWRqbGVqVDg4V2lLWU10em1KZWdNaWdpQllVWG9vV0ZDQll0YUFPY3pSZmttMVpzRkZuY1RaR3R6bks4OFdZZWZteDZNY0VFWDREQWkveERZazV5dTlDSnZqNE9GWkplaVl0am45T0Y5UDI4NWx2N0VsUFBwbnVZR3RRb21PTUVOL3llNE9GcnFFZ09YTGNHdFRienFSK2YyaFdhUmtKZUgvR29LVDBxY3ZaZEE5QXJQVWt4L1FsMG1SU05GbWRqeXZJd002K29mcllINDZRM09vcWdHVjBYRzA5dFdldVFYTFhFSXNmalpKc1JQelZ4c0ZaRlhvUjdkajlMcW4vOW02a0pFWm9OR2ZIMzFIQ3NZUnk2b0ljT1kvRWFVVjFaTHJ5WHhyQlErUHpXWTQ2SWtkaTFNeXBVUFp5RFJUZ1dNcVJ1SXlpL0xocy9BSUM4QUtxa3VpWW5VQkNpeE1DclZkRUFDMnVwWUhPaU1WdTZCL3BwWXIrdVZQT3RiVkU3YnlIMVhiamR5SXQyK2J6c1h2VUdXa21yZjVpU0xPa0NjRkhJTTNxKy9qM1JacGRIVk1oQVRmc2dFaXU3VU16S2hUYnZwZnBZWUtyNGlSMHFwYnVuZEJTcE1NMXFOM3plMWhDczhzUzg0UFE3T2Z2MVl2NlR0TjMvODdaam0wb2pzUldLNk1iVDV0YmJZOHpLSVp1bVkzZHNyMlNTa3VldURHOXdkNXExVmVxU0xuMCtTdlFmNXdJdXlJV3N6V1JnN0RZcys1ZXV1eTJKN2RuUkU1bU5XUWN0TmkzZmVJTDJSZGkyazI4ZG4wR2FNRmVtRlA5TGM2RTR3UVNUUCtpK2tsalptUXpEWlFyQ2VIc3d3QjRjS1hoeXJXLy80aDlhRUV3Ti9GTTUxaEkyNWgzMkd4ZDVQSzVYSjJzVlcxanRadEM2OWp1Tm1seHpKdjhtOTJ6d1IrSmdLdU1kVzBsNEs3SStnUkZqbEVqWlJSamQrUjVVSTU5MU1lNkpiTytFUUY0Vzh5dmZZM1hJalVmZ3N3dlZ6RzVIV0dRdForNGlJakR1dTFsSkdDNU9sQzNxa3dkWXJPTk9ZdlZQWEw1a2JQV0ZaSGdSMExXN1NET1J4aTZlVlZKSndTcWdHTll5V2VsZWRZclpBN2RpMGhLZDdpKytNeElLTW9STjQ1MVpYOEg5MVFVZjBpVjFkamUrZ3BVcVdmMGhQZUdDdFBaZDVmOEVxM294QnR6Yktxb3dmTGNLc2pBVldlNVhrY3FQamczeUdJSFc2QUtqWGw3bGUrNjV6aFd4M3p3bkRVRmVCalJ6YTByZVliWjU5Zm1NUlZRaWgrU3cwUVlQWHB2c0FOL0tZc0hYUFVPeTN5Y1V4clVxaVp3RnhHQTE2N3Y0dnV2UjFMR2VTK21Ed0tOa21tTkVyRmVOWDk0ejJ1OEg5RDB5TUJJVUtwU1QzQTBTcDRDVlFpU1BKZE91YkFka1lrM1ZDem9aczljWGZYaUhudmhDdVRMcmZaNFd0Mm4xaVhrdm9vK3VZK1J6WjZwVnJzTlRVN3FTeXpFNk94SG9JcHVxM0pUOEJIRU5CMFdhRDVNOTZkaUh4ZVFpc042WEx4akplNWJFSkNKM29wczNsTkRERHREZXQySFpqenJqMHZpNGlsK1F3cE45dkNBNmhaWFYrUXArTEhUNTdjaHJxcFQ4WU9ZU2Y1a2ZiOVN0R0VKUlgwaEw2ZHRuczNkcng3Z1A4QytnTG5DN0pDZVdNZ2pXRjlKRzBYRUtXRndienV0MSt4ajRFZjBJY25UYVBWRFZOQ0o2TjhYMElrVjFPRVZ1WGUzVkRKcXNtbXZxSkpUUUNiZVZDR24wb2J3aWhaNVRxQzNRZ21aSFJnTk4wQWRuOWtHM096TzV0Y1NOTm5qZnFtUVNQMXhYMitETzIwTWIzQXVsZllkS0pKVFlOR2dwUmxmWEp4QUZYYWFLdlQ1a2VCWXFyUTNLZEhCRUtGb1FMMjV2TTE3REdteGc1TkdNVnRkNmZ1VG5oWnBua3hvYzk3bFIvWnVTakVIVFJFQ2c0V0VqdGF4WnFhenJHRi8velJaTzQ0WkRkM0tldmJXaW5kaklIMEdtK1NObmhBc1BXeEtiUmZzWUQzTmZ3Tk51OVljc0JOa3NicVB0eldqZSs0T0pmclpuanFCUWw0QkNDL1BvOTVSTlJzdlNmTzZ2U05vcVJFZ29ta2dTNDdwV2RBcXBzcXh6RUhQYVBqNUM0WTJjbTk3YXpWT3ZzK2FWeGI1K2JXbVpqeGszV1JnUUFHOUo5QW81cUlxWHFYM0JLYVd3aDJ6Sm5xYTZzeFNhR05LNzJmVWdMSU04RWhueWVSenltRjBTVXJDNlhiK3RGZ21BcFJNekJVNU5IcENYMFltQlF1L0pLWUZNazFXaUFkeFNtL3lYa1NqUzVWR3FzSXNjNnVrOEtPc2tOemlTOEZ0a0tyQjBGQUcwYkpRN0VkVEJiOWE2TURpNEFIUlhIa3V6NlVHZFpZblIyaE9sV2NTZGZPNVZWNTBnNUZWOXQ5UGFIWXNUbVZaSm5UbEdDd1RFMjdCNHFKNWFCLzlYSzBtc2pVczh2MTRyYnJGQzI3V05KeXpNcmxGd1cwUm4wMFpjaUQxVFhieGhXZks4eWhEN1FBMFBjWUhsYm1tdE53TWI5NTBsVnZsZTR2TTFlZnlIcmMyOElzZSt2Nm83d0xGY1N3UDdzMk1od1dvc3d5bEt6azh1MnN6Mkx1TEliaSsvYjdjYmsyb2I3ZWZkZWpxMitXMlRaYzVsNEtlcU53SmJDam5zeUs4T3RZek9ycW5VM2tveHMzTnlKd09KMTRaVWplWkVlSElxOHJrMU1VWVlybWhuNXdZYmw1cUxseDV4K0hSRFlhbkg5NWdXUGdSOTNWRlhsMUk0VGhIR3plVlNYalF1NjV0REZ5aXp6VGQ2VGI2TGQ1eGdsSkthU3pKbERNcG1TbmRFVEc4cnlDM2R5YkxSRWcrVytWdThMalJFdFlMRzF6S044bVhTdWZ6cTJUTng4cVlxaTJ6UzhNVHNYNnlmVTUwNDJKWkZxRTgvdHRyb1RIUmw1KzZlNXNzdU9tOFNvMUtPemFpUERkZUlVWDRBK1ZROThhMzNlYWFuMy8ydkJiVFhoTXRCR1pFWnIrZEtESGZmM1dITGs0SG1mSDNRZFhQeUJPdHJjUkU1NVNEczNkNXA5STJyYnB4VTdtYk1wL2NRNmVsZGNpbGRQdHU5c3RmUWs1MzBRUFhTK3Q3KzdCcTVYZEd6czdvVGErd003djRzQzYrdi9RYnZGK3Bmc2pFdmlVd0hyaTZKNitzNGFQMXcrY1Axdyt2S1QzUzFlWm85R3VWR3Q1YzA0aXgyUVZ2MUtEVWwxejh4Y2F2QmY5SUY5a1gwMEhzNzFHa1B6VXZnRnB2ZXFNdjhJTGYxYS9RMU9odXZiVFJUOVcxbEYzc0N5N1pUamJ2aFJDdzQ1TE5wQ25IZzg2T2ozd0JDZ2RZK1dDd2c3NmhaRVZwSCtUWFN1VVhoblpmTFAzVnlNY2pJZDN2VGR2OEgwcXpmcTNFMVFITkQ0MDFVM0JSWFVwVERwZnVvbVRPTlBvYjBiaGcrT2dlQUk2UjZWN2kzcUNPYTZObjdkS2l2QjNsM01xZ0JsdkFEbm9HVEVMdm8wWWY0Z3RPODczWW5DdW1rUzcrdzZRMFdyZTFOL2tPL1U0NmJ2Sjc0QmpzMGRVVU1VdFRBaDZ6TlZqQjBhaHRLcWM5VFlGYlN4V2d6RHBJam16UW5xYjdDRHdtTURnNUFySzBRWFNnczRNdHFLU3Z2UlhrWmtPNXVLd3NYTXpQbmRMZUxxMi9TRnVFNlVFZlVIRkQ2Vzd5UGo0dml4TUNRRmxadW1OREhDTlB6YzE0c2ZSdUIzREFNVHdSZ3JUVUNvZjRXOXFibnJ3d2lFR2tLMVpnZU13Mm80dEZuS0xTa1U3UmVSQkdENTNONEUrMFRsM3BPd1pUb2MrQ25uTSt4Qml2Vy9Qa2phYUNvRlIwbm5YMnBnZS94T21HeDZsQlNYVHVxNU9qdE14VXdlK1orKzVpR1h0Wi80dlhWUEQ1eFdWQ3orMzcxMUY5MzZzMGNIV0kwbCtHaDgzN090aEExNHl1Tjc0ekF6cXRMMUdOOFZmcm5ocHAxd0FLT3ozZnYzSngvVFJyTlg3Rm43MXM3S3l6QUpsMHo1NytWTEQrWGdwV3NjWW9qWE81L3I1MVJoTWFsS1creWViVjJpZXozREdVdkNQa3gzSzg1NGNOemtkUEZKd3YyZmMxWFBuSGRxbWR6QzUydlR4Y3dvM2Zuc09SNDVqUFZSSy9oUDAwTzNVRXJXQ21IMVRaK3BiSzZJOVpUL2NPcCtmTzU1Nk9wZGZTVGczZmV5NG42SzRPbThURnpwVG1XVHhxblI2QUV2TnhnYmYvY1pPekpOaFlscnQ5M3dXaHUvR05uV1V2cTZYRStZaWVTbVBlMXRVM0crZmpjQ0pweG1JQmtaT0g5QkNKWmFDaERIWUxTaWJNNlBtVmoraU54VWtIODdUWlR5aDB2VGlraHRtZjJKZjlnWU95ZUtQZ3lld2g4dnI5K1BaaUg5OVcwOWY3U3BubnVwWEFGWFRSODJLcXNSUnl4WWYwZmZLWk1wMTV1QzdvNXZhZnMvdnlJb29OSkpGSTFQRGVkWjZYL2NyMjk5Wk5lN0RPM3orU0NyYkZjTkRCbmlybGh6VFpFL2taV1FRL3NrdDdodlZTZnhyd0wrTkdOUzlKTjQ4TWo0bVdzNkZycHVwaFR6dnlidm52T0M5czdQSWo1d1FVa2dLcThHSlE1RUZUQmNpUCtQLzhjejdldmEzR3U3Y1JjVURYZkQxM0RKZmp6V3o4Q2N4OEZrSFpiMGZ2d1ZnS3pKNUFtaHoySzQ4c1JmS0JPdjBaMC9tYjVXTjFURU51TEVkZExYL2ROWjIwNXZmcmt0dm5pd2VneENxZ21jT0dzdkxlbWlxdDlIR2x0VU5IZXN2SEU5N2FUUnV0RE1tNXNYeDFWM21ONU9OVUJZNnVITEdNU24zM3I2emptQVM2aWx0L2EvUFl4eUh2dE9MdjNYVlFMTGRlSEx0THFmWFNYTW94a1V4ZW4xRXI2L1BKNXNJOHkwcmZzVHdtUUh4dnNCZmpucUdtT3JMaE1aU213QzJXL2JPN3l1RHZkRloyREU3YUxHVWsxMlJLVjhRa2w2dGM2dEZTK2h1Z01GdUxkZm9MZHJDV1ZCQm92VGd2cm1NcFNkTHdIS2dwUjBMbjROU2dKTWJ5NEFyekFVek1vNWExM0IxL0N0NDMzakowbHJ2dCt3NHV6MGVpcml2U2RPYWtnQ3BGdWlLZTRtWUpKTFJZQjFxcU9MT1VJeXdWemxEUjdWTE5NQ0wzaG9lTGtjYVp3OVFnQXNvZ250T3NsRmt3TmIwQmV0Y0dxUEpwNGN0YlVIZDBQTFRaU1FlSHpvVzFGNDM5ZG9uZXlWQkQ3MVJrUW1kbDBpUUYwbUFYNWNZcVJZMmtVRWpqUVE2S3YwRUc5blZHZHROK2FvcTAxdVBienpIR2x4MVBYWXFHMVdoMjFuY0FLd1ZZR25qTU5uUElkSXBJYjY0dHN0YjQvc2MyMWJtMHAzZG9BZjdkYTQxS29Ieldpb3llZkVnMGgzSXhNSzZRMGRyS0Y1V1dhWnlBQzl2RWU5V3B5TUY1ZWVFTFNVR2ZCbHE0MTNQOXZtbS9EMHBOY3dSSGkvb3IwNU14OExWUlpuT0NxeWx2Mk5MUzJVR2txMEY4dm02emczcmhEWnBrOVUrbjlQVk82WTlGYmZnWXJQb2x5ZlozVEJaeXBqY2d6VktUR01MbVhmNjFvZGpMYTdYNFdqeStuRGg4YVdTcHVwWG5zRFVaOHlKejBCY2wva3llR2JxOHZhbTNxOCt6NDhPc3pTVkZPaWIzVmh6L1lGRFNxVGozRkJCWktJWVY4eEZINzNHNzIrUnpqRFR3eStzR2xFd1UvelpZZUNvQUxoSGRPQllyYmg2d2YxbTcydTh4bjVZZzA2VTVaakl5QXpoekFKcWVVRGtiQzVibXhCNERzemN0anRQRFZoMSs1czJlVTJSZ2pmSmdBYytKNkU0aXpZZys0SmE2aVlQWnhFWDlhSHN5STBtVGxUQmcyVVQzRENlZnRCRWRtQkc5MWxVeDhmdzhsL1FEdzF2WXJ5em16ZWZMUUc4bUFyMDNtMDhiYWMzSUU3bzdMZlhOZlowTlhlQXh5REp5Q3lpWmo5em5mYnJHTXp5VjdrY2pFdVlqNXhkblhYNGZtdFdvd2Q3MHBLeW9RcGFOZkxna0s0NFFOL3VwUHhjM3FDaXY3WG83SWk2U2duUW9RUm9WWkhUSC9VZ2JySDJ2OVRmTlNlc0pzTXNjT3NneGFIbTQ0T0laK1NCR1FHR0lRaUcyTUFaT1g2WUJ3TUtUUmcwUUQvUzdyNzhnNjVFMWYvNSsydXFxV0Q0ZmlpRTB5cTdkWVRmcFk0YnJXNjV2LzBpMWJJRklHcEdSK2RPcCt3Q243b2YyVFBYUit1UVpVT0srRnBwS0IxSlAyRnZxc012Wm8zbWtycFNaUVIzaC9hcG5jTElVNFY5QUVZbmNwTXFTZm11MWRaS3ozejI4YS8rRDFOK3JXWGk3Tk4rWFlRZnVCYXd6eGQxVVpzM2RqVXRjbVNpb1B6c2EvODA2R251NTVBU3NFM2ZQbWZVUFFDRnE3dUtjSG01MDgyNlg3M3ZYWEg1Mi9YRDU3dXZ3UmtkdlZzRnExc25SbTNIanhJTzdKRnk1N1ZRWjJVK2x3UUtkY1Z3T1F6blVuRVBOdDFvQmFwcEpsVVh0dG1ycTBucFBCNHJDM2dRNGZkanJPOGFveFhuVzBxM1Y0dWd0UDdLTDNkZ0lneFFKRTlGVTJtMnkwdFd0ZnZ2ODlmaStTL2UzbkZadWQ2UVd6bURiM0JuMVRJbVFCMmI2VFpTYzNqOG02eStCOTU4UEt6WHpuNDkvVytudzBXR005SGZkQWgwdHZDOXVMVlZFL0N3czh0VDYvTE5MbVZ0dGNvRTZrbVpQZ3VZYVRzK21XbHd2cTU3VGY4OWtPcnVQZ09vazd6NEtDNjU3aUx0RlJzQWxsL3g3REtmTlVKUkdDUEQ1emszTjc5b2FGTE9lZXN4V1UzQzFyTUk1SFBlYUlvMDA1WWpUek5GZVh1Nm1lTTA3UG13Tjg4UndtK0V1RURrYzR0Sno5NTdiNVhrMHlKNm1rTzJGYnFPTk5HK3dBd2VNQmNkZ21aMUd5VkVDbjI1YmV3d0JQZDNHWCtmZTFiWWVuV1ZPTTBydVg4dHovRWlJTzc1UkRBRVdWWnJFbFdWeE5pNjZxekpvV0pmbmIxeDczQkZPZEN4V2ZxdnM2VmRjclpZZFJHa0g0MGVkYlVHK0xFeVA4WUFIVjlXMGczUFAzTWkzdVJ4aXBDaXVMbHZ1NnZ5bzlabVVIR2ZmcnZHOGQ3b3FaZXRxK3U3RzlaeEE0dnlkVmlyb1Btb2RhWXJJbEhLZ1JvVTVQV1F5TlVuckdJc2JvSWp2YzF3MXVWUEhwSmI3cUhXOHMrc3lLVG0wUEF5dENVMldpWkJlOCtlS09FNVcvSEd5R29adkk5NmVyRVhIWkJsWFY0NkJ4VUswQnhOTEVXQm1kN3I5QXN5UHZHL2ZWSnJWRkRJd2NMcExzV3M0SFpoajRCZ0szQzdsSlBWbGZodmZ0cjNqWVdlZmpvLzNLajF2ZUpBOEprUjcrSUQ3SmRzTFhia3B5RnZ1dE1jbHFibVVUT1IwSXlYcHhiaXJ6bm1vZVdFZmNObXEyZEF0MEovN09ydmg5NVY3cFppT2RwM09sdGlVQzRld1NoMmU4b3ExT2ljUjVuRFRsRjEvN2JrYzR2dW5qOVBHMGJrQVZ2WTBWZDVhM2M2NDh2dGlWbitwZzlOaVNnNXJaYjRXWFJBT0xUUmJHb043MitFOXFVQXNPNTFmOHpqMUN1RkpDWU16OHVkd2kveEJ0SGIxUGE3U3VFTnBnbXdJYXVnbHByVDMrR3k2Vk85L2pkZFk1NnNzTlRPdTNueTlyQy9xT2pHdHZNN1dRVU9sL2VrZHRMd3I2REF0NTFoTEpyb3lsVEkvanpTMWZvYmVVK3BtWCtIVFFsRGV2SVBlemVLNllsL0FsVFp2ZkpZVEQ4a1YrdlREZWZXbU5hUWxDdHJXa3A5aERLMDRCeE1ZM2dZVEdObFgrODFNRGlkd3hnaXAwYnFXWnIwb29wVFllRTEvTlg0MW8zWHdXa1pINWZ4MkkxMFloVG0zbldWN3VaN050UjBUQ2EzWGZKL0dmakt0UTZkTHNscXlyYm1iNG93c1FLL0pFdXB0b2txcmxydTdBUmwzSFYvK2lEVjA2ZjdiUlY2WGtZVTVqV09mZzNxMlRHRVhHc1puMzREd3E5SHdSNzZ2dlFQSjVYdXBNMEpUS2VsaFA2cnJLd200NFd0SGxHVVpQYnFRcG9YdUlRVjVQLzF4YStqU1ViYUxqS3VnVkhQZE1rM0l1cE9IME5rM2RDdzFxcmI2Ujc2dlEzWDhKdG5lQUhucWtoUjd5am96clQ4dzduTnRtY28wUnVrdHczZlgzSDUzTEVwZFRRV2pUdUgzK01ncitjclhZVUh5ZHorNCtsVzNkMXgwVS85dHc0cU42NytjWG5EcmVCMHhHWTlFZmM3SWJFNC9NTlRZdUMreG02ZHJ4YUFDTGlRWG8waU1uWkM2TUpOVE5aUXVmbmJUdkI0UUxteVdHK1d3WURyZmNuanZUdDZ0dmVNUklhYm12WDlvcUxBZ2w0dWgvdG80anp5UGF0aHFrZVNjTHJCYW1EZkN2dlRjVGRpbTluMzhtREJoODdzdmhuUks5RmwvNWliK3VoaSthcXJhRjRmb0dzM016b1ZwR2hwcFgxM2dKdCs3akU0WDlhSTM3Y1ZibXRUdmJ2aXVUQ1d2M2tzQ0owSnJYRFNWY0NvU2J0TDNlcjdTeUJtNWZLWDd2bm1QY0ljUGZpUlVRcU84K3pwYk56WVdqRjFNMGdtb1VpbDhtbFRwMkFDRlBGamMrdHA1NUNyMjZBNlh5OFd4ejVtZzlTSmNqNnN5Y0M5VzdZNlV3Y1BTY0RhYjlmVzE2enIwYkd3c0hseUVjTTlURml4bnR3YTM5OGo3T0ZXN2JiMkY2NjVEMGUyNmFQd0plL3lRREwwQ2ZkZ2Ywc2dxYlg1MHZqRlVTdzIwbW9qdG1ESFZZYng3VmVvT2RGN044cnMrODZ2RE9xcFpjNGxxV3M3WTY2NjZYWllYSDZONlgzNXZWVDB0bkZ0ZFJiKzU5dDNsOTMyUHRYMjhpdjZJT1hXUzI2MHFiUkxKQzYyVXJnL1haU1YwNEkxenFtdlNURTFLbzhhOWxJZXJVWVJIUisyN1JOeFRtT0gvTGVyVmR3ZGk1T0x4WXFXZEh3K2srQW1lK0w4UVBQR1hBRXpjREhaNEhNRGhzYUNHRHdNeWZEUjQ0YU1BQ3g4QlV2aVJ3SVR2RGtiNGFBRENSNE1PL2dwQWcrOEZMdmlPZ0lJUEJSRjhJSERnWThBQzN3VWc4RGNHQlh3VUVPQWprdjgvS09IL1o1TC9YeWJKLzdzbTV2OWRrdWovSG9uekg1WXMvMitYSUY5TGlpOUdTMXZiYTlUY1JsMzNyL1M3UERINjM0UE9XOTFWcFNSZngwSDAwQkRGVFhvc09OQlFhV0k1dTVFZXViZWdGRzF0U2w2OGtZZnE1L1RBcE50eVc1UWZsWFJMYUwwYmsyNHZSZjEveEJxdVRMb3RKOXBLcXdjazJ0WVQxQitmWEh2NUhUY20xTjdUUGlldFlwcjZxeXBuMEF3WVVCRnZYcWFSQ1hvdTVUMzhtMnk5b2FXazkrMHcwUVZUbnEvdmUzdHJueWI1L2lQV2tOK1h3dlV5aXdSRnZURGpoYmpIMzNKMEMwK2dNMjRBbWRSMGlVZS9vMTEzT2cvdStmY01rK2ltdWRuNXJhWFRLaDNzTTBteFlGWmEzQlZwbDlhb3ZDYnBKQ3NpOTdNRGRhZWtEQXRwN093UkY1eHNvYkxLdVNUNWJ0K3JBN1ZmTHpKNGR4ZWJUbU4yNmg3dldLcTBOeFM4TDNVYVpLUzlUc24xN3VyTjd5Y3RkaERHdjZ0L0w3T0RkNkRjWE1RUWM2UzM4ZDF3OC83RFVCcXlhRkQ5QU1tNUIzWU15WFo5cmd4MnVpcnRUZnRqTzRaYzNZVWk0NkIwVFh5OXEwY2pGMTJYbVoydDN5MmxPVlgwSnR3bi9FUDZUdjIxTzRjTXIrMnEwYlN2TFYwOUhvRklLZklHc3dZWW9EM1lhY3J4N1h4Y2QzaWIvK0lDZlg0OG9xbTAzbHNrYnlGT2ZQZTVGanNaekRPZ1hWUG5CYm1ncTkyRE1HaVJCWXNjSEhnaGp0L0N4M0pyVytGSzVYUGlvZnorZCs3amh0Wmhzb1BBeU5vUUU3ZTEySzBpR2RnWU5HMTV6UFpPZVg3U2VvSmpzcktBQWFvK2NJeEduOVd0L09mc0RhL1FOanFYWnh1RDZ1ZUEwOVBHdGppQkJOTXUvck1iNStJTE1Ma0gwTjFjbkVzRWxIZ2VtRTRmSlh0cTcrdXVSVDlFRDBqT2ZlSEpzYVdCVzJRWC9MdHM4bnV5UE0rSHlaNjI5My9IdTBiM0JtNU1lNGQwekg4WlZNTDN0NkEvMnNZZTBVZExHUkIzOVJpODhMNDBQbFRscGVybmp6cS8rdnRLOUJ1MTNKMGRiWHByK1UzZndmQ3pvWnZycFc5OXRwWUIzRVRlMHU5V0R6MnByelVXSEkwSzBUWmZCR2tqRVc1R0pmVysxRzc1TDFndlBhdnJNMUd5ZFo3dFl0QzBMeit1ZG5wYVEwd2FhWXI0amtqaSs2WDN0YW9xYjJWSFRjZHo5ZlB4NXUybUJGVUxFWFZ3M09TMTRrZzMzYWM4ell6R29jOENDMmMwTWZXWWxVNGh0dXRqUjRGSmlRNFdzVVVUT2xXaDhsYlNEYlhrNnpTVFBiK0lIUVF0R2UwUlVFRVFwOWc0Z1luVVdoKys2UW9aTktnMzdjK2ViVXpZUUVOcEl5VlpKRXlQSVlCaTVTay9QU25TVkFtQzNycmdpR3NVaFUzN21EUStrdWNXSjZELys4dFpDdy9YK1NMVWxmNE1LTXg2S1lzUXFRbUE2N2JYU1l0ekIzQndEaFJ4YjNoU1FiUm5EclJNOVMyN0g0Wlg3QnU5QitObTUxWkNyMTBiT0RidDNjR2dKTHFTbmwzYXU2K2o4elY4Nms3VTRTUE0rK2ZTR2g4aGUwZm4rbFkweWJ5Nmc3VkxSNW12bzhibnl5R3NGclc0a2FmWndicXVoZzh2cElTMzBWRzJwak56YmxScmN4bmRNbmRkSVIxQXlWTkxPVzdUWGlibHZhTURRMkY4SU5Qb0xrRThFd0ZWT2tldmpjKzMwMGxuZGJ5UkQwd1A3azBQRXN1RnVOVlU4WVREWTdXd2NjTXo5WFMybThidmFqcTEwUWphYzBzVkFvdURMMGhkQktwRGxGT2ZSS2oxNUVoWHBmNFVtVU9zL0p6Syt5YVQ2YnIzWEhNbVNHWmhVOWZSbFQ0MC9iTGNxSVJmTDNVS3FxQkJzL3Fub1pidS9iREFpNVhneWl0TFFoT0hpTSt2TzZidFJmR01mWU1kdUxoK2NQeGRVT1hOak40TE5mYVFhV215Z3hNMjRmMTFXbHN1dnJkN0lqWS9jU3BBSEdMRnJkY0x6L2k2S2hMeDc0ZzlwamtQaHBwaXdUU1ZJTjNucno2K3Z3aE5NWlBmeC9jTVlLRVBWQkhUeFRTKzQ5YTZZa0d6bDlhNXE4dXBjeklzY1duZ09TdzRlV3N3clNtZVRUd1I3OCtzZjhBeW81TEdmSzJjUkhSb2VneHRsbHdFMlZrNDZQTkNRN2dDTFhTRk56WGRFZkl6MGptbXF1RFg3b21DTEoxRUczdXFpQ3VnMGdUUGhuQ3B2c1YzRURzZ3JSRk5KZXV5alI2ZjNFMjBwOFh1UE1lTTZIUSsvNXIwcXVzcWhjZWhPUnR1c2pRZDdtQ2JxcnkzNGg0aFc2QThCL3dMWHorL3VObHFPRkdiVXczSzU1RFNaS2N4NHZTV2JENnRjNytTNWxwa1N2emRDU2dpbWNoWkpHUGdrcHQyNitEV1FGUFliY1F5Z2VISlVhUGNxK3N0eHplMzhmNi9yT2NsdENRcGZhcUpsb0RTcDY3VTdaSkdwdkxPcWhVSEcwZk5mRmJWN1pJMEh4WlNBTW5xbmpnMXZZRUw1cHZhK2VNVXRyRUZyWmY2ZCtqdTFGUnA4OVVkN3ROVStxVmQ1WlZxMnN2RnU2aUNpQzJPSTY1MFZzWjM4NHlSRm90aGpTOER3NE9FcmpCYmlaVzNtcHJyOEhXM2JLTnVHRmlldkVPMjVvSVQ5cHFINng0R0Znc2RZeXhCZzJYNmlGNE1xcjl1a1FzSG9BcUJRVWwzdjlkazVVaFg0bnY1elBzSVhTR2gwWk9KN0xsVEp4bTkxVlVBRFhUbmtuUmtVQUtjK0ZKZ0tQTGVVcVdhM1ZNNUExS2pSRVF6Q3gwM0NuWDJCdHZ0Ykd2ME51dWZMQ3cveFpQTU9zakczeGpVY2QzNFhoWTR1bklrVFU5K3hIczlUWUZiU3hYZytmZlNFYkloOVo4OFVyQTNCS2dwVWxDaW5Sak9FMmpLY1F5VW8xT3d1UnZ2bEJwdGQ2UForbG5NK2pWK2E2YlpPbTNmdk5idndDZW1KenVBaFdWNTBKTlhHb1htSVcyUXJxeXpneTFvcEFHNmtiWnZQOXRHdm11NDF3c3dsL0o1NTZuRHVBNzRzSWxIc0N0Y1U5Q2FoWllVOW1iYk40VlJOZkZkYXpydzlmcW5ZbEJIMGxCa0VTZnROTkUxQi9ZR0o0ZGdRV0lmWFVMVDNlMzRSRStRdmNIV1VrZzRqeE9OVGgzMWtGWjlxb09Oakdoa2I2bkNLb2ZBRnRkVmFnWjluVjFaYU5wODB6bzY2MWc0M2JNZXppOFdHQ3VFcmR0aFlKM0d2dGFQMXRiMTltYjl0VXVpM2hYblR4alVFWnBldll3RDBpOUszMTE1L2hhU1VhclFVc2pXN3BJTzN1SHM2MURUeEg5YWdablNoTWtlN05mTzU1Ny8vblUyWEgrUWY0b3dlc2kySHZoTFdUeGd1VDlHOWczMnBRY3gveGQ5UGRMZVpBZGJnN0w2aTE2c20weXB3UTc3MlJXSTVGSksyd2RqTk54Y2NVNEhnenJ1UVEvT1RRN2ZBY2dXT2lGNWhCdXJwK1U1cnFON0FxaENxQ3Y5K1B6WFZvVFRYaHJ1Zm5FMWZMM0Zwa3BsWllWbXFVUlduMjZ5cStSRWpxdmQ2YlZia21ZMXhMbzhodS82WjNQamYzTnRUdysyZHdkYTgzaHZpdkhwWmtnaUpRWUVnQ0NkRkc4Mm1SSGgyWG96NDhKdkhwNTlQYjA3KzdveGlGZHZjTDIrWkNROXRPMThOUVA4QXpPOTQ0RHM0bEVOc2RmVmh0amxkZURQUzNrVjdjRnN2am12ekg4RVF6bUIzam5mdVZHb05EVyt2ajdBVytNYkxKQnh6UVhUWDl0OG5QMTkwdjUvOXQ2dFMxRWxheGYrTDNtOWRyZWc1a3JyVGtoQlRDVkxWRTQ5K29LREJTZ29uZUFCMzlILy9Sc3hJd0lDUlZPenF2cGRlMzk5c1VhdFZBemlNR09lNXpONUNmS2J4bTJyVUtKK1pKbDZ5MjJyS3d2eWZyeTl2eHBGNkY1TklpVjRFN3V2bGltRVZoSm55TkJDdkdDcUM2TXlvV0l6MmMxazZhU0lvN081OWZoSnBHQW5kbmwzdzcyWHhNOVk0VDVPWFY0VHF0L294VVhpeFFQSkRXZHIrR0p1YWVkK1hLUC85ZHpqNjRHSks5VWV2NS9QeUQrblhQN1dwdm9iOVdBYldDNFFlbHVRdXJhWmJWalA1ZDdYcTM5Q2J5aWN4bTNyU0w1dlRoakMzLzJlaEJpY0ZQQlEwc2I1WFRnYm8weFVzTXh3aHRiaEdHcDRweVBrblAvVXh5aXhMOHA4c2t1ZS9kajR0UFpRdFExdTcyMWkzWmNSSDByeHZZNkZHQm1IN2thRFlCcWg0YnpFOUpJcUE3TE03NlFHSitOTW8vTExOZlRjYlkrNkY3VzdOZWRhQ2Q5YW53dnJmSkFsSGhrZk5xL1huMW1SUFk1dTV3YmVsMHh3eHN0cE03ZUJPdFYxdmVVWXgzUkpqQ2VrK0ZxOHZ2TmxhVk1GaUZzQjRIRE10OEdpTkpZWGIrZUdkK1ZVS2VsNzVRMFhGeGdYTmVkTHVmLzFlZFNUTDJ4azNHM3NzN2xTNTh1dnpTbmNMUFBEOW1PZGJ1UElLLzR6a2hweDdyYmJIbjNRTUNUNzI2YTBSRGZSV3o3Zks2Qi9UTkg5ZUIvaWRCUzJwOHljUHNPUnNPajByMWQvZUtjRy9IQ3F6SDhJSUxycExDOTdxMHgvQ3pEMEFidVRpYnRudGFYWjJhRXZxOXY1bWNieFMxczYxZDFXUDZlQkRBbHQ2b2dMNk9WOHh6TmhSQ1ZoaWV3dzBQRjhENENZUkNYNWMvbDlvMnUzZFFPTjVDYnlTWE82V252VW1OWjRIMmRKdDc0ZlpSKzdOSSsyRzNmbkI4dGZsYllNdnhPMW9wS3VkNlFQUURySU1iVjQ2UlhjZmRmUnJCNjNMallFUVlyUkpENVBaemlUVWdtWHVuRTV4OU5OOUVyWmJ5bGlVSHZmRDFGSTNjMDBWVjRIalR5VTFCb1hiaUlWeTFrLzhpanZiVnRIWk9td2YxdUozckxtZytoMlc5UEIxOXFhc2xhUEpPenRnWlo2N1JIbkRTR2xVdlFOYldPYjB3dkUzUDlhRmY4M1d4WC8xMVNuWFVscFBXLzMrM202OHRTRUVCM3dyUXFkS3d5OVZoNHZQK0VOaWpoQzFvUHVKaEp2R1hFR3V0Rk1xWHEweUZ6cXJwbnY3a3NCeXgyaksvaUpsS0o3NGNxTmxjbDN1SG01Y0NucE80dGRYMm1SU1IzZDZJYk1PKzVNNzc3NDNXMjBtVHRraG05MHQ3WWhaYjRjZGhkeWI2MlpkbXExZ2NlY295WnlMa1dEQk9SRFRmS1RlRVdzcUVkUzdENGY1MHJsMDYvUjVEOUJSLy9KMHFDdjltKzhHU3E3aGxiK2MybjIvOWMzai9tdm5mQ3JHOGcwNllOMzkxejhoTVllUmk5L2NMeDcwTFZ2cis5bmV5eCtjb2QvRVpyNTdUWDhaRU9YVC9iODZ6MFZQOW1iL3dDNitXUDc5bHNhczN5S0hudDdqdVYrNlplcFF3K2dhMTZncVA1dk5XUzV4a1AvWXEybkczWGRyMFg1N29RYys2VnV4TXNNSHJHNzhoSWRvTFR1Yjg1U1FUejl0N3I1UDFEZDNBQzlOZjlOYWdFRWUzaWMrYmU0ek01YXVHaC9WbytKQ29iVzdvSWVhM2FmL2ZPUHA3MFQ3NWJaMDdmL2VmSzJTYkxkakIxM0dhTy8vLzNIVTRVY2hyNTNmSCs0ZFB6bEIvblc4Wk1veTZMdHhzQmRKbUVRWjdQWjVrNGViVGQwak9WSFBuRTJUa0FISVQ4U2x4ODUrc0RmZmNEalQ5K2Vudjc5eDlOeTQ3angwbi82OXNPSnMrVWZUeC9iYmQ3NEtCazYraEY1VG82WXd0OTMyY2ZmNDYzbnhIOW52c2pnajZjL25yeVBwWk12WjB2dlk1bVB0aTRhajNBVC9NM1RIMDhmeTJ5NysvQ1daT2JaMHR0OVJIa2hiamY1OGdnemNPSjRlL2orRWUyamVCa3NCNW5ueEdSR1pMcWVrenB1RkVkNWhQZlUvOWltVDkvKzhkUWZqNS8rK1cvMENzZC8zOFNGdHQzbVVoUXZzeUxMbDhuVHQveGpoeGE3Mi9ReitXTzdTNSsrUFhlN2JaNThwRzQzNkFlMXh4WVoybER5VkxiMHZHMlNmdi9ZL29qaUpYcHhYcVJvYmRwdWswZko4aFd6eWFkLy81dmRZandhWkJvTk52dnM2ZHMvL3ZuSDB3OG5pbmNmeSs4UWgzbjY5aVE1RVdLaDYyVnhZNC9SdDM4OHhRenBrTDB0ai9zSmY1U2xqcmVjTGVPbGwyOC84Sk5iZDdYMDh2cG5xWk43SVZyRzJWeWp4QWxnZVg0VUxMUDg2ZHRURmpwODkvbWI0emcvL0U3MzJmVWRqbXM5OHk4dTczYzg1NW52UGY5b3Yvelo1cHkyNC94b3VULys3TDV3eXgvTzhvWHZPQjNPKy9QUGx2UHl3K3M4bFdNL1JadmdZNWxsLzJjVFJKdmozOWM3dDJ5aituL1Ftb01sV2t1NmkrTnlpNVFmNmpiLy9ySE1saHRFYWJrVFBIMTcybk4vNi82dGhVaTZ0aTA0eWtWLytqOW45STZlMlByc0JqMmhDWHhzbHZreSsxdTAvZnMyZS9yMkZFZWIzUkdObkc3OS92bDlTeitpTFZCdDdHU1ppazhCMGJicmVIREpNYkhEZmpiU09Id0lRclNQaFNqUS9TN2ZKdWlQV2UycitYYTkzTkN6WVVjdXp4L05NdC9HeXc4NnhYLzhreDR2NFJyMXU0Z1AvdjgzVnpIZElzNzIwdW0weTExdlpLTExZNzc4MkRpeDhwM2MwbmpyK0lJVE94dHYrVEdEbmRLY1RiQWszNUtodnNQb01EaVpneGp2c256NW9Yd0gvdW44K0JGdG9yd2c3Qnh0Nkd3VHBla3lyMUVWMmMrTFNTR2lRTnNlYllMR1NidkwwTmxIOUVxZk0vYkVPV3JMTkk0OEozdjZ4bkYvUENYUmh2a0FYYU9QWUptTDN4ZUxQSXFqRTR6OGZmbmhMVGM1WE5SdWl6NHpXU2JiaitMcVkvV3B6b251aUhjS0oxaVcwdTVIRkZ4Y0tQenh4RWxWeXIvd2pVTEMwWWsyeXc5eXlSaGh5WHlKeitCL25zSThUNSsrdmJUK2dQL0w0RmorelR3M2E3cUkzaTdMdDBrMTQvK3BKdk1HL1BqcGJIcmt4dmxSaGpaN0ROSjZnSGdKZXpIOFRTWXl5L1kzV2NuSkNIMUkwVWVHT05tUy9GUjV4ZStpZjgvblkvSUJIR3ExWmJvVFJ6N2RQQ0plNEpGSmxDRDY4dXFmenJmcE50NEdSZi9nZkN5MTdTNEhVaUxUQkxuVS93aXFLL0RoaUhTN0NLR2Z5Uzc0VTlsRWVlTnprNjIvaTVmc0ovbzIzaVhMQ1dKbGx4K1RUOEtsRStlaEdDNjk5WEFMSXVlcDl1RjNKdytSWk1RZm5kQ1gyeXp2eDVHVGxVTnNzMXpGakw5Y0hmcU0wc2I1MVVCY0lidEtOUC9HUDhZTUUrMU1LUlEvWjRuaEIvQXVTZ2huUW5UNTdMNzRTKzdQcnVQNXpyUG45TGoyUzQvNzBmcnhKLytuNnptZEx2L244cy9lbjM2WGYzNTU4ZHhsNzhmUzY3VTZMZi81eDdQNy9NTjVva09LNUQxMDRKYy92WmVYSmVlMVg1eG43OFh2ZEY3YTNzdVBQMXZ1YzIvSmU1N1Q2YjEwMjY3YlhucHRqdSs0UFpkemw4K2RsNlgvZzJ2M25CL3RxOUs1ZHVkdXllUnJ6SjVxbVF5M2YvbWMxWE10N2dGR3oyZ0VISTlWQXJJS2tORlAzNTVnTVUvMWo0VUNYMmd5US9ZcmpRaEhmT1lNb1RrTnZJdnNqNDdVL0tkdlQrc1gwQ05xMjRqT2pVeTJ2SHgxdll0SVovcDA2bnc0eVRJbmxzQy9rWGJvT3pDYk5OS1hIeG5XMGRHSGY4dkN2Kzg1SjA1RGgzczZGd25lZGh2NzJ3TmkxOUhXZi9yV2JyVytJQ2ZTYll6NHVyTEpseDk3SjBiRGdQNlFieitXOCszN1J4UkVHeWNtUHhHeFJrUEdSamRrNmIrREF0b2d3dERKZlVSQlFOZ0lXbWUwOForK1BiMlcrR2RuV204Yy9WaDZoWWZKSWYxWXpuS2tjL3pQMC9LNDlLaUo1YUFoL3ZIMDk0TVQ1ZjhuQzNjNTJvS25mNEkrRUVmNzVXYVpaZDgvdGk2TVFiVHhlZml4ek1KdDdEOTk2MkptSUM5aHh1a0Y5OEVxQmRmaXV4MjB3SEFKSnplY3o3OWp3b3Z5eUlsZmw3RlR6SmJlZHVPalRXejk4WlRDR2RRK3luYWV0OHd5NXQxSUtrZkpjcnZMcXdmL0RVZVVSQnQvSEhuTFRiWXNKVk95ekQ4aUw3dkc0Y3BKb2orSThLSS9RV3JzTmxubTRYS1hhVHU4blk3dlIraG9uSmcxVVM5VnBYTURrdkw4ZjMraVlsMVlSV2NhRjN2TTkydGZaSTJYK2xmNTNBU0RjZi9FRXZHdWFVdVlZclFKeUR3MmRYM2xpdm4xY2Y2enpQdHcwbVYxblo3YXJleUpxbHAwWHYvNEp5TFhKTnIwOTA0VW8ra0FkY0RkZFB5S3RGb2w3Nml4NnYrQUdiVDEyVDFNZ2JZdk5hd3IxbEw2c1FYKytMcDAvRGphTE5uMXBCL2JZekZiNWpWZlNMcHo0eWdMWnhXQm5kRVR1cWp2KytYSFIrUlRMUTNKcE9pVDI5Nys2OTMyanhvbjVlQURkSU8zUGlZYWRHblM2dm94aHR6VHgvSmZ1MldHZFJzdjNUMTllK0phclFSWUJkTGduNzQ5OVZxVENHeVR6TnVteXliVzhUbFZQejE5Y3RXZEZFbnRmT3R0NDlKNExTOG1vOWNPUWYxaUZkWWhWc1BZank0NHhzWGhOOWx2OUlQNUJ6TEN2Rkp0QVNXZ0d1ZkxVL2RaTmZyK1Y2ZVNrMFF4R016L2VGSys3enRQL3l3L0xjb25aOUVtaUplejNQSFdUM1ZtU0JXYXM0L3AzRzd6VFhUbHY5ZFZYOUMxOFo2ai84MjlGRy9EemsrSmdLYTZNaHc1ZUpyNnBWWDdWTEt0NzlWVGhCUEQ5ZmpTY3EvSWdmKzlwVit6TGUvWUQvb3UrS2Q2SC82MzJxd3hNM200WEtIenNmeitzVVVNZzdHS3FWWlZaRjVPdHdqUHUxRXpiYkNxMFErV0gwbTBnVWZsRDhkYmZxK3pLdEFSenp4SzZBTnNTTTVTeEZURjdTYkxQNXlvdE9yd25qMHdpZDBHczlqaSs5WWY3Q013ZXRtTHNrdDlKMS9POGc4blh3YkVmM0p3Y2k5VXNGNXRSSG00M2VXRUpxaE1JMHEyZ0dOVk1LTzZCK1lUaDhwTjFaai92UjZVMjQ2S0JxYlRaTHZqemI1aHU5OWprTjl2N2xLYmtldzdqUkU2aWYvYythSzkyT3djN056bEhPeDh3V2JrL3RZOWR5SGZZU08wcjRqKzlrK0kvdTZEK2w1OTAvOVNPaDkydXJaZVd0ZTk1WGVvWnM5WE52bHlqN3NQYkhHRGRuWG1DZjg5WG1LMEdUZU1sTjhVQy9pY2N6L01pQkdmRGI4N0gwNkNud2ppcll1VnFaSnhmQ3lES010QjM2VC8remZzRndIVkU1Nzd2b3RqSEN3OHQ2WllMYjR5WHI5L0xIOUV4K3V4bGxLanBjVCtzZHhIU0R3UG95emZmaFRqS0lseWNoMHZ0N3pKOWY3MU03aFVKY0J5Y0o2K2JYWngvTWNUNGsxbzFXVlU1bS9oTWs2aVlMUDlXRmJaRkVvaFRDMVRnNFF1cnhCYWJpR2tOdC9kZThraThQa3dkaU1oOG8wNEE2eWlRamhZaHZwaEdYN3NGWjAzcFJBV2poeWZsS0hLZWFTQVJCbXFXOXM0Wm9yc1p5NnZVQXp3MUUyOFRCbEMyNE9XWTlxeE1oUkNYdzdxMzh2U3p1NXZWNHJjalcwZUozRXFZbmpBTFRqRDJCWnBoc0lnSFVmQ2R6YzVkaFc1dDdObmdMOEZhMUNHUXV4RlF1WVkzWGdjYkhlYXBQNVl0RFcwSGpUZlY1Zm5jcGZ2QlBwYW5TdXlsbnFieWRzNDhWTmZmTUgveXZIR1RYcUZQZDN1ckUxYWpBLzRYOGZ3ZDI1N0ZJdFJkMnNYNk5sd3czeDI4cFBPWG93bXdaVHY1UzZhdHd3WkU1d25Db2xqSEdQdnNQM1hlS08ydmY3MlgrTmtGRHJ3dDVhanYzOEUyNVVpMmFHWHhIdmZuQVN6aFNaNWgrM09HNDcyVHFLdi9QNTI1eGhhYk0xZTN0Nmlic3MxaGNMbHQyL2pqWDJ5K043YW5yMjhtVnp2NUNiU3dlUER2Uy8xZnB3bityNGI2a0NiMWM1OWJodUx3SmZEV0JuMHpQbGFueTBLWWUzeTZxbHNyWHZhN3NkdHYrMFg1MG1tV3V4SFBYaDJ6UHNjbXR1WTc3WGRSQys4dy9hTkthN0lGVmtxYkdPd2QyUTljODhTZ0xSQi8zVXkrRnZpMTZaMWtmZ2hCcWw3a2FRaHRiYWs4Kzd6dU9odEVGbjRockt6K0Y0KzVtdUpNUHZMQkk5MU1Dcy9xM2VRVVdSNzcwWENtRjJ1TXRSUGFBeGwwQjNPRmwxTGthV1RJZzhDTDlGNTJ4eWRFUGw1U2Erem5BblFaUmh5NUVRaEt2UC9ndTJib3VkTXRYTy9OVjROaXZGSzhOOEFMa3M0dlVjdmU4ZmdOdU9OdW5VTVBiTkpUYUtWU0d1YlgreXIzTEVXK1cwL2Q0eHU0clpIT2NsSER0M1gzc2tmeHBrOTV4SjB6Y2FtZXZRTnFiQm42MERSYzhFYkN1d2Nqby9PWVdvS0IyWWV4eS9NNDAyTXRUM2FUM3QyQ0N4RFd5dHlkZDVUL2hoNmJmV2RKQVRoczVMN0FlVGpGdWdhNlprdEN1aDhXbzY4Q0N6NU11R3BPdXZ1eXBXbGszZmFCcmpPSXp6TEErOEV2dndTTEkwZTUwVlZ2VndOQ3F2b29QbHVIWE1TV0h3WWVwdHBZQ1c5dlQ4RTZKNkRWd2loRzEzU3F5SnJzU2NmOTB1RGcwUXQ5QzVySnJnenRpYUlJL1Q3dXQyZjBTdGFSMXJsL0NxQmI2cUlQZUtyS3VXS2JSeHpjeFpXVnhTeGFibTE4L2dnUld6VjRuT28wbllOYVFlc091cThpZEZrQlZYYXBwNTZpUTdWOU9pcTF1WjAyZ2JXYTZjM21YV0t5YXh6R00rRlFFU3NxUkNHdGprTm9MSzlRSHRsNzhVZ0RTd1o3czdKNVkreG1NQWNjTnVEUWdodGVScGMzanVHclp5dDJlYmpsalBVSTV5L2ZsR2o4d2JzWXlZVXRpa2crc0h0Q0tab0RuMjh0a0c4ODlwYTZNcUhZSXJQNmsyTXR2K2FHUnpra0ZxUUFMZjlGeElYN25BZHdIanpTWURPMW12ckI2aGpsUFgxdFhVNVJ2Zmt5MUxtaW9LN1dPc1RiU0hOTmIzM1BsMXdram03cElHbU5WZ3kyczkwQWJRTFlrTGEyYUt3SmdnSEo2WXVrLzRtd0hTS1dIUnR2d0tMUDNKZVcwT2lMblhKZmFqeS9HSCtpV1A0SElYMUdnZmJONU5UWTNzbXVBRGJtTVFibjhKMnhhMnR3aE8wbjdaZWtQdVJLaklTMTczMk9INTVFK01laUF1RFA5dVBPaDlHb2o5SC9HUE1hM3VyUGNGc2Y0WS9OL255alBadk15RngyMHB0SDF4ZTVWd0RxdWZ4bk5GN2dXNzFIYlAvcjQ0c0ZYNS9DL3VKMXVMeHZjeWVwdkFPWlZoNzl2S3NLTTJRZTQzdWd0dTJZN2pMOHVIS1hsZEpsT2c1cjYzdUxUNE9mYWpYeEhWNjhEdFozVnJtcUlVVFU0VzFiUnlKL05DMjlndzZYc1dXcWNic1dSQzY1dHlFN3MyeHpvL2grKzdKRWFtNGhmM0huK3M5NW5jUDcrbkJibzlDb3RaOXRxZmsyVVZnY0NOcFB0Q0ZSVXYvTVY5THFxYTNBcU9sS2xOOXREQm4vWHhzbFBPaDlQNWp3ZXVJYjUyTnBUKzBUay8yQ3d1cEdjVTZzSk5lQVREMEJnZnkxcFo3S3g5NExVR2hpYm8vTU4rYUJITWozdUE3ME4wb3NsMjRmQ3RBODdPU1l6em15VjAxeW5zSGRHR2JveGpVbHBuUTh2a1h4RWZSSFd0YkpsSjF0YjBpY3lsYWc0L3VNWE91ZEh4cnFMWndqVjJQOEQydTVBK1dDQ3AyQTIvc1hmQVFTeFJXY0M2djJ6ZHhOZGdwQTlCTjNna3ZyV1JXclR2bUNQUVYyNWlTZmVydTNZaGJlUUFIcTRZdUExWG9GWVRlWlQzMCtCaWc1RjFEYnpseWI2M0laSzFTWHFkTlVXVnBMaWR5TVNVMERyQ2hYcUpudGlFQkJEbzZINE92L1Q1MU4yaC9qdG5Zd1BmbGJZYjVsNXZvYlZEbnA5dmpPQkprb09YMkNLbmtLOHM0QkdWZXZ6a0pIS01EdWZ6MlVNYzFjY0FEcFJiSWI1QnhpMkNKN25EQnJkMjJ2L1BsT0VjNkI1TDM2TTdDWGVlbG5ZL09neVprdnc1MmlwU1A2UHpNV2JDcWVBbUh6MEpjb3pNL1lWalk2VlU5a3VUMG8zWE1iRU5ETW5mbGkwTFhiZXVGTXREZUY0V0FkSWpFVHVJVnBSdDhGZ0Q1V3RkSjBUbmcvZDNacHRmWWQzb3k2d1J6dWJkUmhscGhHWGJpR0pQQTNvejI3a3lJM0xhMnZhQVJXZU84Qk81K0MwdzR4THVNN3NZMmVuelpZUlh2aC83bytkYzc5Z2w3cEFPejgzSkFmd1lVbnE0aVkxaERvRmM4M3hUeG9Ya0NuZDNJbWRidTVNbmx1UmlaYm5aaXgxNEN0ZmRBWjc0cG9MdStSbU5keUxqTkpMQUEwME9QcWJ6MGgvNmU4bXgwRjJ4WlB5RjZzeEo5cmNpanJpS05VdGVRVHNxQTIxdThqdTVNaXN3ek1zODNiVFBhMjBVbGY1VzR4bFBCbEw3UURRZFlmcEo5aTNCckQ2eVB1cndWR0MzS1cyQ014RXQ2K2RsdmlENGI1QlVQYVg1WFRVZHNqMUxYMUUvTHFMdXp6ZW5lWmZqaTJOVDJEQStrdWdjeXNRV3ZvTHIyeGZlWGRwWGNyL1JrZ04rUGQ3NmhZejVDZGJacmQ3QkF2RTVmT1lXdzhzMVJBWVVEekJrRHZDdzZrK0dJYzVNdTZNTlVGN2xmbjZFeVF6c2hQcVBJb3oyUzNYak8yZ25KWlNRenB1ZmpCZHMzSXNOZWtVN3U4bHk2TE8vT2d1cWJ3VFRSa1IwVVY3b29kSGY4Uk03RmNGZkdiV3hqbWtUdUtieUs5RHQwVHMva2pMYjJqUElnTHJJTmUrOGxpN3prVDBBdjY1MGlvYjBHM1FMMEdYWnZvTFphN2gzb2ZTRHRLdGEycVlXT0FlaVNLNWZuc0cyQVpFTVNueHh6V3ROdFJ1MUpZTFRMNG9hdVpYQ0lUKzdHWjUrOXpRN1FFc1BiNkR0OGY1Rjh2RGlUU2xjWlRwNnYyaFI4dVBlTHF0WEdQYkpUVElUQTZzTjVybTdoUW9qckxyVFo4T1V3UkhTSXpoUHF1K1g0NUcxMHZGZnJFV2ZMZnV5enFGWXpvZTJBbXd2YkUxYUM5Vy9INktKOVRHM0NFeTdhdWdHdjlRdmJrTEJ0SjRmSWh0eTd5U0lURTl5aUEvYWM3M0dJbDdxRzlHRWpuaWdLcVdzS2U2K3RwcmhHSHVraE9tOFpLbWVaV3F6SWc4Qk5lbXQ3MWdrSXJXNGNVVWk5dHNyWnMvNUtQUTBLbGJ2bE04RjBWOTRGUGo1NWJYU2VMKzNKWEdsVDNkSTFlb2dIcDhnR0pQY0Y3VytCZURLaUU4UWY1N1Q3N1dIN3BvTStYZkdPT2JGcnBuVVpzYktNVG1DYkljYUlPUnV2NnFaN0NLek5HdWtCTGNJZmc2dmRZY3ZDTHkzQWV5VzB2STBlV3lLeTZlTzlQOFB2QkIvRTJmdk9FUTE5K1lYY2dSSnRyZEpGWmdMbjhaL01oYWxOckkrdEJ1TWdGVnhTNytwREM0TmpkNHpwcCt1MkY4ajJqNGxzblNKWllDTStZT29uWmRBN1lOamxYakVXOGJNV0wrMFVtYXg3MXRCSlB4SklRUnZvU3cvTXU2blR2eFlnK1lEa0xqb1BSUlllN0VpdXJSM3FMeXBibTNWTFhmcjdiSFNvclRmcDd4UnhWSDF2MXM0TXlkR3Qyd2IvRU1ZQ0lYZlpKZDFpR1Q0STk1UEtiS1JEWXAxWDU3eWkwbzNkY3MvNlc4SlBBOEIwTWRTV0t3cUlkMVEwWUpUck9odVBBN2ZwR09iYXl1dmY5WE8zVGZBSGlDNWJmc2YzVTJxL05QaFFpUC96K0FQSkdIK0k1S3NRMnZ4aWovK210S2tYWXBCT3ZRVHBMVDIwTnA3Ni9yeEMyR1ArUlBRK3NGbkQwQmFGOE9JY2tTNXNhcWR4bEFhTi9EczU3aTAreTVTaHYzVU1kWXY1V3hmeDY3MjFVZmV1ckNNOWJ1MkRxNW5lSXh2UjJ0N0g5SWRrR3E0ZGx1UGRwN3hpdFgwVG8xWXdNenFCY2VydkpuTnJOOUYveGhmY2kxeTVGNDE1TG5TTXpoN0pjamZ4WTFmdWJjWUp0MVpPL2FPNkdxUmpRay8rUmpzcFlzZzc1cWpsRzFLbXlPRWUyVTMrY0JUYWlaMWFoWURrY2NzM0o2a2lhNkhIaDVITFM0VXRJdnV4OGpmWS9XMk8xcXBJMldHOFVrN25mdGpLSDZidTNWbXY3bjYvOUMzdDRSeWlYbzUwNlhHTDZ2TEh2VjEwYzF1Y0hDYXJ5UUhKWk5qL0lad3Bvb2tEdENBREhSdlhTay9td2VIOXRROStNVGZwdFpGYzhZMXV1aFNSM3ExKzJDQ2I5SWpTV0NuL1dQd1dOSjZNNkVMS0hMbDM4c1hPbXlJS2RzbWp3UDhyQkZaYkwxeXhuNDlOZmVlWVFlN3h2WldEZUluWWE3bG1mMC8xWEVybll4UDRFZUpSTUJmU2FnS2RlZVlDbGhhY0JmbGRXTjRQQzdDczFOU1dGMVNYWWJ1MUIyeXJLQ3dySk55R293QzVTOFlHdm94NEtJZGtOTm5IbldNS0I3UW54Q1p3RzNSelN0K1p5L3YvZ1RNR1hicXdaeHpCRktOcmhyMWllQVBtTDFxRjVUQ1l4NU1LaTJVbXZKNzdFTVVnRld4azM2RzcxOUk3QlA4cjB3YmRlZDBmN2FlK0hISlcxRjI1Zkd0Zng4TGlUbzdobjhaODlmdXhvZTI4WWwyWHV4R3NBKzdjL0F4ekFQRmpJaytwemdnNnAxanZ3ayt4b3ZCNktBcnBPUlpNaGZGWDRVNkkzTnJkVE5DZUhCeDUwSVRsdFhYYmFxdkVMS2l2TDE3S1V1N0p4eGlmYTRmNHdmQitUM1Yvcmd3T2JXV2dUNllSQ1dkSzZud3VDb3NhbEg2d2ZadVcrM0dGYmhFL1Fib3gzd0YvQ0lrUFhQaWNGUG5ReHVGV2RYdi9PZlVhZk5xanpPV1Z2V1VvSjJ2dWRkNE5OYlNNQmE4YWVteWR0TkIrdGVNSnI3VFVSRG0renoxdUlpdXQ5MWNwVWhPa0wvZUluM3U5dDB4MC9vZjJ1RjJlWSs2K2Vyc2xZRkdzSHo5VGloNHJuV01ZNG5oREhVY0IwUUM5Z3pWOGhYUEU2Z296b3NMZkFMVHV4a0o3dENianVMY013SE1qdUJ0SzdyWFZiR3lnZFU2ZkZWa3EzRlVhK3UzSnMyV28rWHNjV21NOXRBd3B5STNYMURLa2tQd1hQQ002OStVNGNRd1ZuZitlK1M2SGYwVU8vaTUvWDM0ZldrYi9zaTNKT0JuRmZqTXRvL25rT0diSlZUSExxTUlLQXYybHhLVG9SeUJyUmVYWDdZOUp6bzJPUFp4RWJPdlRVbmRPOUpZMWE4STdrdHBld1FIbXlkaW8rTVFZZkhSZDZsL0pIVVBMN0JsWHRsTjdqL3FieWNrNlRFU3Zma2RaM1ZRVVJ1Nkc4Z1ZoZ3Q2aE1Md0l4M01nQlNMMmgvb0IrMDMxazIzWW5Dc0tiVWRHOWkvWUd6dmJBTDhTK0J3cURKMER4b0NUNHgzbGh5QTdqV2xRN2RQb3BNZ2p6Z2QvZm1makkxMENXb1FqV1JXR2ZySUlYRlBQZkRrK0lIN3ZYUEZKUW93am1WNTdkbThsS2RxckUwbWhDTDBoeHNQRS9ManpKcTVIWFFhM01DTjJDY05uZXBHRC9aellOaDRLU045cU1mNUxoc2RpakJwRlp2aTZMSzN0SWNpOGpLd1gyVUVydDQzMGZyVUZla1pOanllK0pGbEZOblJ1R1hsTWRJczl0Yi9SKytrK3UzdzNCdUFRUEJkOXNhYS9CNzlpNXZLOUQ0Z1RvSFBFY2VETVQ2ai9pcXgxYzMzK28vWWswUFhSQk5uRmh0SGpSdnd4ZzFRV1l3cTZMN2FUOFBrMzZNSFV2NEg1WDkwbVkrNXhSU2VzTFNZbUYzcDdlVytZUGJpd1A4VWdIZG5ZL3dEK1J6UXZkeWFrWGlIa2pxbml2SWM3MWs3OWVVaTJLdklvcm1MZytub2NDUktWaWVRdTVKYTVEaHhaNGtFUGZHaXQwNTQvSEhHMjBRK3NEZHJQN3Y1Y3BzTmRGQTlVSnFLMXJIQjhCcDZsOFFMaXZ4a2grenAwZUIxaXBGWmR4ckxZUzh6NnozRG0rSDdnSjFMaGdLK3pGZy9NM0xhK1puZ1kwTnVvUFlwcFRnbDZwMmFHb1dzS3lHWUhId3ZTRWQ0REhJc0RtZGhQYTJlTE96WXdPbEJFV3Y3UitURW82aVVPMytzMmdIMWpzSWV2eVR0RjdLK1VnWXA5VlBWemY1OFBsTGRheTlhdnk1ZVR4WWN4NEkyS0krWWR5ajN6a09ZRFphdkorc0ZMOUpWbGFyRXRydXUvK3ltNVVkRWRra213YjdQemVVbTc1VXpZbzNOR3ZKTGRTOEtQSW1UMzJvYWFXZGpuQURHTWNVRGl6MnU5WTBGNzdBV08wdzM4VjIyK2ZRTy81UkQ4QW0vV21kM0w3amZWY1ppN1hiWGlsc3U3OHF3TXRjSTNLaFQ1TTk5V3JYMjNVZ2l2RlBDSTVadnpnYkpUQmh5a0JOWnpmVHJQQ21QUFdQeHg3eHZUbmMzMzlqWlA5ZDh6dThiUVFUOUYraUNKOCs3OWdtdTVTTjhzei9mOFRPS2RmV0J4cHllQmh2ZHNyTTFZdndia05MVkovRDFEZE9IVnVnVjBZMy9vN3owQWJmSjJOcC9IbUE0dTlSS0sySytzR2JrY05NeEIxa012T2FiZ3k2MDZ0ZFJwaGZDQmNlTHZYZDdQN0JuV3R4dnVCTUViN0VlemF2OGo4ZXk5VTZQYlZlUmV5NEY4dFhwT0UvWUJZdjVyOGNmUWcxaFdHSHZKWWtkOTRoZjh4a3c1TC9tQ0xmVjFlbnFZaHl3M09ySnAveUozdFZkWWhwcUJqU3ozT0J0aThYWmhRWXQzZmVVUDljTCt3bDMrSWsrZVRHc2RJZTdoZTcyVjg3KzFsekhvRWsyNlgxMkd5NzFFa1RIUElYeUY5YmtmdktUSE80WVdlNXNKUS9QMjNzZGRZOXdacS9lZDUyUEdOWDlody83ZzNDVjBaaGF2SC96aFpNL2tIdVQxL2hHOWluNEw5UVlQMDR1M0dkS2hTLzhYMFVsc2tzOElOc1FLeVdzdmlmZllqNHAwZTlBTlEyV29IbHc1Ym8xTk83Vk5MOUFHM1hscGN3eDlIQi9IZXRyQk4wYVpZMHlDWlFLcDBhK1Fwd041S3VyZWcxYTJOL1Z5aGg5aEhkbm53N1QwSXcyRndqRnR1Tk1Qak0vUzYvbjRPMFhDdVZnK0wzVnBMTVBsdTlteXRKbmdQWXlkVWMvUGN2blJ2NUI5Z0hTcGVWc0FXclNNSS9wOUZSY0JuZkNXcm5tSjJXa3hjUmczMFdQd2oyUGZhV29Wd21naFl2Nko5d1haTFdCWFFVemwzR2NGY2Fkb3NsSUtKbTluSUsxZEl6N2hmRnJCdEkzUkZ0a2dFRGZEc2RrTFh3N1l0SXdQcUpRNVVmOHdYaW5jRzgzcCtUem1kbkQ1S1ltNXFUSEpaWTNkUkR1NGZMekRzVkNwUmZWNjROK0dYMENzc2Fiamd0MlMyakxPSmZCNVBYTGszdDY1aUw5M2cvTzhPaHZKQnNRcnNjL3lBUG5VRUNNZGhSQ2pLYytiNUZVbE9zVDlMVU5iVTV1SzZ0a2tWM1luUnR0LzZWam5UeEN2OUNGdkJOMmxDZ2pTMnF6WlhFbWtoNi9zR2RxL3lYRzg2dS9lb3UyYkdPTTFYdnB6dWJOODhYaW52UFozazlWaTl4WUowSWVHK3NSSmZMM0dYNVRYd1c0eW4zNk1SVGd2WHBIdGRDa0tMckZUY0x6MjUrSVpCOTg0WnVQVGxKdXNCalNPdEZJR0VFT3Y1eXN3dGpUTjg1aWhzMnRQM3Fheitya1NuZW9pcjdUS3R5cnpIR3MwNUJaQzI1SGpNaDduSmZyUk4vUVRzdTBoM2xieUNlQ0ppN2swMlNtREdNZkpoMmZ4Ym55SE9VOFVWamdQb3hYVS9XVEVWcGN4MzNITXlvL2dSa0x1dHRVV2tsRWVyNS9HK0M3SHJtemxIaDl2WE5DVGtPelVVanVKVnppbWp1bkdiZXNiUit3RU92YjVFejlQTHlIdnFPV0gxdmREM2J2R2dzYk1jZjhIV2U4b2NxOUF0ZyswZEtXNTZMalVoc1prY1I1dEpFQ3VNT1Q1RGljQjlNdVFpUTVBNk44Q25WeUxYUlBKWkNZWENuMW5IRE8zN1FYb2pybE12Z3B6N3hEZndUNGgzazd3dlE3M3ZqbUZ2QTN5RzhTNzkwaUhoRndNV0ZzT3VUS1RXU2VZZ2l4bThsQkVBWGdZa2hOdTIwNkpQaHhZTTJGbG02T1dZeURkcE5SaHFIdzRRVGMyRnFpemlxdUhJQ01UTHNSNXpkd0IrQy9RQkw2amdPbWJ4R0FERVA4TjlsdGczRm5PQS8yaWZyWmUwUWxtaGtYNXg5bTVTeG0wNlIydUVYOU12Yloyb3ZFLzRHMkZFQy9sdU9VVm5iZEpST2ppVG41TDZJV05SYU03QWpFbEM5TS9yR2RKZkYwMExqVVd5M3RFL0JiWVIwanlWczcydHZNMktUcUJua2laQXoxUDhENmljNTZiT3RheEVpOG9lWFZ4ZWE4aHp4bnBYdTFSak8zckttWmU1WjUzM2xRUjB3QzZXMHp1TDkwbmFGOU1lY3UwTmFCeE1zd0xlSDNsSlhxTHBXbkk3MEJqaS8wajRUa0hpT2RYZWRSR0ExOVNmYk5jWjV2SzBjdDRkZmVFN3hUd2xzS0YxdjJRQjRYb05nUmZITkFieWIyYUNhOVRxbXVhS3ZvOTJvZG9XZVlnRWh1TUhRdmZ1NU5iZ0I1TTUwNzh1MFJlRGYzWVNzSzl5MmROZVlxZ0R5Ris0Y2k5azIxMEFqdVJVaGZmMXdQdE5RRjBoTi96bFhjUVhRVFpra2VzSjV0YTZpZjZTVnpITFNhWEF0Ymd0dFdUZzNOS1NsbzFlSWhwNUZXTlNROW9jQXo1ZGRMR05rZTNZcDFuenlwNzRPTWlsMXRHTjdSQlZ3YmRLNnhzZ0I3NEQzMmdtMTdtRTc1SmN2aVB2aEVYdGpIZGlVRnFOK1RDRUhCZFJETVRqSnNkUVJ3UzhrNzF3WEYrd1FOWS9vWDVJTzhZZytCOG5qZ25FY2tFcmFyUnVjaUZZZlM4bUo1TGZob244RTZWamxYUFdjTDVkRVNITG54amdkWTJkU0ZYZXhIWWlOOFNuZDh5cHczemd0eU92YmNaeFZaYlE3cHdtWGNOOXd4aUR0WDl3SHVINHg4elhKTWdlWnNSc2sxTWlHR3c5UUtuTGFuSkFoRGxFN0laWjNyL0dmRkFIM2pPTlBBQmxIdnhySWhLUkh6TVdCZUhPZGZ6Wk90NUtFVFhZL3c2eUxiemgzNk03c0pFN0p3bXM4NkJnSDhmeHl0bE53RytWTVpad0xkc2c2OGRhS0R3d0U5elRCMGN0MCtSWFEyMk9maDYxYjByTDk0MGMxUzRiZVZaa2ZTcHhvMEViYkFJdExVMG1nLzB3WHRVNVZJcG92TDM3NmVYdjM4LzF3TWowR2RTZDJPSHJod2pHL1RreWZxcTFuL2hkUnZNakM3V3EwVGk3NTl2QXlWU25wRWVhQnRIbkhjdng3bUwrRFNpQlZxdnN0WmlrQVVpeERhMlNLN0RHUTc5N1hLR2ViVmpkQUtqalhVU3gxUlB2cUhmdW9OWXgrQnAvalBWR3djbmRUWGwzMlpDNUpza2JwSG9KNWMvOGpnZkcvSE9LbitPNUg1MWxzT3dVK3NUd0hPcFAyRFdMdmN4YndSYTFvUFNaaVcvdGJBK1NPVUN0Zk1MMnlqemY0Ry9VUjBUMHliWTA5aFhNQ3lCMlFNTDZkZ3JhemVSK3pTbWtaSThqTUlYYVE1aGpQaEpGM0tWeE5LZlFPeUxicmZXYzRPZTFld0FlZENFeHArUlRXNGJrMTBwRDlmeDlEMFNScFFHNkIxK2ovcVJzdG9HZGhMSHJveDFBTWZnY2lTemtCNWpsVEs5dTBkeTNVMTh5SnUzZUpYekltcWZDRUg5UGYxSVNmcFVka0UvS0tRTG9yMnk1ZnA5WHNpOXRTS3BzZFhXQzhmVXVqVzdrOFNxaU84R2VQdk41eU9RZnhBYlhCcHdmOHNlWkpVOUpqVFZzckNnNnBDN0FEcmpjTVJaYlkzS1ZUaC9BL3d2dUVhUnlPMTZEdldsZnhEN2t0dGE2Q0creXRpZTlveERlbGRlMDZWNGZXY25TQWRmUUc2Um0yaWhsMmhvcm96K3lkRjFwYlVZemJsZjcwWmZvem5UeCt5eUdRRHB0WGFaVjkvVU02akJSMVdOUnpyQlh4bXIvOG03K3RCSDBoYTVrMjJvbkpmRXJXV2p6N0RjczJmczY0QWNVYVN6ZldXTTNLL3YyVzV5R2pBeGVJRTJJSGdUTjRkZ3h1dGRaWGdJZE54WDUwVVpsREhvNEljb0RHeFRYWGxKZkNCeHZSZHhjOGpIczFZK05zbS9NKzRGLzR2Lyt5RlcvMCsvUisreFNPbit2R3h3Y0NoOVMrai9yV0hlczBUaFJSRUYranpyU3dwdFdWT1F2b3Ryc0s3OFZzTCtGRno3WE9xWjIvSjM4aWhHZTJSRGpWRjNqZTBadE44Q2tsVzFPaHJXLytFWTJQYXplUERCRVYza3BSYWZPYnMzcFYraFhqZGQraEhBYmhvYnRMeWYxc3BkNUlEdXFYN3BHdEpoWEtpaExVOXpSOVpERytjY1hOa3JMa1cydmN0M0s3OVhjZEcvNjRYSktYaFJaT0hQSDBZLytDSDJneC85OU9Vc0gycG5HUnFKV2ZkMk9yVnQyaFB3di9tRFV0ZXNQVGNGdmFtN0xuWGpTSGhSb0w0YmVOdUxJbU0rKzdQdnJQcWhvVEZIZTVjL0lOcEZ1bjNtOFVnZUh0Qi9iei9FTCtxT3lLNXFhNitnVnljYTQ1ODVCUGl1SWpvNkJKYW9STGRwdVBGY3ptMzNpejBhdC9XVEY1RThUTEZYZjk2Y0VQMSs5SlYxWXR0UVIvSm9GUHVEZEc5RnVFSEg1ZHBHdEdITGw5YUlmNnZQYlVNdGJGTjdjM2xsNTVVZHUvVXY4SU1IM3NQcks5OGNwZjR3ZmtYN1lwdGg2L0o5V1lSOU92N1VTMkllYW5aNFhjSjlaTWw1cjlMRWd0NkxoOGc2NjZPcXJOSS9sVVFyM0hZL2VvK3phTG80VHBTWTY0MGhyMTVhei9sdXR0U0JqbVNBTEduSFNMZlBsVlVLdFJQb09kL29DbDdMTDl5MmZsQldXMTZkTDA2VDZCQjVHMzAzTmRWM2wrL09YTDdYdXZnTnA1OXNVNG5lVnhhbnppZkZXQndoV1FIK25NVnd0TGVUT0xObnl2T3lHRUVNVkZsdG84Vkd4M1diaTVMZlJ6OU1EbWhvVWU0WDlaUG9IWi80NDgvOUNpUTJoZTV0NkJoZGlCazljcGV2M1YyYWgvSW9iMEJuNnlXUzVHNXNURk55ZkNMOHpUVmhQRUd3WlMwRmZnVDVZUHJPVCtMQzViczU5akVDVkF6TWlkVCtuV3h6K3RnY3FFOUJMM3RKWHR4cERUMUQ3dXlVR1VlUkt0OUNrMjhDNUJMVXJUeHl6L040K1FXKzRpRGQ0QXY4MmYxTXhwYzFLYkMva1QwVGtIeW4vanJtYm5jcVAxcjdNYnJDL1FzdjE4dysvNlcxTVhybm91b1JodWlLNVBpQjNoUXMyOXdYK0RHUng1SWF1N0srOHVWZThZdjRJdlpqaVd3djdBUGdyYmo0YnBENnJTK1BtN3FHdExGblNLZnlvZGI5aHlnZyt3TjBKYlFmeWtiZFduT0ZVMWRwYUJsU1lyOU9PVFVacmEzNTREaDV0WXAzV1Nuc1YyMWx6YTNpZlc0bmsxUFFucHlrY01KTG9iMFNJbnZsY2UrdkV1SlY4ZnVyMHJMbTA2TjE4dG9UZWRDeGswbnJLMmZweVZMTDRvT2RZM0NoRGJsODhPL2wzSk9HK2x5azc4MjQwaCtLODVDMWpXMTBvbCt3aitBdldKQSszdzJ5ZUdTdnUzdGZncHJKMk4xTWY4VTdXNWJoTlp5YmRSeXZGcnZKVi9TTERjNkxaL3FiWHRFNWhRbHI1eUpibTQxRGtuTUtuS1FYMVRHRXZyUmVwS05ETEpIdUw5dkk3b2NvUkM3ZnkyQ2ZaVHQwaHlxK0Z3UHE3K3h2eWh3Rmp2SjNEK3B4SVQvelMvdlQzZHVnczVEZWdWRW5hckREOTE2aE5ORG1NWFUzZXVkbjZOK1RlK3ZwV1YzbUwrRm5kSDBib1hDTUh2ZzdXQnlxcS9xemhQM0ROc1lBT1hoSnZNZDJyNEJ4cHdxQjZLaGxqS3VLUzVCYURCeS9RUHBzZi9XMU9ZOGl5MmpZaDZMU2c5ODM0RzhqTXEzbXg3bVlENTZMTUp1dXBkZWZtTStPeG95dTh1OHFqd20vUzhZNEpmN1hlRVBsYzFnQVRjVkw3QmRvcEkySDlVYlJZdU5rNUoxSTE5Rk9YOXVqeTRhRmpYcitQYzBHSStVWjUyZ2RvbkxQSzcwYjA5OXFHeWtiN2xLSFkrSkRkZDVWNVNwYlpYUENMNTdMbDVzY1hxTWJpZlBsbHh6L3ZwWVBGbFo3U2NiNFdacTYwUXkweG45TGYvWWhtTkl6a0FmTmMvdjFjOXJkNUZHRDByOVUvaGJYTnVMOW8vcm5GK2JTY3ZsanpNU0tYeFQ1bUJLZEtqQzRyL1Boa3ZlM2J0cjVaQjZqWC9XZUN0ZkIvTFZ5NWV3OTkvR3FZb1JqMFJ6azJxV3VyRy9zaFg2eWVDa2pQcmZvUGNGeWZ5eU9WcFlwaEZZU1o0NnBwYlk1aWQ0M1dXUVBSM3RQVko2TllpVE1CNGZJTkZ1WnNobkZscUVCYk9vaTZlMzlBWXg5V3BwcXl6WmFSRllzMEhPY3U1Wk9XbnUwOTgwK2E3TVQrNys3ZCtQUjNtMVBMMzZqbTJyc1JjcXp1bHB3azVPU0tSczF0bkEvK3FtWDlBQUtGZndRRzYzcklma1VqV2JvYmpnR0YydGxUdGFvUjNTdWVlVlB4dnNPZmhHY005a2d2NzV1NHdQK0gvQWJ5RnRDZGxoSGZaMmV2cUN6TWptRjUzVXB2OFJPWXNhdmFtaG51bkRGbC9DZ3Z2VklyM0ZSeUJ5VHJFWEsvWjlhU3lVWG9mODJHdE1oc3RGNm5iWW0vRSt0QmZ1VUx2bklLeE8vdm0yZkpIYnFZanE4Wmg4SXpET1FhMk1odXA1eDdHOEwzd0NmRGRVM2NBMzlVSVg4RGQ4NFVyODl4bkl4SjRGU0NEUGJzRzc1OGF2NEY4UzkxTmdiYXJVWVdPbW5oejN5ZDJNVFlqVTdsOWRpOE5lWDh3TTh2Znh5M2xmMTA4eVZlKzBGMzAyOW9SRDdnMHQ2WitRNDlrdml2VnFRbVA4Rm5nVEYwUEVLeVA5Z2NtWHJlYTlROXd6eGNqd0h5QitFdUV1Wko5aHlaRDMxSWdIcW85OGk3dVFtOGNHVGNWNEFPOCt4U1BMWk4zN3EwUnlCQXVMUmlkc2VSUTdZZVoxZ1hBaHJMK21oTVNEdWpqN3pBWk5nZ3VNNVEyM3J0a0hHMXNlUGhLRXI5eUtNWVVmMmFvZ3g3R2dPNXR5UURoVGZ6SmNocG92V2ZiQnhqTzBLM2Q5bkQwMGI4R3pPN2RlbStuSk4xZyt1M091Nk9MYUVlTzdBTXZUYzVidHoyNXdpMm15OEswakh3ejdwZUdmL2JFd0g2Y0Z0ZFdYaHU3R3pFbjFySVpuNHVEK0w4K1VleUZDb3U3dkhuaGJ2V2w5dW1lSE1Obkd0TEY1ZktVT09rd2ZXNWhyeGJrSHhvakIvVFpHZWh0YjJ5RGcrb2lOZWIwMDVRZGNSRGNyeE02SEZxWTEwSEtQYkF0eVBHbzlkSEI1WWM4c3lSeHZiMUZUYjRQYmVKdFlSelRwbVN2RFhoTmhMVk1EakpMNnFjaDNxWExqN2pIUlp6ejM1U0hYdWUyVU55V1gwcnRLSHhoLzNGdmpWTC9tUGgyeDNIdDN2MG02bk9CaXFaZll4Tmlya0p1QmN4WVo3czFNa2lvV0djNUhLM0lOSVVEQUdLdVRyWmpRUGRaSG95WGkxRGE3WHBKUTREYW5iaE12UWh0aEticmYxMUpZWEpXN0tSZDVmMUtONW5ybGw5dmZOWjBEMnBIV243bkxCODdVOXJzV1IxclpjMjhlenZIbnlub2JjMC9JN25nczlzZE5NOHd6ZlpQTXNydHRDV0U1NEJjMGQ1OUpsK2I1ZXdzeVI3Zy9pOTdUK292WTU2MTkvTDRTeXdUK09GZlRYYjVMd1haTXczdkNDRTRScGE1RmUzV3VxcjY0aFI2UEJkMVpiTjdYcnF2d1djL0k1cG8xTXhyNnlqL1M1UmFrRDEvbXprZ0IyVFBTK0NnNWpjWVR4UXdybEdlbkhSUGRoc0dMS1BGM0Fjc001WFFURGMxYmJUNFlXa08yb3hVZzJvVHY0NlR6dmlwWFNmQXNtajBtdWJLNFNRL2pLbmwzeDIxTGFXZGhRRHlpMWNDMG41US9DMkRiWGwyY1kzYkpUaVkydVZ6eWh1b05jNkEydTBNWE5NYlhVNHlHR01pRjVKUktPMVpEOGhpdjVCNlJ1cHVFKzB2RVd3WlhjZHZJZUpkQ3dmemk5ZG82MjNEMVJuZWM2VHlFWWxVaS9ISzREcTQxMDlGN3VtR2xaNHdhMVM4eFk0Nmp4dk5idVJwM1N1T1RGSHE3TEhEL1pNVWNubXA5d1ZrTkc4SnRLdmJEbEZrSnBOMmhKWEhodHpYUk1iVHVUZXlkLzBJMUp2UW11NzhPNWtraG5pUlhSQjl5Z09mWE5uMGhOL3N6YktZTnpiQTEvQzdaeVdjdUFjY1pLdjM1eG9QNGI4RjI0UTUza2V5QlpRSGtDL0diakZjSmdIa05kVFVMbTAzWk1aQzh6T1Qxc1RabjhFamk4SG5zaUhkdUdQY044RCtmdE9ZWkd6K0xqZlRpcHpRdGl2NE96dlpWQWhpbDAvVmZPS3k3cGRCMFBydk55SE5PRTlRN1FjMlg5RUxhclNseThDblAyck9ZcjlYRmR5S2xaTnVFN1ovRzkzRW93TmpHcDVRcVZvY29odTJnSmViajlqVXZ5bkViRkordUp0Y1ZjdkpaYkpBeVkvS05Ra1kreFpRQzJmOHpjVzBSN05IZVk0cjhHamdubmkzU3hGczBWR3h0NGYyeGptaW55WW1jWGtCUExlWHcvQTUxVTVnTHNpK3dmSGJtL1U4UndRR1hZZTlRL1RZYVRLL0tLNk15TG1zeG42akdvZm45L2pnVE5yWmdiY1E2NUxmemtxbjlWSTg4cU1wZTZCc2p6RmUzRmd2MWRITHAzQmRMRkxjQndCTHVGNEpiaTU4Y1FheG5GZGwzZk9xdXg0MUtyUGRwN2ZDL3h4Vjd1R0J6NDQ2emltaDFNOWtYWDlwN2N5MXplNzA1TlAvUVNmZWEyOVZaSnY0L2F3bVM5WGlFczNMYXdkK1hlWmprVEJKOEhPN0VhVzdaandQTkxGaG5GZnZmbDNnWmpaeXFVZGxrZmNBMHpnUEdUWE9ac3RxczFqUTF1Yjh1TG5nSjYra3RVNVdGcVJPL0R0dE9WUGVyNHcxRTROVWViR3pIV3M3eVhDdU1mN0E3SWMvZHhQd01TaC9Wd3JLM2xNblcxNHdYRjJqNnpaMmRkSkNjZ1g4YVQ5WlZqMkYxeS8wc2RqbUN4bmVlN2RjK3dDeHZ2K25Lb0ZkYml6QWZaWkxjTWtHNGNFeGx6T05jN212Sk5TTjNWUlQzWkR1azM5a3k0aXVubXltQ3ZaN1lzSFpDOWNNYnJQL3NlOHJUdEVpL2lpa3ovRCtZemtYZU4zQ1J1VGMvMHRhWVlSUDBaWE10dThRR3BReGx4Z0ZkQWVDbVdtZExCSTdRTHVQU1FrMHY5TWhMMGlMa211L0Q1YzN0N3FHZFgvYU9EOG5zR014WEd6eUdtYzE3SEphc3dOOW9QaHVhQjNMcGpldExMZklPTDV6ak9kdCtaREcya1ErVDJBc2NjeVRrMDBSM2dUOVo4N2RGTnVqQmMvb2p1N0dQek1DZFgvVktlM0x0MkJsdmJrREpmRGw4QlM3NkZkYVpydXZQVTBOWU1mbjdrUUQwTjhBTXlEbUREeHhhZklWNjg5dVJlNm02bVZYMHkxQ1dCbkM1cGx1aUllNHd6M21IV3dPSzdkZmVRTjFDOXY4UUxyL3BKY0xUUHgrdFp2Zm1KeGNBdmNSOWxvVm0zTlBxQmEyQmM4S1l6Y21ROWRJZmFkZ3JyektlV3FXMGI5SzQ5Zlc1SjltNkI1TDNJNEt5Ujd4VlozZHFHK2dHMXR3UUhBbkNpNVVOVit6MkVtcjJWYmNROGtsVmxqeU9DUWN2Z3FKYzFJZFg3Y1Q4blpZaGtBZEpITll4VmwyQnNGcENONVIzQyt3MjErUGdjVWcvSDhMZlg2QWZ0NGRRNHBraDN2OFpUenUyRHlwOVFZbVRzYlZFNEcrdmEvaE9iQVhDSnN1dSt5S3AzMTVyRXZ6QU9MWmJ0ci9QMU9yQVNDV1IvUFQ1UTFmMlZQaG94UFBtWTcwQWZCQnR3UlBVVzRON0p5QTRCaklIUWxsdnB1TVJISU8rQXVrRjByelI4RHJLMmR5Ty9oWFN5cFNoMGJSUGREd1lIeGdSY0VOd3JTZTd0TEg0UjNJMXRjSVpIQ3RnSTVtUS9XVTI2a3hYQktEYjB3Z1ovWFJNL2hIbENQT25SL0NrNEY4QVRuVzQraWR2RE9XUGZTWmY0UExvZ2ordisxWUQ0VjMzbWVRL3ZoU2dRbXY1a0RSdU1remxPY0N6b1NvenNiTzcwV1h5M3J0S2dYUG9aR24ybWo5QTh0a3V2MER1Ulg1L21zVi9WbC91M3grWERBdkxQdi9oN1c0NDNOcEhaWjdIQ2t5TVBDblZ1UGR0ek8zcVh0WGd5OXpqTFVOZlczRjVaOC9WeGNncTZFOE02MkN1dlVQblJ5cHBQdWNuS2o5WFR1bTIvTGdwMUZYUXNmaFMvRzNac25kWUg5VlZZcTRuRld5czdzV2EzL0RuSU52TGpjYUtsTnErZi9JRzY5WkllME9PNVBlbnhZVGhaTGZqM1ZkQzJUa0hIbmt1cnlTa00xV1RTc1YrbnJmZFhkZlV1VysySnJQRHZ4cUt3ZURWVVg5Y2RkYTVHMWtxTnJkUGtPRmxwMGJ1aEhLMWt3YXV2WVd6TDFuRnlpa043TmJrVkk2VTVtdVRmeTdrMTFCalY3ZTdrOC9QeGhucm1TdGR6MW1lRy9lNjJ0U2w2RCtpVzk0eUplTjJndDNPSE1kUXVhRW1jMmFiYUJaL2s3TkY2SFhKVzlSeUtXZ3prL1hYRSt0dEliYW1Rb3p0RitFeGtsMzRueE50MEZvZHpEemp6ZkJ5NmFFelk2MDdnRy9INiszeHdtTXpDdHQvMmNtU1BXN04xWVBQbzg2QjRHL3B0ditDZ1h2QnRKbXk4cE1kNXcwbnYvVlhaK20yL1BRYWNpRUY2ejVybVNXKzNvUFQzZ0sxZjdqZXVGZEVCbDZQR3d3YUhDV3NUMHhwNG1lT3c3NHRpaTFMczgybTlONmJjZzM1YUR1RHlremxIQXVjWTA5NWszaitlN3dINi9HTDlNcTV0OFU2dHppU3E3K1hOTmZINkNqQUtvSmVJbmJyeVl1ZlRlc1V6R20ycWE3bmpYdDNJZllZK3JMZkhxUFZZblRURUdZak5qUDFSdVBkYUlxMmN0Zysxc2JCdVV3aDlPWTRjNHdqNWswVDNxT0pSaVpwWmdOZFU4eTlreEdZK244Tk9HVWlaelVQTzdaWmd6b1lRYytkQk5wekdvcEJndjJ4emoxaUtjWUN4L2FIbU9RTjgzN0ttRy9PQThYay9OZmtJT1ZwRWovcHMvbGZPbmZDeUZ2N05kQk9YK2NKWC9EeFRMK210Y0M0RHpkVlhYMG11OEFIWk5WaHU5cmUxM2loUW95NVJUR2FLS2NET0piMml5NTd2Mll6cFhkUVE0NUV5eDVCT2tEOFc1LzVZSEozRjdaWG5aYnVWMWVOUkkxeW5PMU9lbFNUcmtGeVV5NTVuMFNHcWZLL0tNK2FoaTB5cGRMSXFqd3pYTWtmdjBZaklDQ1ZUTm95dXY1bEU3NXVjNW9lVjJOczA1dUFsZWxMbGdXRGZMdFB6Wm45aFo1SHpZM1AyeDB6ZUNkbTdtT0xoc0hYN0ZCTUw1MkhnK251TDlBK3hSU0cwTjJDYk1PL3ZCRHEvQ0d5YzM5T3EycVpQYXpGRlcyeDYveUZZR2pxaTVaTmJDQ0hqWDUrNWZEbVhpOCtuaU85Z25BMTB2d3JibERnSGNJZnVvK3RGV2Y4SU90dE51NGl4bTZyK01oZTAzaW56WkNIVzFCWlNzUFVKTDdGbDRJMjAzeVB1ODlTZVlLeG4ya2VWNU1WQUcza1oweTIyWllCMmRvcFU0cStENzllV2RkNDJqbnRQeHYyWWJhUExPK1pvN3liUU03VEViQ2FZZzRDRnpmUjFQTE8vQVUvczRDVzl0VTlpRUdNRFk0c3d2Mkh6U1hlS1hQa1hMZWdkcE5YdzZFcjdWKzRWanVHbjRDTzQ1QkY3TnpsMkg3L3I5K2JmQ01MWmMxZjlrSi9jblVmblYrUE5Pc2FOYVpCUE4vaExVc2FnbVhNcVkvcWpCcm5EOWhrNmoyVm1PRGNSMDg3NVdpSCtCYjJmU1A3WmNCUmpuTkE0czJmVVgxSHBMaFhlRk5WbGtNeEMvTytseERQRUdDb1NqVVVGNDFrOVBqNDI4THN0a2ZGL2kwMTM3SHd0T0xlazFzNy9zdGY0M3BaN0s2OEFYWHhsbTBMTFl6Qk5RVmNudFVpUU4xWDFwZGtyVEk4YWkrb1ZEL0lVSmlaM1ZjOEduRFpjNTFDZEIwK3gxakZlWGRXZmt0eVhGbUI1QkFydTI0ZG9MclV4ZmhlaDR5YmVCSGg0Tlg3TjluZGw1QWkrdzhOUkRQY0krNXVTc3o2bE9icnZEc1pacnVJTDUrL2s5UlB1RWZ1RkhNK3lmNHFPN2dLTGJjM2dPYnlzcWoydTRZaVN1OXVvNzlmbnlESDMrNW9mcGFrT292bitmVktIZHV2ZDEzSmthbnlBNklaWDcvL0ROT3JKVW9IRzlHVWFaMmptbndyMCs4eHdmdVdzd3Fpc01BUVdUS3dIWS9KZHhMdk9ZNEJKcjJpS1VaZDhCZjZyOGlXWS9oYVgrVllibFhNTkJuUHJrdjdYTHZSaEEvMjUxQlZ3TGxjVnI2cnZ4MStFeC9ENjJwcDFRMCtPalJJMzdOS0g4MkViV2dqOTZkdldrZlIzT3Q3MEVlQnhJOXNBTEdaa0x6eVV2MHArdjBMM3hKWjdiWndiR2UvdGVxM0JhZko2S3k4eWoyMTU4Qk1ZSXZqM3JpRjFydWFYenFVN2Z2KzEvRlN5QndmME56b0xnczNOSTFxcWpYSDZmQS9RWGZMbFhtSHIybjdlSHFYSVJyQ01ZNWwvT3lXMVRRL205Rks2V0ZuR01iWUg5SHgvTG5lWnJCdlovaHVidng2anZMTGUxRTBhWWxkcjJsZUZxMnFxSmJDdlEwVm04N00xa3VNaERIRGZyUmpqYVRXdnY4VHd1dXIvTGZFUzdzenZITlRtQ1R4Zmt5WG9xN2tnMkh5MldPTEkxK3F2Q0ticDJpMHdyaG5wRTFPTHFRSCtJQjhueTFtRlAzWWxIejF6RER1MjJ2SEtsUmROdFZZSEw5SG52dHc3WUh3VXZXTWJ1SWFxN0UwTWRWVEszdWVsMUJlNWt6UFVXM0NYbzVIL3crUkl6bHFjWXh4YXpPUGRwTXpiV1h0SnllOXhQNmdLaDZzcHBnOXhEVnZXTXh2anJqSTR1TWZVVHZUVkV2Y2VnQnFhOTBpQTNET0tSWXg3NkVOZFo2WU1mWWc3NHRwUXNDc3gvbStsYzdWcVBlZldmZ0dZRWJKZU9FWnZ2ZUIxZEtacmovWWhmNTBjd05ibWV6dWI1RjlNVHYzRG1HS244Z3pHOEhBVU9nYU9VYnE4VmQrVHpTVHdUWXdIYUNjeE9sczBCdzV5VGlKaFJHMTBxN1R4MkQ1ZTNSUEI5V1hqOXFFdkh0ZzRCT2svcGNWZWduUWV5T0hZZUltMEFyc1ErMVJhRkRzVGZIR3pUcUNqK1JoMlFtMUxIRGVFL3N1aGpmUjNrcy9PWUFxV0dPTVVIM2pLWUdFeGVUa0I3aGVnRjJOVDNmcW10bmJiL202TVpMeWhnLzRLNThiYUNLOUtheklrR0hteUh0bzQzK3c0R1U1Mml0Z3NBMTNvSDl4RjhuenFKYjNJbm5VVHk0Z3pORDlkRHRFZDI3cjhjVjMzdWQ2U0c4ZlVUL1FkMHAwV3c5SGVTaFk3aUZjTmtFNE50YUIzeFlxL012WmxEZGpnTUZrdFdqZDRlQVpuaG5RNFRpaGNmaFNUT05uUU5xYzdqMWUzZG5NdHFhSkwydlNXRHRDd3IxQVg1UmhTcHNsNlpwbngzQVpjTk8xMFB1ZUg1cnNodW9GVTNiRzZqQlllMmsrdnJlTStwcHkyUlhMVGtYdlptZDV4Zkd4K2xGNjFLK3U5cFVOdzRWSkdkMUdiUUgvbGpScFRYTC9tSEUvNlBPUityV3lqaTJUY2gyM2lXRDd3M3dSallHdTh2cC9MY2N1ZWc0eHBXY1lJWTd4SC9WV3RQMUdDZTZWYVpvajR6UnJqb0w0VWs5ZEJkM3dhRkdOc0kySU1ZS1BiR2hza3ptQk9jbDkreVMxREJmOHQ2S2dnRnpqQ203bU5iZlF5eDlUaVNZVGpDeENMTnlkWGFpeXEzdGhmMSttWS90cVh0YXZIeWF2Q3FmSU5taTU3cXVPN05yK0NSVlE5Tjdwdkxtd2ZhMjdFdWZMaVNxL3Z4M1FwZHI1c1gvREZSczkraDQ5cjBiQ09yNno5bDV4dnc3amU1a2FPV2ZOOXZxTWYvYU8xN3cwOTNtZDM0RGVWZVJha1IzdDV0bXlPS3MyNTZIeEdEdy9XUXdzVDJDKzVseWlEZUZyMW5NUStmbDg4NjFlQmU2cm51RS9LcUlWclQwdHNCNGhaK1VpL2szRjl4SmZyZFcvNGNxcjN2YXlZdnFHNVl3cW5xN3BBNC83OEhNWVI5bEdYWjE3SGFXWmlTL2ZTbm52V0kyZEIvRHlMaFBTRGY2Q2V2WEc5TjJ2S1A5VW5HdWQ4TGFZN1piQ1piK29TRGZPY0c3MmRZMnA3Z2lGYitvTytpRVBiTUc5ZGRmbHVpdXptdXpFSjdxL3JtMSt1by9PVnRWL2pHNS9tN253eUx0MlBtVzFnK2dkZjMwTzJlQU9mVzNCN3BBTzZiYVdHdC9jZzN1b25aOFhnVWV0Znh0dTcvWTdOS0NaWWlLbWIrRDk5NTVoOVAxbnRVZWpKT3U2ZnZMRkR0eUZmYVhJU1RqOXhYMmdkOG9UeFg5d3REeDJqSzdDOCs5S2ZKYWhndzVwNnJzZ1NqMndwSXJjSS9wTkthNzJtTHE4TkhGTXRmQlBueVUwMyt0cm1vYzVwWUJ0MjZpYUx3RFppM0M5RTlNL2ZqWE1NUlIvcHBycWJzTy95b0ljdzRFVGczc0hYOUpEVWpRSGZwY3ZZN2F4T2lHMFJHV3p0bVcxSTY2Vk83UXcxd1BkYjRsMCtYaXR5bnJveXhxTHc1QjRhcDdLMWVkckRBYi9ycXZ5NWhtMVpPNE5iT21VcEEybjkzbDI2VkZrakpQb1hHSHFqQWpBTXdLZlVQT2ZlK3ZZOXk2NWgzajJYR0hjRWEydU94bUo4VTAzMXBtaHZGWWdCeFJzY2k1NytqUDdBWW9qa3RtbW5KQ2ZpQ3U3SGxWcW1qYkMzQjc5UVJqU3MyYnY1N2dkMUZJeTdzV2ZyUXV1MXp4Vk8vdFYzTWpYQzB3b1Q3dHI3YjJFUzFYMmdRMkVQTm53RHJYbkRVZXEyU1ExekdhOThzTTUzZyt4eUhOdlNvQTRSbmIxK3hUYkh2b01GOFp2aVh0VzRKdHMzdUFqeWozZ0xNUEFJNzRDYUo1K1h5ajV1bGhHM3FuNlZGM1VoYTliUGpNK2ttaCtEYTAvMGFvSXRqWFJ2Wkw4T0p6amZqTmFMeStoZEllU0RJVjVvRzlPZElvMWlPK3A4NFc0QUh3RThJeEtEWW5yaTkycnpIaGNxc2k5cG51b2E4VWxjZXdhOURlaStOcDlGTzBTOHR6VmpzTyt2MEpDSiszMUlhNXZwWmNkZzVwZjgxdU4xbXIvVDhoSUo4aHZKUFFzdFBvOWhQaGpUcmFEUHVjWDFlckR6blBwTExBbXRzSTNGM2pXazFJM29YdEwrdHpyYVYxeXZibEJNa2M2ZTFtZVBqUkRYclc2dTBid2VJZDNDa1NxTXdRWi9mS1VIVmxpRzRHdWN0KzNZMjR4U0czRERsS2kwNmVYajNtOVAyRHJ4aTN3dkdrTm00OElMRWV4K1FwKzlRaG5ZbWpibzBKNDNwTDZoN0RsVDlhUEVQVUE1Ukp1T29XZTIyQW1tdGZyaUE4NFJnUjV5azdMK0I5Ry9TM0VsaHhRL1ZGL2pIbEs0RDE1cHUyQS8rTm94VlpCbjQ1bzlxcC9LZmtITS9TRjlQeG1iZGxMMjlLYzFSeVQydnNZNVY5QVhPckNNVHVBd2VRNFhQQXozNWlsOG93dHg4aXM1UHJqdnJLbHVGMS95QmZRM0RmVHhXZTFGMHp2UGFlVkcvUmZPTTFYa0htK2JvNEwyL3luM2JDaHdWbkpNUFQ1Z2JWMjJWbXl2REhCdU1yS1Z2N1A5QytlZC9mY1NTMVAvQWZyUXZOa3VBanBCOU1INGJpdDg5cXUrMjF2WWRJRG43OVI5MXNBVE5LU1RBalpoMExBdlBWby85M3hMSjIrYTcwLzY3aitaTCtnMmpmcmtUTklXaTFzNGtCanpNSzNIQldKa1A2U1djUndnbTdEU2d4L3d0emVOK3pQKys4YnhWTTZDdm9McXdvRWN1M0R2eXRPNzQrNU41d1N4THFQSCtkZm1lSHM4SFB0ZlZMaTFkL24rTjRSSERRQkRlbFQyZ2g3RWh4djUwaUt5TThhUVowSnlZMGllZDZWdjJxbFYxZ2Yya00xYTZ2dy8wZmVHNkFQcnZaVkloVTNlUHk1VTNqRUdPZUlMWXdQcVNxcys0R3hQNTBvMnRDMFQ2VFRIMEUyeXdFcjBsV1ZDbkI1c1FPSTczTGtGMDF0TzFqdWUzR05yUFQ2dGFYZU1EdVFhWGZibHJkV01iSEh2MjdMT01MdW9leGRiZWNsL1JZN3h3OXFaWlhpQTZVRjZnSjU4V2RyWnNsUkFQMkRjLy81a296VWpPMGZ1eFI2SjIxdW1jSENINjJ1MFZQWlZBZm93OVJqNnJDYnF3Vys0NTVONS8rRE9idC96Q25POUM3bEx0cW0ydktLYlk0eXlCdnlYMWZvd045YTMvRE1uaSs4ZGJzZ3hsbDRsL013aUdMWFZsZHNXNHMvc1RZOVg5NTY4dU05L05LajF4a1V5S0hNTUx2WEZSbDI4NVo2eVNoOGh0dEpJREtmemx2WUQrclhyNm5TNlVLVzMyYzExTXozYldPejNxemdtdUZma0VLK2Z6Ulg4UG04RlpkNi9ESDFpWXd0eW55MWtZN1FzUGlTOTk2QVBYclZXWENjZkswT2Z3VXl2ZlkvMG1MM0hMNEt5cHdmcHY0MTBMWXNQYUc3NWxiVjBBbzNvWmJSSHBKMzA5dCtOVVFqZm5lMmhiWEFIZjdqT2tGMXBHWWdIc2ZPQy9zZnNlMDVYZEtYSE1XTHY5OGV5dmZ6UGRMbktqMDF3STI3TXE2cWZQcCtqUmZMcXJidHhKZG5hOTNNY1Q2cFhYZEdOS3IwdTlJWlFROU55a1cxM3RmWk1HTmlRMnpxaSthZWhOK3pqSHRFeXN2ME9qRTVjeFl1VVFialFwVDZ1YjRiL0YrWWxMaG5HbDZCM0dlMGQ1eUU3amRkQmp5YjlwOWUycWVSZWFWOVBMdllIKzRDMEdQSVltWDdjWVBmeWtOTnlxTmIzRy9JcXl4alRZcS93MHNHVGo0QnZBalVNSnJKSHRMMkZjK1lhK0NzVE0yUmpIVGY2STlnelpEL2JLZW10VG52MGc4NUFZbGpCVE8rek9BaWx2Y2JFdWM1NUcyc2pMU3dqajZHbmU3S2dlVVlaeURBYzMyMURicFNzZHh4VEpUZzhUSnl0TVRlZjZiMDY2d1E0VnczcTFqUHNrNERhOXFaNkgzaVgyMGJQYTdFcjYyeC9hclFYTkgrOFBIZVc5bi92V2F0Ymw4ZDZ4ZGlNOTc2cDVKQi9aTVNIc1ZIWmlwL2NQeW9ERlZyYmZrOXNGK3ZuMkNjUE9UUVI1TmhIYmx2Ylh1VUZacFVqL2puL3BKaFVWVTM4M2ZPU0pqaldJZXM3N1AvcW9OOGlXWEdGYitxbnorTFNYNHlEMy9VK1VpL001bWluYm1KbnZxRURyZ0xCU21GNm52VVNSZFpUa21OSmN1cWFlMENnL2I0ZTMvMThyWlhNZVR6K2Y4OWRyKzBEMGtVM2VsYldiMUo3UXVTZ1JncmR2eXIzVkx0REJqK1lOMEI4S1RYZUJXY2l0VXBNbi90bE1lN2xidHFoQS9ISlkvdzc2a0Z1NWhCOHd1K3I1NDhMNm9PODN2ZXB4T2lyWkN2VHM5U2p2NnY4Y0hmcks5Z1AzWS9tY205bEdZZUkrcGh0d09DMlkyVlk1aUNNRmlMd0dkclhHWHlTWGxzL2dCMUs2aUg5eDJSc3l6TFZENi9vaGRnbW4rUmczMEF1UFBoQjgxSXVSajNhS3lSbjl4cnlIVVF1c2d4a0U2cXhGNzJzUExEcjRXeDJkc0doKzRER1NjRVhYZVpVY0trbmZrYkQxL1cxWDZCVE1uZnN4aGxCdjFPazcvU0tKY0ZpdkYvL0szT3hhSC9NOVRnU0RNc2NzZldoeE5ZNTduMWoraCtVbjh6ZUdwQnptRnRsWHdUbE05N0k3TjN2MEdHWnZmMnZEbnUzRHN2b29QOFJmWlo5NXIvNjdGOUNuMlh2NVVQK25RZDRHblBmUnJGcjZMa0YvVDVJWEx6c1VmOWxPNXpVazJCOWl2cjdISE95ZTRUK0dmaytXbHpMb1JuZ1hDbEVreTdPYmFqRnoyelFZYVlsdnVJRGUzU2VRNG5qdkRmeDhPUDltTmYyVm51eXg3WFgrc0VmVHZhTS9WRDVaaUUvdTZLcmNhRXkrZ2FYZXNQSDZLVDhyVVIxbWh2NDBpVE9wREg2clQ4Y1FWOFZxNmo2NVRieThodCtFcmpEaUliRTBRVDN4Y1dZelpVdXdjUTdJUjVZaXpjaU9YRHlUWXc1aHU5MDNIcEk1Mnhyb2NmbnB6RXY0ZnFDZ2tOeURlcnZjTnlWVzFGODdERlBlLzF4N0w1RExINXNWTG1mT082dWszTkM5eHJKUFc3bHluSHNicVo1V1FOc1FNemdidHAyVEVHMkRDNUY0MXprL0JXajBXSm90WlNZMXJpQnpvOTROcUx0cFBwZGYydGo3Rmg0Zml6Q3YvemJyS211L0g1ZWordDNTUndYK0xaKzhnMkNlVTV5ZHFEUEJPNEZHR0pjRE1CZmkwZzlGOVNyMDcxdXFoKzJLa3pMb055TFlVeG9OZzdvKzMrSHpXRVBkWFRXSjErV1ZrN3hzbUx0K3dmdVhPb043TkExNG14NW8xZjFBdDF6L2hndjJscG84VmxVWWliaU83RXI0K095eGlGZDNNUFBCUmM5MGl1NzVENmRWeEwyaUFZZzUyeFk5djBBK1gwMnB3eDBDTU9PdlRXYXczR085d1ZreEl6V1dtdG96eVMxWlJucXh6Z1NaTWd2R0U0Q1M0NFBXaUxsam5GTWJWTU5pQndPV04zRkVpRUhKNGFhbVJKVGsrb0NlRjFRVzVqRXNTdFBmd2VmWFNQNkhadGsvb1hLeVBOSDdCZWtZMnRpYVNldFM2eUNLN1ltcmdOaWRYSmFLLzRvYjlYeHZZcHdIMWVJYmRWc1NPQ3pwS2UySWc4Q2JOTUpqRTBucElDVmpIMFBaUjVLNVlPUmRtVzk3UG40VVJXUCs5MCtnRXRibEtOOWEzL2luRzdvendNTjdpTGdhUnZUNXd0OSttcmV5cTg3dDdJR2xlYlNKSWpmSG9rTXZLU2hNOXMwQkY4RGttUGdNd1RlYzhLMVJCT2s5Lzl1dlFWazVoZnR6cS8xOGtQOEU4NFMwVHFWOVEvTE9Zd1JaazRDMTlSUEJOdndkYmJRWm9BRlZlYmdTTHZsVEtod01pb2JDcDBwZXk4ZW9FL0lONWllWTdKZWlhK0NUNC9VMG1HOGYweXJMQVlIS3hOdzNTaGpYNU9jcmN3MjdKWWk2N2szMUxwbDNsWkZTMmU0SExndkFjSERBdXdwZXpQYXU3TXFya3Q2T0NINmh0eGRpdVhxUVozTTRpRmRIK2M0WCtMSS9zbzlXUlNzdjc4RCtEMnVyQ2UrS01TdUtiU1dNMXFyemZRYXJ0TlA5UzVFTjN3M1ZtUzdjUGxXaFFkT2JTZGpTdTBSa25jMEF2djFKK2lrWmJYNzEzRVEySGZKb1BlQ3ZvLzlJZ3l2a3JUWFd0eGpRL3F2eU1mWUJnd3lFa2MreS91NzZFa0VQVEVBUHhubjZ4cXR4K2xqUVBNM0Y4L0tVRnQ1cjl0QUVmdWR5V3R3Z0g0ZnIvM09SUHp5Zm5IMjhGZnNsejc0YSs2WHZpYjd4VTFPVzhBN1VPY1A2YSswRDlaRDlhNVh4anJaSkhZekJkdXpDemljMSt6T0JlTFh1TmM3MjRQMFVaK1VpbkZwUjNFVlMrcEg4NlMzczJjS3hJMlV0Wm81aHI3emtReVBBTXYraEhIQXovcURpS04zdU11UDRaSmhuVG1CR05mK1REN3lqamxxZ2M1cHhBY1AyeGhremJXK3EvZlQ5a1lMdmNTUE1YNjI5bWp0M2JVeHU5Nk5QRlFkMXhRK2VpNkRldDg1L0Z1ZjRPZUI3L0E2VFVFL1hPdDMrMmZiTkg4V2NudHlWcytwNXNMQlhPN1FPeG43NTF4ZnlhS1pMdkNxT0xyd1ZjMzBmbUF6djNzai9aRHc4d2Y4YjFTM3Q2dThGU2FHZFV2M0pGZ2dPQmNjL0ZtYzE5Wkw3RlpjMzZPdkZSbjZXK2JJTnJkNFl1Y1R6SDZ3MWN2NFVWTVBOckQzTUErcmJNRXVqY05aWXBXTC91dnh1R28yODE1aGJJeFBkWThMbjBNRHY0clYxRTM4ek5heDNVaHl5V2JRTzhCVUNVWW56bGRrN1V2d2s4c1N4aVBHL3AxSDgwZW1iaHVkTzhTaWVhcW5RdHhGcXM5cERQaTlnQzA3UUhNZ05qM3d2d1gwdFlnTGU4SGE5WjFBQXp0Yk95bXlVUG93SEVNSEhFZm9EMTNHRUVhamhkd1BiRmsvMk5CZm9VZHRSSW9OWG1FOS9qWDlOVCtISDRYckdxK2UwN1hlR1RkNmxWTTh1MnQ1aWhQMHZDSlgva2RGcHRqUGo4YWxjYjh0YTdPdTRwSmxMSzNxUncwMWhTSmdPRjNZbVE2dXJjSDRYTVJ2NTdaSjd5NDVETjNvTE81WnhlcVltcFBmSFhPNWlIdmV4T083Y1RhanhZMCtlR3kva1BjSTNibEZ6dlNET2EvWitmVm5WV0pOVFltTmdteGdQU1AyZm5aQk40d05RM0FmRHpCbk0wUjJJYTZoeGZIVGxUS0lwLzhSdjA1dGZyZjU4OWN3R0JCdmh2TURtaWI1RUkvTFRkQlY5QlBGOTdlU1JUQnR4WVBGQm1QRGszNjlvYnRaTS9WYmxZK28zdFB4VXg0QnV2NEMxMHJ0U04rVmEzVDR6dG9GakUyeFp1c2ZXUmx6bWVmMlY3VjdMMzBpTi9qazEvYWhubGYzODNhY2pHd05na0ZYNzlQTTRYNUlOVDlGQVQ2dDJXUDA0TXZxNFhxZVRHMTh5UHNoZlJmUkhyQzhaekhsK3N6YVI2ZGY0Qk5xT2JLZWY0RU9wS1VzNVo1OGpOOGpvV1cxKzgrSzJBL2VrYTMvaXUzWTk5ZitZM3RrYUw5aWozUk4ra3Z1RVdjUDhSNnA4OG16OGpvNVRGNFhuK3EzM2prL3FlcnpPaE1aOTMzQTc3eVFVeGYrUXh3RExHMm1NZ2ZqMHp0OVYxK28yL09vKyt6QWhpbHJLNnYrdDUvZXFWL3FuN2hUaC85LzN6OXg1cFBBNTl4dndNSEdmZHBKdmhMdUs4SEVVYTVnanQ0aHk0QWU0RTRUKy9oVG43TXZTNFhONjYyYXZCMU9yc3laWXNBUUdtVmpzTFN1VGo3dlVkMVV2MUhQZDhQNVQrQnpKUEg1VCtrWGZCRU5HSkdUdWc1TGM4S3dYNmV4bnVSVy9zWmYzT2Zpb0xQVGhjTEZ0YWZ2VlQzVDRsRmM1ZFBTVkZlK2ZBUERhcWgyUFY1dDNjSklBYnlRQjJKcnZpeWRuUFprRDdudVJqZkZQaFVtSjZWTjNpa3luelh2QlpLYmQyUGtUZSt0aHhwcUs5SmpObkVNci9SSkEyWnM0NzFDejNlcHpxTmFwbkIrSnAvVXQxOWdOakExN21oc2pxVXQrcDdjTXZ0L1ZqM3BLWStjYmhlRDNzQnNkWVg1UXA4dkJ0S3JkcVUzRnR3Rkk5NlJmTFVoNE8vcW45UkluMHFjb3Z1d2lYbU1JMnlaOXQ0eHBvSER4NW1MYlRXTTBWVGhqclJ4LytnRndXVllCd3JGTkJucUI5Sy9PdldUUllEbTdHTzlnc2xoMWdyYzk3YVhYT0FSWDhGQTh1VmVadE8rN2xkN1FXTzk2ZnhaSEYvRGVlMUkzbGxJSHhqcU5NZHZqM1ZldmV4ZEEzZzNHdzNtOGtYK2N1RnpIUFBFZHhseEI1ZWY1bGlIZXJtR3M5MHFlNVRya01zVjJsQ3JqT3dLTXJkbVc1THRiWDZDSEFFRFkvZ2dIb3oyblBTTHhiMTVJaEt6a1V1Y29KWmJsSDJERXRvdjFwZDdCNWMvN3UwMnNoRjcwTFA0RGZyYVk4eG4yNUJXRHJWdmNKN3NEdkJpdnhqRHh6SWY4aUZPNHpiZy91eWhUN0hKOUU4M3liNkljTWZRblEwZDZMVjhkVStSVHZvYitJKytmb3ovb09kL0YvOUJZLzhtL21PVS9hQzdDN20zMWtwTXJPNGRPWnNsZmhaVHM0TDc3cnBKR0Z2R3NlVU0xeFFmYmVNYnRPL3dxSXQwTDN1Z3BWNTd4R0hNK3E3b0c5b0dkTTY3Nkd1VXVieTNuNno2eGFSNE9VeG1Md2MxNnJIdnpZRzJEQjN0R2MxOUo3bHhIT0padVNkckVhS3J4bjB4aFRXeW14Ym9mcGxhYk9OOWFLUXBIWi9Sd1pZQlF4MW8xcGQxZEZjaEo4WWJDaG41ZjdoM21xd2ZYTG5YcFQyS3ZJanRTVEM5UnVkdHk5UldUdFdQeEtTNTUweS93aXQ5a2FtZU1tRjc5WkMxYUxVZVFlYzlYczc2L08zUHZ5ZVl5RFN1ODkxUDlNSURYK0drakxNQm54WmJPYTVoRDNJR1Q2TE1ueTk3N1JBc2hVcGZQUE41SkVoV2pyb1hkZ2xaTDdtYlpTN010S3k1Nk5ac2lXdll4OHd6T1A1Z2RGdk9yR2FIRkw1eExPVWUxaGZCeDhsaXl3RWZvUmhDWDhhcjR5OXlWYS9nMUtuTS9EZzA3N3hoM2tCVHBTOXdRTEd4cGp2SW5XMURYdzgwOTBmeGpodjMya2M4SFhvVkl6M2pFZHpTOGx4RnkxQS9iTUFnaDVqZ3llSWxrTzJBa3k2TllsTFhjbWJMang2ZEc4WjZKTDFSenZBZ2E5anY5K3dkdGVtbW5LRHI2TXhreXMrN1U5c2NyU0IrWWZoeGZjNkx3MWZmTTBkOG96M3EvdEozTWRpQVNJZjBUWUxCUjNIOHJ0a3BERVlndWJmeGNqZ3Q2NkZJSDFlMkRncGtLTkk3Y0d6aDZwbjlKUDNvSGNTVHArWm84M21PeVkzZkV4MWdia2lIVDdCeEc5ZXdIR3FGdGRCMy9sVTl0OTVEcXQ2RGNZcjRhZUVZc0E5bHpNeXYramVlbnlPVnUxZlBHWjJsbDBpR3l4ODUxOUJWdDQxendHL2h3OTR4emlmNHVFMzdTM3QzNDNqR1lqaEsvU1RPYk1PUE5STm9udVlJZjRZUDM3VHZuL2JjTHRkVTRnVWkvc210MVZXOTUzRFQybjlOeiswYmU0SXhyNzY3eWJFTC9hUUhkb3JPZndsK3A5YlYvbkozN0VmaEcxM0JhK0Zlem5VZVlYSHFmTks2ZSsyNFYvVzd5M2RuRFgzbHE1cjIrOGRxNkh2OTRKeCtZYS9wVysveFpXblRrQnQ2SEs4V240N2hmb1pkUHFqWmI0MDlHSmcrUlJHbEhiYlg2SzM3LzdWZU9PcG45TlhRWStaT0xMbDZiN1A3eG40TVQrN09NUi9GbEd1NnY1ZTlaajdEbFZNL0haTkwzWFVOWS90U1Z4bHdTTi9MZmFOVncwdWdPTHU0ajJxOHUybC9nVzRkNyt5WkVEc216ckVZOGVmdjlpQnVNT0tSTHFidjJIZU5pa1BnSmpxUDlmVWVFeE81c3FiL1ZVenVwamxkNjZGWlBsdmR0VS81K0g4Q283dnh2WHRiUHNNanUraG5mdW56Y3R1VDZEMkNPbGx1S1k1cWNjc0tPd3hzL0FvWFQ2N3JISDhCdk82bWUzNXdlVTM0aFQxd3JxN2YrM3dlazhkeXdRQUR1ZVQ1ZUk5QnZ3NGRISHZLYlZNTGJWbHFXVGZzUFBTNzM2elBFOHovRzJ1L3dEME5EdSt2bi9Mb0ErTHhnQ2UrcVBrZHJ1UmszTGlQalZpbndMczRMOUd2OG52MVMrUGVLZmZrTDR6OWlkejdWSmI4RWl6VmU4ZjlyQ2ZhcHpwcjBkQzc5S0U1c2ZyUXcvYmYxM3RCTmEzbHQvWmlhdFlIcitNby9VUXM1TTZjeUdxTk9MNS9remV5ZlpqcWRaTXh3Zm5SY1Y3S0YrenZPM3NlQlovNlIrNkloYi9TbU9sTTcwZDNqN2NBakhwRTN6dFN6dzRZd291TDc3V0ZpMzRiWGNQR3VZZVdkY0hpTVVieE9LSDRBNzlxdkx2Nk5EU2RVY3ZsanpHTnJWMDdZMUl2ZGY3czNmNVlpcE5FNDJhLzN6OTdrK2IvSDRnSnd2N3R2c0JEZ0dkQWZpMkpCWHBGRCtLb3pEeHlyeTBBOXZuWXFPL0wrSVp0KzkrNDFzdU5PMHRpVlRyc1pjczIvTzUxSFJCeWpEaFBSaklQZWl1VThUQ2NVNER4cTh1NDZXYzlyU3U3YTd1QUh2bXQ2N0ZSZ3VHaHJxYTViWFJYaU9ac1VSZzRrRGUzeUdleW5ya3lGN3FSY0xETVVlZ2FpTmFVSFpvenlEbGUydUdjTng5eW5TemNLeHBpVHUrUkVMaHRJWFkzNnNrVmhiVXpGRUl2a1hMbGRYcDRuMXZCWk5VSnhyd1crMUZ2NTBPZjVBT3VRNXBiTFV0c2pJR1htT2tXMzh2UDZMOEpRNzNsSlhvODVyblFNVHIwYnNRMDF4TGRFOXp6aEV1WE5OZWdqZWJLclIyUncrdWx1ajUvM0Z0UWMxcjVERzArUm52YWdEMDRLbXpEVDlGbnkxbjM0MzBJZDdQRUFpbC9Kd04rTzhITTBUTVg2VnVHQkhYd3VGYVUydlQ0blF2d2Z5SjdZUlJmOVNFUGVnZmF0MCtScGNKTEpJeHhlR1dNS2c2QmMxVzhKT2JSR1NJYnZwb25rbDFhN0c1QXozNDB0NFBpRlRKNUhRdHl2MWo3cW5kQU5EQTJ5UDZhUXVHWU5tQVhlb20rUWV2ME5tdmF4NWJGdHE3aW9WZHRGWUY5aHVwd2JIeVlHVy9SRU92dnpzREdOOVY0dks3aG53TnRrSjRDNkhPb3pYTE00SHF1S2RyWEpPNFFYZ2Q1Mm9DTmcrdU9hWTB1bms4Qk9QZFhjdzhySFFuZEZYV1A5SUdtZXBJeG9oTWpqeFVwRHQxRWk1ZWk4RXF3S1hMTFhOTys5aUg0TkUwOTlSSmNBMFRsdlZYV1RXT2RBNTJIYlFhay96M0JzcXd3K0M5clUzQjk5YWJxQ1FCbldDQ2I5bTY5YURpS0xHTkNzZW8vemYvekVwMTNUQlhKQmdYUmp0c2VkZWR5bkR2bXRORjN1WUFja3hHdXBTUFAwUnlCUnQzeGk3a3dERjdCVlJ4V3kxQlhFQ2NTYjd6L1YraXV3NS9RVTRkZjFrbHY0aHJvQTNWYXM2VjR2VHMyQ1hiUVVBZ2RjM1NGL3p6WVh3cDBBS1hlWDZxdG4vNC85dDZ0U1Zta1d4ZjlMOS90V3QyVGcxUy9yb2gxSVNpSUpkaWlIRzkyQ0ZRakNtcS9IaEIyN1ArK0kwZG1jckMwdE41aWRzMzVUUzg2dXJ1cWxDUno1RGlQNS9FYzllRHgxczVUekJQbTJ0VWhMeFlxZWpaMkxudUVoSU1ubFg3bmgvZ0RsbW44dDN5dmYvMS8vL3YvL2RkbWtiNzk2Ly84eXhqMCt0cmc5elQ4UGRvZTBsM3lyLy85cjNCeFdQenIvL3pyamQ5SG9XSWhxd29lakpycVc5Y1pNZU9VTUhIRmFqU094ZTVmMDUzL3prckx6UGJYTGZ5NjNtMXpNWmtCR25aYzkvNUtOcEtCTUp5Wmdxc3FjcUVxQTlBV1NGTjZNRFhYN2RET2xIZW9TdEgyOWVhN2Jyd2sySURHa1Z6a2pjN0lPenVIUDlTaGtmaU91QWZMS28xV0MwWE9Rd2xIdHROVVhudWNHYXRTSi9yTFlmOTR5MFhHZzBsTWRBdDdzY3N0bHdIY2VER3prQlhqa3BPL0hpMDlKVXpVdUhkVWgyeFhpbmFtbjRzc1pyV0FUR1owdFl0b3ZvMzhOTno1bTJXa0R2WE1zMHNVcmhyeXRuakZZeTY3OW85azJ2SkZWYkRFNFNuaUtwT0xxK2FBaGxrL200cVoyZEdPYUwxNGloanZIV2dhM29DdXJnQjVKUTBtTUhyV0Y4eCtTdmVJenM1bTZqS2loNjhRWWZhdWV2NnZzeHBLWFpPWnhnZFAxMnJJNHRheno0ZnhSdCsrenNRTWVmYlE2WUc4NFJSNWFTcDZqNXZuRmRCcGJJTCtEVmxocUxEVHU3QjlWWE10TXBESERwMDJQOUIrcFg2MmZYVVZqTVFaY04yOU45M0JPakRER21HYXJLWW9Edmc4b3c4aW5sS0RvQWo3bmNhUTBtWGlLd3htbXN2TEtBVFdJRVhibFpxTEl4UVJBaVBLQUorWEZHMy9mbDBuQjR4aUxSL0QvdmJ2MTFna3FPZndmUVdlSXRMWkFLYjJqTVRyM1hndnpNS3k5SlVzc3RtUlBCOVlvc2xZaEIyR3VTSUgxOTVCak56ZTl0V2kzV3cyZEdpVlhoNTRVaGVmcVUyM04zVkVBMUczUTd1dXEweDhoZHhDT2lZNnIxTFNuWHUyR2RudnNoVkMrQ3JwN3pxYVgyZGk3Tm5uVTVnTGYwblI3aStUc3hKVlBsenN4NW5JTXNtV0lQbWNDY1ZDb2xrUzJHZjhjNnU3bzJjMHp0ZlZCRU81RDkxVjJFQ0NROCtGczdXUTUwLzNmNHBsOXhYMkV6TmRuWHpGZk1YUFJwSDVoMmRGWkliYzdlRUlSYVFjSUJsQWRIZDFyMDgraXF4VDNCV0Q5SlRQNmJ0NkZFbTlKYXd6UlhxdWU2K2N1QU9QZE8vWmN1SE42bWVCNVRxMGhYSnZuTm15WmxuaDk4ZUFpMmlrZ3U4Ny9KejlxLzY1eis1cG9JUzVTMWo4N3UwcCtWdDAvalBEUE10VFM1ZEpWM0dveW9mK2JDRFBMSm1KeGpPMlhBK1ZkNGNGOWh6Lzhycys5WjZPaUR6enRUZjdzYXZZWTlrRFJDV0tjWEw1QmlMQTBjbEFiNjNVQWJ2eitCRkZYaVpUc1RwQmVPNlN1OHFXOXc3TEJhQU13L1JET0F4UFNKZkNIZU5rZ1dUTERnczdoQ3dDc2N2a1hNbjNLNEIwRi91S2VTSjZyK3AwcFJNWTczWGplNzlCNlVWRVQ3OUkwZlk4amtVRjJiODUwYVczZkFwQVZPSEtxZU1qb08zem94MUdSTTNxekNGVTNsSFV1UE9ndXNBbW9iS2tMSmJvWGYybWJFYXJoc3paV05lK2tvZ1ZkNG1NRWwreGxnRkVDU2hxUERRK3Y3QUZ0RDk3WDJMSmZWbFQxczBreEtodXI5b01NMDJocUg1QkVHQ2FUQjhKUnVubERKWm02RUpsdVF3bE1hZm9vT3B3bHdUcGo0T25kSGtmS2svbUhteitUT1NCVVhZWUxxR2JUdm54SXNXOVNKVjZhSS85R1YyZnpHeFZydFFsQjNJV096aHowcUdnRG01TUNrYUFnaFZwZUlKdGpkYUR2TzAzdThzR3NUaVlKMW9kM2JnK3JRMlZ0bmNNWlVTSCtLbkZYMFRZcitnNWFuOXdWQWZuVTRQNWxrejRYbU5wQ1hKeEhUb2praEVIUkI1MEZrZVBzMDVoYXVYMS9iQStlLzRYR1FESThzN3E2OEpNeFNGRzUxMURGaGNtMC9GNkY4NzBWVm9qWDgya1o4clU3MlRBZFEvZVRGd3ZiQy8xbkJGa0Z6RnlyNVdodTQ0enNPOXNIRXczaGNNdzhhaTlIQnE4bnhPZFBkVDJ3SVRDNmZuQ0hsRjB6Tm5DWnRGYWRaL1RFM1JuRmc2d3ljSTZaMnYwNzZDeXY5S29vVlBSUGIvaUg2cllmaEtmTWhZTGoyUnZJUU1tSDNTaVd6RHlHMFpqYTM2RytMUmp1NUs5cTg5cXhpejV3bWJaZ044ZWtRODY1dXA2a1dYOG5IM25lN3pPT3RIVW9VakE0cFVvN2xLSExhTnFqU0FETzM4RENMOU16V2U3ZFFlUnJrc0FaWmkzOGlDRnpFSjF4cmhpRytPdWU4eXNXL2tpRC9zenBjMEE5TWlLV1FuV0hPU2RWeWxHTnVOZE5lZFZTckFObTFhc3lmVHVKTlRmVkFmbDlGenBpNkoxM3JGek83Z3JlWmNOMEg2eXhPN2xlaTNyVzJjN0FSMTBjRk1yOWZsUmdtU0ErR0ZvUGJ0eExLSVlxMEMrQldZSHJMMEw3aFE3a1dwRU9RM25LUlpEV01PUjNqbEF0aEhkaDZHM0M3aUVhZm8yWWFIS0I0citkSHl6NVFQU2srTzQyL3ladE40REM5Rnd4R0pFSG1EenZJTFVSWDBWbzVoRXQySUtmZXZ6QVpraXdici9ydTNzN1NKWDZlSHp6TVdwenhtRGhhUG5vU1BDYzZjYmErMXhGaU5GdTRuUEd3bXRhc0Y1M3E3Y1JCVVRweG1GWExMM0pScFBqSWovblFBcTJzSjJLMFFjUEozUUo5a3lwR3MzaExVRnNtd29qdlE1SVJuM2RnbE1yaWhvejhOVENFam43SElCMWZvcFJqNnFFTGpRblVyQ1ZGNkZPQk8ySk1nZWxLM1E5N2dvV2poNkVkcG1wQmJCV1Z1RkRWL2Q0eEptTWJUaWNhcWYvQm4xdCtoZDZPNENYa2ZuZWRLTFFhNlh2aVVMWFhRTEZBUFMrNUlEUzh2Qmd3NUJxMUFISlN2V3E1UTh4c3lLS3pUQTZJcjg1K2IzVlN4YmU4eityU2ZoRU92SFM5USszN1lBYVNlb1RacTR1R09LWmdkUlBPejV2RW1lQ1htSWkrZGRZZnJCZHdEOVRiNndnYm0yUWpKeTlIdHJ1Y2xnNlVxZDE2bDl4bWdDanJFTG9VcWJnZndnWHdIRi83UWFZQ0ovd0xiUVhXS0RYUHd6d095K3B5RE84TjlpZHBLRU1tOVVHVmYyNUtjSkExbHlmcFRRcWNMUHJIdHVkNDhMZUZaOVh6dlJsSFNWaE5JN1ZvNXlyMnFkQWJyUENidFE2ZWJqdEQ3aGNLWmRjTWZTbDU0emNkQjQzMUUwam50eDlYczJhNXhaTEJZTHBjdENqb2d5bVlMZHdsWHVTNFNUMG1hRER3aytieEk2TlJZM3U5cXpWNG5vVXdWeU9LdFF5U0lQV0NYSzl6clE5N3I0dmdOa1FtZDRyY0M0VTN2VzJPNEtyczN1VllrOU5qK25SNjlURXI5Y3lhRVFXeHM0Zk1tZW5FRTFDdjkvVVU1Q1I5dFhjemhDZnNzcGhDazhrcGZibElqaDFPOURkMjRMWFFOWDJGVkNSVWEyOFc5WHVxYS9SM3VmQThRLzJuMkVtWnI1SVBLNVVlRno1d1Q1Y1I1a2tNdDdsQ0paOC9rUXl4OWgwU0dWcEh1NkFzVkNCK1IzcS9JK0c2OEczSGdsZjZUWG1ua203cjN0Y05QenlZMXhoOE9ZMGJlQWlHUWpYMW80ZUpLV2FYUDMvRnFpVVhsTWtQZTJZWnJrSVNBQUVyYm9PbXNiYnl6RG9WVzh6c1MxNitoYk4rMHVnM1NLNHNjcTMyQlBYOGRJTDhhaXIwbWRYTXM3V2ROUCtGSkd2VTk4K2IzUEJVZmZucTYwdmxwb1VvVWtoYzRVNUYyQlNSamtZK1BxV1g4QVNNZTRvME00aFlEa2JoMFhUb1Q4N3RVQzVENU0zRTA1YlUvc1g2TWJIWDBmSUZMNXVIcDhSUEdFWGVrb0ZtSkRSV2VETkl2R001YjEwNlF6ZHZTVHl4MlNVT3FkUW9YTnhoeDVONGZLT2M3K1l4U1M3bXFSNHdvRU9uTkFON0xQY0JiMGMrWDk0SHJJWGhVTDIwaXVWcldhSGJRd3FVdFIycERkSmQ4TmVobnl6NDVPdjZmdzB5UUxGSXVoTVlITnZmZk5xWHo3U25mekQ1d3hybmltNW9GMmwxTldjNHpvWHVrR25CK3B1dktNZ1RCSHZnTzFhOVBMSEdLMGZaMUNYbGMrcXZKQkxsR1JCc2JFWkIrdWp4d0NMdGxBaDBQRmNMUDJOOXJ1WXNLNDFrbHkwUUZZUXpTaVBpUDRuTDFkNDF3bktBYXY3RFNKOFp0MWdLRFk0dmhaNnRWUmZRNmVJaFRqVk40SHluSTV2dElkRHd6NnVOTDhvaXJOOS9PYzVSSllMV1p3cmtlYUI4UDdMVHRtTG1wNkxzcnpnVW83ME9ZbWswVldBd0drOHlxdHkvMjRJYmRJbnlEZk9EemlmQWl1RWJ6TE9lWGlYa2Myd2pGV2l5L1ZzYnF4cjNUak1TZkhHamZnSi8xazVkcHlvcStzeExNMXhyV25uRGZYWTczdnhkcDh6ZXR6TWRiNzBkbGRlYkhMbVNlYTV4NXpNaC9rM2IxZVoyeXdNMzY4U1phK25lMSs0VXdaMXhsdFBNZkFTSDIxTTRWMzdaUHVuQjdPeWFoU1dibHMvUHlpV2s1elF2WG5IZDNVWXR5WmNLWDJoTjdwQ2xPVEE1MDZLODhaTVpOWVhBWnA1OFYxd21LU3lpdC92bk50aVhWdGVlbU9yZWdGL1p2K00wRnl2akYyWGdxTW1jbVlyWDQzdHRDL293UDhmL241NnZlMkhKWHZYK3RRalQzSHVDckxhRDFYbUJvUFZUYy9XN0VVOXJjbGNsYUwrNU9SYzZzUXJxTHlyR3ErOHlnSmxjSHhTa2ZtTWtUMi9CcExDeWNjYVg1bGJDZHJYekVQNWZSVmZ4dU5DbzNUK3IzTnhSMXRUTi9PYWdqamMxeHJsZXExVm9Kb1hYakkxbEJFYTg1S1F6dUxRaFR2eDZLQTRnMC90U0N2aEhNT2RmUXJRS3V1TTBPODYwNEpjakVPSGNqbkgwYzgrQkpIelBBcWJsM0hTMVNGWmYyaHNRdVU4MjMwc28yRzgyUTMvcFoyL1NGL0VtS3lKbU1yaXB1a0JydUlWQ0t3WHlCSlRHbHNuUGxjUXRmNURqbnRDaHRRaVZZN2x2RDdvampJNWJwNUFINzNXYmp3NDJrdWFRVXh0QzMvaEE1RnpyekJpQVBJbUR1S21HZFpJNDE4SGpOSUt0MFRScUlUMFRsQ0xkZ2Zlc2t0RnBmMzZ3OExWYlptYzZuektpWG9lME8wQjBmUHB1eXdFQ2ZoODcvaUI5UDhCdFovbjJOaWRIdTdYMk5GN0cxZkFYa1YwRk1Ka3B6TndIU0FieWRGd0ZXTWxSKy9POG5uWWFidDJKdVZkZkRFa3pxUlVkcEVjaGRzV1ZDVjVUSk16ZWl6Ny9xblE2YWJsUkViU3VJUitXc1hVMXFGNTB6MzFDYVNEbEFVUjhQZmx2VUNMS05vcll4ckh4S29rYVlQc3FBMmJJVWVxVU52R2FTQXF0Nm9CNUp1c3dxNUZlUXR6TEdjb3IxRmRyNWswTUE1RnVRakZGdGNpeHVDVFh4dG5PMEsyYmVHRDRSdFhiVyt5bllSdGt0Z2tZS3BjTE8wRFRmdEhmb25GL3VFbGJseDd2UDFXYXIvM1Zmc1M4RHBXODltazBuY2kydlBpQjlaaDJHZXBkY21TOWJ1NG5OZnNSdVYzQ0Y3dDRGOXUxeVg2Ry9XSmZKNFl5OWpySS9jRkRvNFY3NGk0NXdEMURBNnRQNWNvcW1TT3Qxd3lwZ3ZVclNMWEVXRXZJQ1VYc1M5Y1cyLzU4VEhxZW0zU1dVenk3c3lpZkhVZlNVUHpmdGZmUWI5bzBWVG5CKzZZRW8rUytOWTFIMStoTzFGMnMxOXdwcmY3QUxUOXo1dnJjZHBlUEs1a1BxL0YzRU5tNEIvbXBwbG5kZm5nME9vL0RqVnp2ZnlUSkIrZkszVzJWdXBBN3huTThaczVEVzBXZWVzNTdRdlNtYksraGplbCtaMFVocitCQjJUZDYvNEpZQlcrYUpLbzFHbGc5UnJhMGhjWjdSZjJGYXVEc3ZlcXVKQ1ZvZ2VFRFkrMTkzNGlrbjg3ZmQzQXBBSjV0dElYZGYyUDlwZVBCZll2eWhMWHJPdkNjZlhXUDhTVm14UEVyZWVNMHJHRWNtSnY5YzNMNkV6K29WWTZ0Zmw2Zk02WkFjZDJmOUY3dXFmQWZMZkZSUWo0MDdtbVMya1FTb1g0WERFdXJ5QjF2cjV1L3lyT25uUWtQRkg5TjdKNWRiZnRaY20xSW12K0g0WE52emt4ZUlCNnh5c1YrbzU5d1lUUVNYenFjOWJSNisvald5bTd2ZGRza2lNbWoxTExUSUtmS0REa2lCZUl4OWFMUE5mMkNlaHFKa1FRN2ljZFhTZDBjN1BJWTVBdmozT2tjN0VJbERPdTFCaXVZVnQ4ZXJBbUpoVnpNR1Qramp1TXhwYU1mTGIxZUVPR1BLbTBLY0QvVWNybngrdGcveGp2N3pPdG9GOTVIQzdzTXM4VW0zNjR2SHZiN0EwWFh4L3hjUWVMdDltdEpiUlBmckROWTJaNERtMU9PTm5zeitMVHZFaVg2cWFMRUdmcjlWRmtFLzRrYS81bm5sRDZWVjFHRVZJUEp3ZnI3TlkxanZsVWJ3QWNSV2MxMlhPS3UwZGNkOVZBM2xQOUJSMkYvQTYrS01XWjhVTEZJTkEzUXpYWnQvbmN0aUxqbnhxY3pxUkpuVnlmYmFuT2Q2N05UZU1IZ0ExTjh4SWJuY2l6eGJXZ2RMZDRacjhFazhWZzE5ZlRVZDRzNGFQQzNITHdqWndMd0VmSm02NlBQbmM0VjJ0d0pVdSsrcThCUEt6cVZreWNvZTQ3aCs3OXJSKzNxU3ZhcFFRVnYyS0RZZjYyUlNaT05yKy9acFE1bDVyR1E3aFhxQzdWQ0dIS1NPaDNpdUovSENrVXpTcFUyaXpUamFPdDM5TDBRNVFGYS8wV2h3dWVuTjJmdHpMeGl1VkhjZmJDSkJOYzVJVEovWDFwbjdwbmNlckFmT2FaL2k4WWhFbWNXd2VyeG5YYTYwdjFUUHdsTllQUnArcjU3S09sSXNxMU5BYi9RcTFXSnIyZVF6ZzdBcHBQV2llSy9HcDN2ZVZWdjFXdE0reEtVTS9taXozZUhvbkNmZ3B4SmpBTmkyUi9oRE9qS3pCZVQ2T3hSR3BrMS9XdStFT2gwNHZja2tmaHFvMDgyUWtWbDlqdlpQVThnaWR5TGU3UlNpSks5ZlJreURQNEM1Nzlqa2RPeVVyT2VUcEZqYlM4eURuUkc2NnJNZEZSeklCU1hWdWpXV3ExaDhxTmZhajhEazJvVFZ6UUtGU3pzbWJKSjZDVk45aVZoamFqeDV1b1MrSjFHUnhyMlNISUlycWpPZUloWXJzNlV4Y2tkNkJkY1VPbGF5aHQ1czNhcjFRZ0JZQ0tHcnFFTjB4b2VwWHFkMjdrdlZjNmFaZUxKWW9uTkMzUVQ2RGRMZWZpNlFYQTk3dEovVEtyQVpIZFRDQWUxdjFvV1FSNkxDY01Bcmo2U2FZWDBCK2RhZ2tLV2ErTituM0V1WUtRUEdvVDdoVjlXbXdrYU9ENjB6SkhxSTlBNWtnZWdpejlVTU1rSkw4RGM1YkFCSkw2SUIvMFR4Ymh6Qm1FdjF4Y2U1TG42SURLVllIcHZweVV2OVQwUDNZSTN1NUM0ZmFVVnFwVkM0ZTFMZEVYbXExYUxnampnNjlwRWorOGZzc2hXWmRLcXZ1RWM1YjRCd2g2VnU1Mk51anROS09xdXd0ZlNWWjAxNHlPT2NCeTJMN0pXeWdqcGZpOTNsM3J6ZUUyVTBoazFiMW1ublZlMzZVVmxNc0F3cTZXMVh2TDkwbmpCNU9kWXN1TmxoSGhtVENVNnJKTk83dllEeW5GMmxrdmdXZHQ4c3RTLzFpWGRGTGM4ZGk2SHVHMUk3bTcrdlZRVjR5RUNMNVhNSEU0akRjSWJrRkZoMGU1STMwWGpIUmxCbFFYeE9ZT2lnakZ1bEJwREZZN2J2d3ZRczRqQ1pOMTA3eXU5UmU4WjQ5MnZwYzkrZTFQa1hzRHlGOXNVUys1VkZWS0NxTldadENSM0tFbi9Ncnp5QytDSW9sOThSUFpoYU9sd1RaRHVuZXNwY0N2ME8zQ0xnRWVrcEtXWlVQY0dmR2RqbG5jZ0labEtDL2J1bHhWdjVScmZQeWI4Y2MwdVBUZzIvTFI5Y09rYStNYzcrek1nWTRRZjRRL0U3OTVBOHRFdS9pSG40eUVib2VSOXRYKzBvdkRKbEV4TXhpd0REbkhrcW1TZG5RelB5ZERxanJMNUtmVFpiWTN0VFhDVDJKeUNZd3RUbWR5MXpzc3ZMekJJZWVTNUNEbjhuTXkrOXE5Q3hSTmtQUWtjSEdTdEM3bVFxZThGVVY2eGp3MU9lWG1TdnJndDRPbngvbG5xMHp5QmN1KzY3aG5za1VkYlZraGhxWE5XRThrMkE0b3h6RkpoYXVZZFI3VzEvSVhOYXhaT0ZjSjlOSkxJNzhEZFk1NmhCUERVN2lYcXhHT01lTS9XZ1o1ejRiZmJLTlBoVGk2dzJxdkE2SzdSeUQ5MnpycVBaN1I2MFlIRFV5WTZITk92bDRoV2ZDeWpvTDVKYkRCT1l3WWpFSk5pTVVzK1BwWXB3UHByRTVJTXY3M0RtUjFsWWVwTjE4RW91V09RaG5VOU9RMVlFbnpzeXpiUFMzVlMvVnJCZi9XZno0anorTEh4ZCtvQXIrek1JVzBMbnRVQXdhOEdMaTVzS3FoZ0R6b2c2U0kvYXJwaFFWKzBXVjFIZ1NOeGhSZDc0TmVockpMbzJiQjU2RGJFRUd0WTBGc3V2NERQbkZjRTEwZFhKVTVRUHhTWklpNEsza3czNEQ4REc2dFArWitvMW5yWEFaWUhuZElEOEE2Uk5BVGRxSDRLZkRXUWxsL3h6cC9Yb2JManR2RGRTZTdtSGhHRFgwRzVFZzlKVW9vRFJteFo5RnNSYjFRZXR4UG1ZUmhmNWYwRzhsQXcvSUpzVFRKRmNBczVGWUp5QWZXK1hHS3pHaU5RMWNBNERlV2RwRHVFUDY1RzJHMGZOb1BvSEVGOGUzV2t5QjRqeHlWbnZvZ3lZeVBvbFJURzZ0eG1tTm1iUy9SZkVkbGdGNmgrZmJTSTNWRjhwR1N0QlNEajZ5V1pDYjcxR2JmdlNCTlZIWTRMNTVmUlhDQkQyT1R4b01xUDB0bVZqR3RzdFB1NWpWYVlqMnlrZ2E5MWtXVDU0a3pqMWJad09NQUY2UE8wbXRDdWR1c0c3LzhPOHhJeVNnZlNSd2YvMDZRaDNSZjlkbVdmeFVQbmlPbnJuQVlDY1haSVlzRDIyZG9YWVY5OThlMWo2bnM5Q0hUUEpCVFRuK01vcEQ0cWNlOHNFVHpJNHJyRjFudEVacnJmbWZCL3BlcjdOR2plWWlyeWRuQzZ1TXdWL1VvWHVXSUM4MGZWRUhOUlNHNmE1QzVvTjhIL1oxSi9IN3Zub3A3cFY3V3RaMjN1ZW9ha2gvd29mZmRlOVpLdFJwcDRlZ1JBUmNYOHNabG5zMmdaaVBNRm9xMXZwWHZtUHNOUGRzdk5MT3RBYi93ZXd5MkpTQTFRbWJUSWZNSXpPTkNmQmd1ZGhFYjhrMitvL2xXNUwrRml3WFB3Ky9jYit6ek8vTTcybFl6WU9ydVZqdm9ZSmVaWnczU0ZCc1VjbmdrTXdHS3BDZnhQNUUxYk1JTTFLdHo0dmpXYmsrdG9rMERxem1xdnlOZFVEZmdYME9DL0kzTnE4bnlQNWpINmVzUmFBenI4OGJGNTdOUWcrZHo0ODJJTnZRdzkzTHg2dEJObDcxWHFWNEc5bTV4azc2MCtKTC9XcTh5UHBLZHRMbkVhUGw2OGdpVEJxcXNrdkNvWkc0WEhRaS9iR2xyenEySVo3ZmVEQmJEY2pLYUQxL0d4dEFucW1mMTkrdlgwUGRXZmtjb09ja1YzSW9CeTN1Q09QVjREaU9oZmZ2TlZlUDJyeDMxSHJiLy91STNMRlB1YnNuZCtlbTNBVkNTM0xIVDJaMXVjTitMZkVEU083V3pjWXJqVUhQZjQxRlh5MU1UaS9rTnZKdnJMNEt6cTh6VVhlUjM2bFVLTkM0MTN0VTVvVm9IcEt5V3RIY0srVFdiSGtOTm92WHdFZHgwMis3RDJkTjZtVGp1SE44LzFtbVBNUEg3Z1A3dkE5Mzc4T2d1Zy96WHRiT2ZWaG5tclNPekdwZWVkdWNLNFRhSnFkSm5VS1hPbWVNbitDeGRPYWU5akMveHRzR1F1S24rKzF4RGkvM1p0MGJ1aFhGZDUzak9MMGhoek8wdHYvN29PN2xuckoyVjliVW1xeVo1NVpramRWbTYyaTZzUTZCVk1iMnVBZFpxbUsxYjVXeDJZY3lsajh1WS94VHh1N0ttRVpsak5QNldxY1ZHVnYxaW9uMFRzYXFQSUFzaXRaQVY3OVZ4dUlQWmF4NFZNYTRwdzk1VDhieW1nK0paRXhvVGNhUUhvTzVsM2V6MUZmbUk4c1owWmxuNDlsRHYxYW5LTm02U0h4ZnJYZkt0TFJlUnBmV2taRW1IVlZPeExrSmlNRkhxSlZrMjlmWGVLZUVGQ09wbkhQYi92MDFORGZJelMrRDFEemQ5ZzIxRDJJcDllRllpbnY2amcvY2cwSHRIZ1JzUzNMRjY3TjFaUExKMGMwdi9VYkE5VGhpZGdpYUo3T0s3OU83NnNmK1kveTQvOGcvOWU0OWVTdWFlbmRkdENSdmdwWTNZaFVjbDh3NldmV3NLR3ZwV1IySWkzajBlWDFMVVlqSk9RRXlzc2ZwK1RoTlRraldBYmRCOXBhRVRYUGdZK1RteUVqUHU2RDNiVG8yL3poZnBUMnNZenRQbWI4bjgweEQ1dWU5bG16M0lFTzJlMjRuaFp1TDZjSlpsdXl5VjJZNnkzb3A0RHFrRmdOeXFSd1N6ODVJRDFBVGk4RG5SV0JKUUg4UC9aZ1VaNGpyZkY5T0tmOHdwOFE4bWxNU25qSjdUMmJacHA2TytMWjBwNTVqL3hpdkY2UG53K2Rpd2toYTloYWZUWW9CWmxaOUxNZm1qTjR0OUhCY2EvMCtuMkw2b1U4QmR1bEJuK0xsS2F2M1pKVnI2bGV6TGYzS0l2MktzV25GZTJ3cnBGK2hpYlgzWFhwU24zMm9KN2tIOVdUM0tYcDNSRytOM0NSYUN1SW5jNnVkVWxDeFpsOW5vb1hXN1NIeEdhNmp3TEdXUHJSc1d1c0xsM01acHQyZEIyMlI2d09NZ21Bb3JtOFJQMnZRSGN6em02cFBlRmowbnBIN1hkR2JscUxYMFZaNks2STM2YXZGSzNUd1RKSEluVWpYTEhUVHZ6bjZLbFRPZ0l6cGNqSkwzODF6UmpzM0Z5bWlINTNDb2R5WEdlV3VocTRkUnl0NVpZSzh0OFZyMTNiZlpha25IMnBLMk9QN1ZocUYvVTlOK1lHNG9xQy9waW5kcy80eHVPQ2o0c3BwYzVjSFRVbG9wbWl4L2hLby92c2NRZmUySTRpQ21VZTBJZjlzUnJvdlgxVXpFaVN6aDZOVFNCcjhnOVFpWU5yUUhJd0JWRG1EZFFIME9vRW1ZYjBQVGNKNFFFUVdsNkd5TklHaWNXQjFYRnRudmtkK3RJL1VVL25PajhuUDA1emVsNTlCWFg0U2ZGYTRpWFZod3hEbE9yUnBZM0V2RzYrbTUvR3FSMEc1YWdCbDRqSjBqQzB5ZVhqQUJvT2hmVU9pajhySWpVU2ZoaHZUSGpOeHo4YTArekpVTnFhWkZZWFkyTE9OcFRxUTJWRHBGaTRuQThqemQra1RPTy9aVFh0MDFoNU5UUERQeHF6SDVLRXFydW56WGt2Rk5UT0Q0bHBxbllJVUVtZXFPUmcwd0tZSjdTdmFTd0F3b2NQRkJwY3djMTZFNW51ZkF4RHc3MGxTRUZuN3dMYkIzajBpaDg5bWg3dHkyR2gyME9lRGxoSms1bG5IRFlJSG4vZG93MnhlRVNUVmlCYUFTQXIydnZnKzNUZjRXUGZGait1K1o2SDNyc3dWVFpscnEySEZyQnBXNmdSV0pmZ2sxb1V3UERRVE9kY1o3YUQ1WnZwdC9sZitzZi8xWUtHVmZ4WmFINUM1UnFGVjc3c3ROWFZOT2R6VVJRYStLWmhFYmZBUUQ2dHBGYUZXbmF3QUFCTktpdkh2czdmNWgvYVdlVFNXZkJaUDc4b2gyOVI5RWRlUzd1dm9NZEY5VW5od25lVmhZUXZydVpLc1BGc29QUE9Rdk0wQ0RFQk9RTEVCaElFQWhSTEE1RytUUDEzNlVQN1l4K1h2R1hmY2w3OWFMb00wM28wZCtsd0FBMTk5YzE2Qy9kZ3VtZy9uSlo0RjhydnkwQ2lRSTN2V2pqN0NnLzlUMjFoNzloU0RYUThxVU16YUlEeXhpN1hHamNwMmZwOCttblhPb0kvZ1RDaTVJRk04WENBSDJYdnFvdnV5OTE5SUYxMC9hNlNITUtFVklTakVPc2g5V0FmOThkUkI5K1NBcHpxb0dyQjlUMVlVcm5wSHZhK1NXdUYzeU1MZ2hpd0VEOGRwUDU2eWNFOFdPazE3RkxVMDRPVjJZTUNMeEdsaDJ0MkhOcHNRY09iSXM5a3NIQ2FEQlNIQnZnQm16SHpPS0VvUUUwYzgrVXF5ZXB0dS8xYmwvVXBmdVlKbWZZa01KVU95UEM1Y2JqSWY3TlJCY3NBZ01nRDZsUk1BdXBNWFUrQzhXbVBrNXAvbzVJSGNYVWtZQ2ZhUnhvdnY3MG5uVWZ2NDdDQzdleGVFeC9XaTlsMTZzWFBiUnE0ZjFZdmNzNGZobml5b1dVTXZGbHBMQXlzQkVIMFp5ZzhDL0VSQUdtYzRWNHA5YzVwTE5TVFgxbjk2a0xOS1VrTFFVUUxOamIvSFJ4TnV5dCtxOXduNWUvcnE5K1dQK09ydlpXVnNtSWFJRy9EMUpTWE5NUlE1OGUzdTBlUXNJRVIralVWbDRVVFJqTEVHMDVuSWFURVFBTzM4RkJNay9RTzFuK3N5QWoxWTcyeGNya2tQRHZmeHYzUFAvb2U3OG5OdTZxK29wZUcrb0tQbDVWQTFHL0RHeVorOUl3QkEremgzT1hudjJjYWZoRmlLOWh2eStxb1ZrQjVPTDl3emJvOGx2V1hRSW90SnBpbkpJeDN5bnRyNmlwQTRBNkFhL0EwQnk2UTUyV3F2M0pZR2JBSk96MnMxMlVFSkFqanp1WE5DZ2FNRFRqOGhuOWpueFFvWXRTTC9LZmR0MHJkYTJyZUlyZmRwUGdEa2hjRmpWNE9qUHZ0SHdHV3U2NDNaRGIzeGVKOE05K3hQdUtzM0d2MEprMzR2YitjdVJKbEc4cE1VWUphQUZ0VUFIekhZUWsydkRCWkF6R3NlWUM4VWR1bkhJb3FSbHI2TjltMVVxSXEzOHhXVDNwR08xczdVQnpmcEQ5QWRFWDNsZkFyemlwaXUxbUpmQTV3a09xY0pVdllkY1dKZTl2Rzg4OXZ3dVQ1eVI1NzlGSGZ2U1BGNG5EajlwamhSelcvNzZRLzNPWERQUG9lN3N0RG9jNWpNZXkzbHo5WVp6cCtCdmp6NVErdUFpVDUrUko1aXBhNWo3VU1nS0tMeG9aRUV5dm4wQmpNVzM2UjdidWFvMUVmN0diaG5QOE5kZVdPYjhtYTI1S3V1V2IzMDYrVjRZWjkzNFpBUWt2Tmk0bkpKK2phRFh2cVRiM2RaZjJQTTMvbldzbkZhY05ZM3haWFRtM0dsL2duLzhGbS92aXQvWEZQK1dnSjhYYTBCOEpYS1M1MTQxY1M5KzVSVUFZTnEyQmFBV0FmWnQ5aFc5clp0ZFIrMnJjODY1VjFaKzBTZDB2d3VQK3QyelhyMWNKMlNlOVlwNzhwQzU4TFB5dHJ5c3pDQVZEa2psTHdwU1VGR3JhY21LeGJmWTgrQ20vWnNJajF1ejU0MXY3dHlKVFRsYXRyT1hGRFJ5elhxdnl1RTJETEdvL3VCWXEwV3RpZW95dTdreHVMZXRVZUpUOENnU3JJYWt6MzVhY0w0dlBvdHZ2eEV1dW5MQ3cvNjhzODB3ajNSMCtwaitMblcxOXNadzEvMWl0ZVpPUE5zYitueWdHdUtqcm5BL0RqZFZGVU95ZHVzUklpb3dRQ00yb0lCeUNscUJSYWZFdS9zRkF3eGh4bkc1eUg4cGJNU2Q3V290L0c3amhiTjArN2FzMkI4cVZ6bnBDKzJ0TTRvZTUzaEV0bkZPdXVjWHpQUDhYYWVFOW9VbXpqSXhkeXo4YldITWxxSmRkVFdpTU1BUmh3d0Rxd2hCTW9QYUpIeG5PVVNlTlF3dnhuYXM2M25XQVh3UFg0YlpxZDIxRDVzSlg4NDFjUS9LOEwzMWNXMFVoZjZQR2xKWFpnQ1ZoZVVucTZaeGE2ZXQyenJlUjE2N1NoQ2lHL0wrWUl6VGlIWEFjampSVVk3dlZSV1kxdnA5TXIxdWJaVDVlcU1jTlFBSFF2MFdVVmJ6OUlLYmFjTzVMWFhVQ1h2dXR3U0RXalpyQ0xzZlZmbnYvWVJJa3J4NE5Rdi8rd211bnQzNjkxRXZOWmY1eTE1bVlJV1Z4Vm1Tck5LYVQ5cEZzL24zSktTRnlhUzdQUFc1M1VHVjhHdERwMEVtSlBKT1dSNkt5cG80NXNpb1BXdENLalFIbytBK0dlbnlGM1pyRHBGaXVDc0ZXR29mbDNQODlwYzQ0a09MRUpIekh5K3BLa3BLWG94TFpMMVBmSlY5RzdMMStNWlkvN1pVWEJYdnZLR2ZNM2JrcThCbGEvTDdpT0lwR2V5S0g2UFhBMXV5OVhqcUFiOE0zeStLMWRGWGE3MGxkR1NYTG1NS3Bjb0dlUWRZZDg0YlVhN0ZMOURydFRiY3BVL0xsZlBpdjVkdVdKcWNwWHJjNjhkdVZxWkhORlhkYXBhdE0rSnI5UXArbXZVc3pPeGNMbHU1dG5UQnFKUVJiSDZYYlpUdXltTCt1TysyVk1VNzRuaXRKRWgxRmR0aGVCdXA5NEFHaW8vSWszcU1KclV5YTgwc2tYbzJaTis5RjNEd2NWdGRnenQrQWx4ZS9hVzNCTTM4MExjeExiRUxhdjFVcW93VXpjZ0JFUVlxQjMzZTlySml6ZHJaa3hDem9vWFN2ZTB5TU5DVmVTam4zWVpqS2NoRkdOSlpCWTJtL2k4eFppY3RmSTVZUjNrV1lPczNPU3N2V2Zyak0rcmUxWHB4b3ZVV29XeWp2WnhGU3JkbkJEeHJ6eE1vcm56b1gvOGZISTU0azFtMzVXWm1YNlVtWGtVbitNSnovR0F5TmVTcXBQV2txcHI0VVp0SWFlSjF1L0sxK3NmUXYwOURQWHg3SlM2SjFwdVhac1dXa3ZURzFyUlkybDVyZW9FRmZjTFcyRGZKUEhvYzBaZDYzMlgwV1kvTk5xUHg4SFBKcWw3WWhZMHhXenV0U1JtQSs1MUprNUNGS3FrOGo3SXhaMlBCL1BGaTNRTCt2azV0THNNdkUrdW9jOStyWW1DUzRxQXQ1SWdoM1d3cjk4R0dQZ2hZRHovb0JIKzQybUU3NHZ3dENiQ3E3WkVXT1dvRWZhVmhQTUlHVC9HUVIwbHJtM3NmRXpJbGdWcEYrZ3hYTWZZNGhESVdIbzJlL0kzZWhKU2d1SnZxOUlGZDhUd29TcmRzOFh3bmhoR0RVM2FFb0VRcDFFQ0lUcHVpZm4rVmdzSmY4ZllDUk0zWFo1OGJuOXdPU3NQbFRBQmFnUmIzbmdsNUluRzYrMFVwd3U5Q0hCeFdySFdFT3JZaHVUYTU2V2Y2a21RNktmUUdhMDhhMFRQTnkwNUI0RUhMb3Q4WlZSeEh4ZG1TL0JsR3F1WDQ0RjY0dkpXdm5BTUFRcm1pdFVKb1IzY1lEQlRqWGp5OFNqN01yVFBUQWszV3hieXAxbEw4RENNMWgvczFJRzNlNU5nVEpFSjB1N2VWNnk4MGFka0MwZWZOekMxd0tic3AyTGE2dWZTKzlEUE5jSmorL0wrTWp2ajFtS0hiNHNwY2dMZmRsVjlSWS8yQUQyN1ZlK3BxRHJIbWN1MFJEVEY2VFdpS2FPS0thcnBzc0Z5T2lYVFB3R25MLzN2b3lUSDRuVGJHajdXbmRyNS9RbEE4cUdvTVVBU1Jad3l2VEFMM1dLaXIydlVnTlVLczhrTVBRUGlwZWpkWjc1bG1BTktQMWVHT1NBWjl4ZzRDWWpXVTQzZGxhMTVXV0lUMmlyZFRwcWwyd3VMVGRmWktjRXNjSnZIUDEwK0Exa1NyalRYbC92eW1Jdzk5ZGQ5R1J0UUdldm9oZDZPalBXRFFoMnd5d1ZuRlFSa3huY2RNVE9IbzFPb2RGYytkMjZZNUtZK0VuWiszZ1hpRGRCRHlPTWVHc1dZcDk2a2hmUlVFZzdEVTVBZWRuNGFuQnhlUlB2Q2pITjlHUXpGZlVsaUZiTW9hR1Y4OUQzU3Vpd2pVeEFaMTg2TzN5VGI1MnVsWVFBY1h3MCtvVU81cDN6ZmxXKzEwcUhGc2lVZEdnaXFYQ09Ob1FRTEY4VTNuQ1NSMTc2ZFlESy9qUmJOMG03OERRTzU5SzdmdE50YXRIMVE1dmluek4yVk9ZM0lYSlJwL1Zaa3JxUDFleDNTR3BONzlubnBwdGFlUlBvN1AyN2E4YkZUNnNvRFdudW9kUE4vamt6aHFrN0xiOXR5N1VGYjNubkszVjI1bTVaeXA2L2tsdVRPUGF1eVJTYmo4Tmw2U25kRjlpN3pJVHNGdm1USnAwejNlV0YzSW5OdGljYUFsY2NwdS80Mlc1dmZ0TFhNNDdaV2VNcmZYZmt6cWZ5ZHRaWFlqdnpOMVV5VmVsRXRadG40V09mbG9TMGNTOEtpWVgxc0NlS1djN21XZWRMU1dnYkN4VnJRK1cxSTIrdFp6enRjOWN4bFc4L3M0R2VPRXQvdWNraTJQQWZaQU9UalFuWjY1MjVHeXlCTmtpRFBvckFFZ2VneUN4VFR3ZTl4eG5YU0g1eDF0bzBjQlhxL0lFTHJJaVFKSjAreEFBelJjMGE1ejVQc04veWQxZFkrc0xBUGxKQ0JDN2V1cllNZlA0bkZ3bk9tcERWVVB3V2JVZUx5MHloUXJMejB2ZkJnK2RaMXZFUlY1QldLSTZnT0N4MTlxeXBBU0lsekxyaWkwTkg2NjQ0ekU3K2N1Wi8wZThJRXJWMFNOMUJnUzJYSTBxdXlyazRKV011VUdVUStKK3pmWnJqUml0ajFNcjNvOEhyaFM4TEd6M3MvZ2JBTC9MeWtRTEc2ejdtUk9YbnQ3U0s2N3FpdGRYZkl1cUZBYU5qR0xwUkVacUVraFRvVUFmUVNSaEh4UG1JQVFGdUdkUWVwZkhTNWlNaGRqOWVTVnVRdTB3c1Z5NTJ6ekh4ZVQ5UkJtUGhNTXRWaXNZOThvSVV0SkQ1ay9MdHJieVl1Zzd4QnFrZjJ4ejIzdEQrY05vUDlnWGoxbGNobWtLOWZrRjY5WWpQaHJPdGpvNU4rajUzSUxlM05QSUs5bVc2c1F5Q0p6ZS9oOWN4YkRTQ21SdnBDVmJ6YzU1aEltM1h5OFdxQSsxdG5IUmdYb092U1cxdlh0TEV1bit0dWZNVThlbHgzajJLZmNkck52Ynk3Q1RiaXFyWXVScHQxTW1oKzdBOG9tRHc1UDdPdDgyUEorUzE5SmRrZ3VRMXRJR0RIbzFpRWhOWkxyV1U0dEhKdkp1YWVJN09lb3pOQXVNM0p1WWRCVUg0dU1NRGN5ZVd0ZzJjTEpBYnMwTDFrOUxia3YrL0NYcHAwallBUWtPU2VqV1RleWtNbFNYSCt3eXBVS1ZyQnMyZnJhaDF0bldrZm4ybFFBdmNHWjYyL1JyS2R1TncrQ3BVRXhSZ2JkRWZkSE8yYmZ2S0hNSDY1QzNpOVJGVkFhMnBOTi9TeGJvQzd4bllQb1gxbUZvNjQ5Nnp1enQvb2pHc0xLOC9SLy9JNUlYRzRFbWo0TCtUekxEaUxjWXFBMWZ1MWRWbHRyV3RRcmF2WUloK3hvdzRCdFdEakFaaU90UW9kWSttbVp6TGFZTkkxdEZSVGlES3RNUEVkNUxvSDhFc2xNUTRkWFZDVkx1K25WaDVrOUc2cFFrdDNLNS9ndXdVbHM0QTNjcytXRDJOSFB5NGNNVVAyMm5XMHlKMkIzazRYZHFpN1RnLzdjb042SHFWVDV1dkttSHFsdHhUYnFBWDJLYUI2VGNlWUlKWmQyR2VTUXhSVFg1RTN0ZjFwUy9ma1JQY01GbzVPenI0aWlQWHQ3anJna0Z5TWR1RXcrU3ZZV0hza3V5UysySG14ZUdnUXdNell3aytUTEZBc0JzQ3hoM3JtMmZyT1M1UEVLL1htb0syelBaT3pCZVNQbXQydjRoN1MrMGI4QkNyUDU3WnNuVVpzblRrY0pRRUFBcG1SejQvV0tCNUEvbENnbkZuMEdTQnhTMHVDeVhJZHJkMnJPYmxYQUdJa0pDR1FsS1BZVjFnak80QmpMT1BVeUFQR1lna2tmcGt6TEdWOGJyUWs0d01HWkJ6bmp2WUxXL2hKa1dWY204MVFQSXA5ZGpVS0ZIbmp6Y1NEYXdzN0w3V0tVQkxwbVZicjZpZHQ1Yk53TElVN1I0b0F3S3ZCbGw2WEl6eUV3UGg4NytBckZ1ZlpHWTYxS3p1U3RTWmIvYWc2VTRncjVkaXowYm1HSktmYklNdzlCQlNReWk0QnFZNXZ0bnp3eTN2WEsxcTZkNW1XdzczVEY3WndDbUp4NXp0aWp1d3Z6VFc4S3Q0cFNObGxPQVRBL3oxZXE3NExlQ1B4VTExNG5jSCtFbnQ0M3F0S3lDNXNJNm5PdDYyOFVlOWM2dGIrTnZLNEh3ZVBIMlZ1TGc1OFR2L3BPYU4wWVo4VG1wdWZ0Qk9qODVQNUdzdVZraHhjTzB5UXZRMEJzbVhmQ1hLMkNCVVo3ZWxtalBhYW54NFd0cEFHNmVEa2NYbzh0bzJUeXgyU0lHWTNMbmMraFlSWVFDL1dRanYrRzNwUHQvUUZKcGZuaCtXRm44eWpWdVJGTDlZZElpOFlTbVltcm56ZWdqc1BRTzFJSC9GaTRpczEyY2IxdXN0eDhYZjNjUnpSdFFaQ1MydmxKNlV2RGtOUUVOTmZkSTRSOHArR0xuMzFPWnB2Q0FTOUpXaUd5VHpnYTNxekNManpYMEZxL2UzWk91TkEvczRvRm9yOGsrU0F5azQ3MHZXV0JOWCtzRzN0ajA3MkIvbFR2bUp0WEZzWEdqVjdtdnNadXRsNFpVTFBDSXJyaUcxZTFmT1ZSSzViaXN2UnZtUGZtNjZoRGs2ckRxMk0rbi9ZeDBtT0MyS1B2Nmtld2R5dVI1Z1AxaU4rUFBQQmQvUEJFYzBINTVONUs0UTJIVzIxUHIraU9OeG1nWXdRZlk4Nk5KWmVMaWIreG8yOHplamtJejJuZEZrUHhUaDJzaS85MzFVN3hPYVR2bG9SbXcrNm1XY0xwbWVmRXdCYzNxeWpnRXZXbnEwdkE5cWhQTHRjUjhDM3RBNitCQ1RINjVpYmpCdE5zZStXQlNrUTFhNEFyaWlWMTVVZnJ2THR3SGhGdVE0d1huZ1dSVVgvM3gvUVozQjZXODlZQlJRcUxBMllNRWMyckNSSWVlZGJWeVE5UWQ3OTIrZlVRNkRJak10UktEV0Qrcko1UzJpT0hXMEZhSTZrZTkxYWc4K1ZlaXdoeVV5Q3plZ1UwTnpzeW14TEJxRWIzRXVUemdRNnZRV2hNWlNiaS95Q0RHcUVxYnhmMkNqZXRwaUZ4TEpCbWpYdGFyVzJvcTIxVlFSWWc0dThGTVJHcVo5VFJFdnF2NnVGbnJRakwxcmg3dFJoT1RId0Fyb08xMDdZZ0lNNHVzQTFDNVBtRkhKdEZiWWtDeXBmbjJUd2xTUU9VamxmMkpSMHExd1hKWTZpNzUvclZrdnZ2ekozSktleDg5T2EvNytaSG5Bc2t4MWNrcnQwQ2Z3WitGVkRNZmM1TmdtVlpSSTZXZ1VnWDJ3ai9KN0x2OHJuc3QxR3o0R0Q5c094a29DdjdwZTJha3ZucTBqbkQveGNQUHI4Tk1MeWJGQlp3dXVCWGpPY3J3MXQ0YWVmZG5tSWM0aU1xb3ErZCtIZkZ6MDVqVmpjT25wREVlMHRVNzdEWEd6cEhRYlo2MHlVUXB2TlZLVjVyNExoNklUMmVxRlliSkIzVjc2U0pQN0crSXZteDJzNThYTTlKNjdOMWFOR2F4cXJudERTM2MyQVpPQ3p1ZnE4bnF1ZlZybjZWWTlwYTEwNkJZc2V5S0JQWEZ0bjFBSDZMc2hyVkdmV3psUkpoNkFFWTRKSWtzOHBjNUtjVzBlYlhmcnB0RjRMZ3hyZTJHYVhmaXB2UEVlTndxSEYrUHhvNTlvWnZlOHRUZUNnOXgyZys1NjR6blJiM3RsOC9ZTGszSlBvd0I3a1R3QVIxK2ZRV2lHbmdWR0doOVhkUlhveHhKTk1TMXJEYlduaXY2UE5ZZUlmNm9UZXhqcTZQT1M4bHY0bDZ2RndsSGhEYStYTnhHTm9zekhONmVFNzBsMEh1YmdLVW10SkFPaVhmaXpLTHJjOEdRcUtiYnRDTFpaR3oyekozZzRFc0xmMUhEN1NuMXozR0hCSkVTcVFVMi8yVXpkeWV6VDNPR2lKbUJ1ZHkyQlg5dVlNd2hOYVQ4QWJTMS9KU0p3TUlDR1paNS8zNVZuMnZaYk9NdUplTDFDV1g3a3dkMjF2NmFlREVrcnpTbTZNN2tOSGIyc2YraWJ5RDdNQTZXOUpSSEVOMU9ESUZOekJkWXpWUXNxUXJVRG50UFFrSUM0bk1RVElFS25MZHZNZ1o1dTVENXIzYjRuRVpkSWY4SFg5Mm54bjhPRkJobHc3T1hyT3FCanpJOVpQTlJMWDlNNFFWNEdPUWY4OXFQVHNQQ2phV2gvMTNYRDkrcUtuRmU0bjVJZyttUFlqWkVmbDJ0eTIxc2FodFpWRUo3Q08zanBJcmJQREpXdDFLTzVkVzA4V1NuZnZ3ZjB6a29EVDg0WFRxQitkVy9QN01ZcDdpWG9PRUdUWXAxNnBDcEtqSlBVY25hbGt5R3hMaGxpUUlYcEdRLzNrMnlnV3RrNExwNGY4bzN4aEF3RjJRZlIrTFQrRjQ2YmFtdGkyMXFUUDFwRmFCTGxlREhETnZMK05YTWM3TGV6cElWQ01lR3hqY21iSUh6cEE3SHE0UnRRMnRvMWR3QkVDYnh1dG44MDlCL2YxQnptN0NTV203TzNTMjhvcnpFMGd5c1hrWFdpTit0Slh6b0txaEltZldqbnVxY0pUcFdBRHl2MmJ0aVhiREw1MzU3M1BCNUMzUTdiRlM1Tk42SXlnTnVncnNxQXFvd1RwOW5mM1Q3RTZDOGVvK3E2S3R2UzhodlE4NUJ4TEhjeFFYN3BCMmdHOWw3US9TNVdZQ0thT2M1SGs0b3lkbXliN2hXTUkxRSt2ZExxdzhoVzVDSEx4aHU1VjI3TGhPZVJ0S3I4Tnc2QW1vZmxkdmFuNjdHWnZhdWZoM3RUbkdNamRWR1JFeHpUZFRqdHRIUUUzNlErdWpHa093Rlg5THpDcWlkLzdwbmlwajZXNW45TWVkMFVybzZJVlpPMTAxd2E4MWcrdWlKYjZYMHUwNGx1aTllQkV4N09oL3A1bzZlVndlY0JvY2p1aXBmZDdWMFJMKzY4bFdqY0hOaDRzenIwOFJldWVhSlVHTWNyYTZRa05PbHAvZWtXMHByZEVDK3JqK3FxZFhsNjljRmx0SnM0ckdvVWtNMUw1c0xEUGdxbDBVZXdna0Zob0Z3eThwVzhuZTV5VDkzYWVmVjZUZnZzRzhDcnBLZUFuN2N4eThIcXg3cWdEcStQeitzcTF6OGtreHJtd21XeVlwb1NlTGU5RFpibGFLQmJ5bXc4K1IvdHkwQnIwdHRaUTFPWlhQa0pYb25EdTUvRnE4RTExZXZQV3ZDcjNzRy84eDFNVjNGTUZwUU96enJWMkhCaEJXMmxYVklINW9TcVk5SHRjTzZvZ3l2UVk3V01YMGxHMGZaZ3dxK3o4allHdXl0S1h1c25ia1A2M3VQYzVlZTJtOGg2M2lhdFJPRXd5YjFhMXNYeFRpTWpkYWxYUnN3ZEh0cnZQSzNEbkNreW9vN1ZhQysxMFJMbkNaSzdlbzRySHRLYkRzcXNOYVZlWWxBQjhPVWY3SnEwYjNOSzZ3b05hOThrbmRVL2tCaVZHMmFRLzdiUlVFR0ltRlJRZjJ1Zkk1VWNKTFZndTdBN2F5OXpudW93NjFGZEJtbVEwUWEvMzJ5cHVUS0c0NFZZTTlYU29Jc2E4aWNuQnkwWEd0WEdDYzJHekcxVVpzUXRJVE9Pa29HdWZzNFV0SkZyZU9ldFNPVkRMNkVVcnhBN29YVHRRaENRTkdtNEtGZ28zYWprVStWVE1mZDQ0dVJzclZaWHc1TnZkZGJtT1ZWdnJBSUlKQmNrN1NaUWkrVDU2ZkhRTVV6a2ZiM1RrQ0I1b2tqSklyZlhDR1NVdWI4eGRkRzF0TXdyUnN5VndJZzlJaFlTY25Ic1N1L1ZzZWUwNW8wSWRRcEk5c2lWVzhma1I3enFqdFdkUER4aUk1MGNFZDlCbXMzQklCOFNtYkV0Tk9JdytkM2ZxSURrRXlqa2hBMGNuTjkzQllLNm5XRWtnUVJONlJqRzR5K2RiYlQzZjNOVWMzYlhuaUltZlFoUDhyaG9hbUxLNjNOYnpwdlhuN2RDejNpVGg0SlYzYk5wUzA5K1UwZk0xZUNkK0xxWUxaN256MDRDK0Q5UGErZlZkcWt1SzBBNDNucU16TUdSWWJ4eUxXUXo2TUdONW54K3R4L1pvNzNQNlQxOUppa3EzVEpuVzNsdGE0K0ZNelB2VEhJUWZHcWRBNmU1OUxoUUlmVE1LNkpJM1JRWVpMUFVMYitWQml1WFJUODF5MzFwcWlHVDBmc2xyV3BjNUFkbVVNRTJTTUVjLzgwNUJxdGViL2p0NlgydHJud3EwVDY1dG9Mc2UrYW5GcTRyTWhrcDBDSlZ6TWJiWlpham8yN0d0SDY4M0tFenp0bVJJV3lFWkdyRyswNHN1OUdTamNRRHlRVFlMdzNibzUycS9oN204b0xtK2w5VjR6TDZqV2J4ejNRTWZQQWJaaXR5aFo0SG1yanNVVVhmSTdMVFVOOHhPK21YZmNIOXFpWCtaYkRKM0dGMDExOTAvTFV4WE56RHo3dFJrZTFHSWpqNFdqNTV0b1d0VG1vZEphK1lob211Qi9CVFF5RnBJZllHS1ZSdTEwNkc0RElDZ3g2QnpKQjE5cnVidHFBY3oxeWlLOVB0NWRSS0pOT2Jiam1VUHoweUFJSGxhQnNtamtTblY4bVprL2Q4U0tGUEdsbXZYOURGc00vWkowWHozbnBZVXplTlpMeTc3Y0FiVldjM3hXVVZoYXVXa3YvWUNtOHc5aysrSnYwTk9Kak9Dd3YxZVRySUhZWkhaSnk3eUkzSXlLT1drbWtzVFR3RS9qUUxlaW4wN1lTcVU5alVPdXhSOTc5bnlVUjFhbVNwRksyMCt5TFhWWUtjaUhTZ3hrYm9aSlI3TXRDQWRWWDBXNk9HSFdoUmc5cWdSK2V4NTBvK3F6eWFsYXo0cWRhT0pkV045aHE1SlA4OUMvbHVUT21jMStvNVNHTWprOVd6TXZQY1lDeFhJNjlQL3VDK3ZHQ2QweWkxUGFFMlRXQlFKSmt3TlkwRWt2Wms2RStTOXRMVFhDcnRjMkZYUEpwbEpXb1ZEQzNxYlEwNUlnbzEySkhMSlRQcTlIWG9XeHM3Q2NveDdVeUVEaUhVbW5sOURiakszc0kwa2lJSDA3NFFaRHJwSFZjR2hGdjFPYmE3Q2QzcTJzY016U05pVnJYMHZzM0RFb3ZyN0FmdzlEUlBJVEE3dWczWEM0djI2ZWx1MUdKejEvaUI3blc3L0pyM2xLT3o3NmFVd3IxdjFnTlhPQzZkVEtyenBVQ0xQMkl5V2ZxcHZ5WG9LYlI3QWV1YTJsWHVjR2VFMFNRMXZSOUxPMmx6bDlaeUVDRU1kMlpTangrMWV4aHk5RndOOEwyWjRyVm94WUdDdHRmVmNNTTJSNzZxdHQ3bXVYQzhpV05kWGRSajZqaUMxWUdZQjJFTG9PbVlpQXoyaXVaaUJMQTNXMFN1ODY2QXprU0F0VTg0U3phcjdNaUZwTlk3Mm5sNWlFZ0FHM3B3MlBuMkgzaHJjMWxzUCsyUFA3cVA3ZWd0anpYN05GL3VXU2dPeXEvbHRYMHg3MEJkNzRzTGVsNUZwQ3pJeS9TNFpLVzdMeVBRaEdYbVdvKzdLeUpuR2RmK0UvNk92ek5adHZkNEhEc1MvU2NxYTlLSlg4MURZdHdkTWx5Z1lqazVobXF3eGRxeEJNTEpCOW1OZjZhNFdPZlVmMXRoL1VLejFBbU5hRUh0V2ZXK29KRmxRL1gxUitrYmdneVZITC8xQnE3dDhrTDlmRjdiMW1xQmhXdzk5OWlIWHpSZWNWODRCRUYraFpNVWxmVXhWQ1l1ZmttZU1jdGNXVmd1SnJpZm9mTjMvY1Z2d2YzcS80di93WC9kL2FKbjFPL3dmOVliLzgzamFtSDNtR1I3UVc0T3YycmJ2Nm04N2Y1Q3pQRDlFV0FreThvenQ3OHVJMm9LTXFOOGxJK2ZiTXZMUUVBZkwvYzc4NXI4ZEZrODM2SjZvNU9OVkQzMHY0eExhcTFwRi8vTnB3N2lUamUxUkVpcmZab2JPdDlPSDZsR1QyTmh6ak9XamFXL3VLVCtQeUE5Mm81bjFDeVZGSmE0V3VEa0FQUmlEZTVackt4TzdaMStVc1c4cHR5RTM1anFGRlZuVFE0MkNUNUc2SjFJcWJSU3NUVFpBRy9PNGZuenFFS3lVQUloL25GeVVpRWRsSlRzNmErMVVzanZhdkxkVFpSU3RnZG9oeUVIbytSVkMrNlRmNjdSVHJZNnlDVzc2UVo0K295cHk3bklSVExnM2tiS2pyS1hHc1k0R2FCSzRhV1ZSTEl0eG1wekczQUhKNHlsY3FSU0pJUit2M0t4RXpvODdQTEJmNGliQlRsc0lOQlBNYTF4R1FJRG1TRHdXMHJoSVVMN2tmWUNpelpuSVFlTmtWSjVEM3RZNWFERTBkcDZDMUh4QkVUbnVWQ0RuTHRXaVUwQ1IwdEg3a0xNSmhKYTZLUGhKMVVXQjFGK3VTd1IxYUFob3JwRnZ5MHlRSmgxeUR2eGszczRVdkY2c3VkZVptQzZjaUtMcTZGTlQvMnZPYWpXMEJYb1hkT2ltY0hNV1QvS1FLWGE5V0xlRUZCQUlXdDVvc2tYNmJ1a1B4WjJmbW9jUW5jZmNwWHZmVm5NeGo1dUxyelp6RmVFUXVUbjZOb2k3eE14NVFnMGRpaCt2VE1vdzBha1lKZ0srTGJuUWkyaW5LdnJXNTBmSkpLN1FJUU1lbytxUE4wYm5XcllqR0k1T3dBUlRubEhRRWhwR3dPdXpkV1JTZGdRa0V6VUdFcjFvQzYwbHdHZ3RUVFNaRTdDZk9QSitiQU1DWksyeFRnVm1KQjFrQnVtd0FTQ2UwdlBRa3JiT1F5MWx4ZWYxd291N2hjdDFvVmt6U0tjSHl0eFRSemFyc1pCQVpGT3V5V3ByVFFPS2loZWpuM2tPMGhjNGM0YjBCdFVaZWlHMnBET0NqQktHQTVLSGt0VEhrRXBtUG5BSlUvMFVwTllKa0RBNDVoU3VCdEhVRWtmbG1sWkpTMnR5Qllwb0JnM0VQR2w0VnlwMGVPSS9yVDNIUTI1azVqbHE1UEhXemxOS09Xa0wyWk1IWkUrRmhFTjRUQ3lucU1XUXdZczdaNHpZWnlTQmNqNjlnUStvUlpZMTBxbzc2N1oxWnpsOTlwbTdCQzV3cnNmMXUwVDlyWUJ0N1M3TjFadDZOMURjczVaM1Z6NDN5dDFadGE3U0xxTC9ScUVzbGFPVzBITDBBdEJ5cnFNWjhrYnVPY1pxTVZSUDBKbWp3S3hUdGJhOGs1ZHJ5enRzdGJhMjdwMlpZY1FheU5oalJCbGJXSGsybS9nbDZ4SU0xTGR6UHYxZVhZYUxoVEtJdlBrb3dWMUpJOVpQQmVqZThOTnA1Tm5JUmpVUXdqdDZvYlhrS3djRjhwWExMQmQwZDJvVUFmeW5OeE4zb1NRaUgyMEhkeG9xQnNMSjUyakZ4anRSNVBWUXNUSlZHUW5JYm5sT2FhK0x0dTY5VmdTN3NpdkVubUpmMXNhSS9lcFEzN3FsbmRTNHR2WkdqOWRSd0ZtTXFwelhZNXRsQXk0RFpPQkZyM3hXV3phNVFEYVpJbUQ1ZHJJSlVnanY5MlF3Qi9rZlZKZmdMaDdZZit3L1YzcXRMZFNqQUZDUG1paWpKZnJ1U3gyZDNlSE95MUN4amk2Zi9CVncxc3JuaEhWdFBWbGI2OUdrZFRUbDFsRkFkZnV3akJYT2s1YnN2VFpmNzFTNVpBbVA1cnlZK0ltQjBRRWRJMzlEZDlVMkVwZVRjMVZha2dFMWtuWWg3Qkd2cFJ3T1dock9DTTZBWW9vSDh4S0MybDBFbkJzRkhQZ0FLOWNaMFdFelh1dTNOR3hXOURvUG84OXk3QUU2d1hHY200MVhHa050c2laMWlybzlhU3ZPMVF1SWM4bjZpSjNkYUNkUHNkRCtyRDFiV0wzTjJOeHp2SjNuQkZmOFIyeURxM1cxWmVkNlorb3ZCUnprSUphK0pESnZqbmdxNzhWcTNkTHdwQ3RNWm12S0RyWUZwbFBNbmdZeEZhbjZMcUhhenFGNFNzNDkwR2Q0ckwwY0pGcXRPNjJ0UnlyOW9TVkJheTNHd0NEU1hYb1N1d3cyeGc0NmNxVmFmSkYzenRpK2E5Q1ZUODZFbTh6YlFkaldWMnYrbXF3ZzNSNDZ2WVBIL2FqbGFOU2pobU9kZ3VUUzZCNnhiZTFSeldlczlvZ3pUaUdIcHlYR2RnMnRtTW9yOWhtTGFtK010dmFHcWZaR3oxMW5KNHh0ZHZrbWRUY0x1bGN4dThZTVBPckIzVmc3WHpFNnRUaU1HNjlVZk5melR2RmRsZEdiMWZQUHBKYWZ4Zk83cVdVTWUyQXVGRE1LdU9WU1ZicXBxcUQxbW9lUXMrS0YwajB0Y2hiQXJEM09PbEt6cUVvdUlkc0Y4OFhVeVM4SXFQMGVnOTBUc05GY0JMS25zU1R5UVByWFRGMGRQU2NnbjdPS2NoNWNBZEl2a3Raa2NWb3pybEtzYmFYMkpuMUk3YkVsZVFPNFlrSVM1cldaY0hSTmh0TW9WTHByMTFsL3g1WEliMWJ5MEo0OGRpWDRaN1hsenBYUUhxMjJIQ0g3REZqODRUTEk2OUVtOUVabGdkTE5hYTg3OG1BQ3BidnpOOU1vNE00N2w3TkE4NXNYZnpkcldCMmNEZEZRSkk4dFAvNy82cGtreTJtdHF5c2h0blVsVUFSOVdOaGhUbkNXVDNWdWhQbzcyTVU2MDl2Qmh4ZTB2aW04RWt5cVV2MXdLRm8yZ0ZzY3E2Z3kwbDU2RzVpTDJQakY0RHlaRTk2WmVhK2xFZmgxQmlQd2NtMFdNMDFldkJtTm5QUUNldUUyMDhoSHY4ZVJncUROVytJN21BK0E3d0JtUkliSjByZXpNbE5KY084eHIweE1LMEFzNncrTkhZeTZYM0pLZmtlQk9MN1Z0Nkk5MnYvV2VhcXJPK3BxU3RXVjZDa0dodHUvVkQxS1VyajJhSStoM00rN01MV09tQTRGVkFvSyt0Y0xXMERIaW9zaHFWV0hlRytPSlNzalFSMkl4MFZxb2NBa2R3RkNUd05rbVJhdVc2NFZFVzJCZlhtOVNlbTBqbHg3dFBNVmFFZEdad2swZ1RXcVhLQ0I5NXdsWGEvZ3B0WitibHMvRnhqaXI0MnIyWUVDcTZUeCtzck1WWWtwazI3ZXUxRnV0SmRXNGMxRUJubFpIdklhY09HYUZBdGhuNnVFMERvWnFFcVNndXhpV3RUVnd2WjJuajA5a3ZkUlFzZGdnOVRTWGNkZ2NISzhCZFU3MTdCSlNxMmphN1BKdTNaYXp0cTZhZmUwZ005YURMUW84K0xKVjVMVjIwd1FYSnZkajJNeGZwdUpQWU9UVnd2dVIxdHljZGErWnp5bHVPVng2ZExEUVlqdzdNNjhvOEpNaXZ4QVdDMFRETXdTbDIxVHNXZDdweUExbzZDRUUreHQxV0xONmdYdUtuZTVkWjNocS9EUTlRQVFwUE9CNUsralYwa1Q5SDZQZFBOanBoeHNtZFl2Nm9DZzJLZnkzaCt1Q1ZzczhqcW1CL1J1d0NKTEdIT1J1cnhnajhvd3V3aXNLZGVMTmU1MDM2QmdDWGZHVitzbWJDUTJ1ckxkSTNvV25vN0VJRTA0b0NKaXhoTjJPK3J0T0Zya2M4TCtEYjk3UHBuamQvLzFqbGIzcUg5TFMrTDBGcmd2KzJBMzY4dlRLN2gvcFRDaUp4QjN2Mkl4M0UxaWFGOEI4clRRTnFNRlp3azRSaDhscm0yVU9HT2VMU3pkOUF6ZUJJREJEaW9TSzdoR3EybFdkaTN5bzZXSDlwRmd0a0hLYng2Z0s5MzRmVWxrMWg4Y05keitNUWpTYm9iYmRzQnpPUVVmQmtPOTgzaWxnb1VDOG8xOENkZjdkVTZJbUNnWlpJWDdCSjVOYVdVVlpOV29Gd1FCaGU3YXd0TGpyRnlWb3RWazdqTGFGNGROOUJ5bk9tblo1MHE1NGVCekJ1dGowanJHdzhFVmRIYWlmZFg2Ym83Vms0NzJPMytiSWE4bjJTeUcwME9vZEJuWHZpQnRqTVdkeHdtbklNV0RSdXB3Qk44TldISWNDdFkwZkY2RktoQzFCOTJvVGRJZXNRaWtzRkNIM3NrZkF0WWMrbjI2c0FQeVdYTFdCQWZNYzd3a1NPVzlPc0NxelRabGZTNkp1NERYV1NTN0JJOHVlUnNhdVd1eUoyOW83VXRNUGNYcWhNUFJjbVlMdTNBQSs3Y0V6M05EMTluRDZ5VGd5eE1xSThxRitrcVhTRjdSdllqR01EUVdub0owSHhtRENBQWdYSnNCYnpCSUxRWjMycTQ1Zlk3VmNvTWdUT29PWE5zNitKd3c5NXpwaXpvNEw1R25pSUk2dEhlVXdNcFYzbmxOUjBxZTVrb2RzbllObjkxZ09aM090MEMwU1VDZVFiYkQxUWc2cmJVTHpMSXh0S0pBR2p0YldEVWlaMmgvb0NWYUkvRlNHUVYzRWlYSXdUSWJGTm9NWkJiS0V3dGJXUG44Q0gwM2M0SHJoUU5VZkMvWUFJYnByS1UvRTdldW8yL0puVGo1cWJmemVLc2hrL3Bxd0wvaUhPSFg3c1UzQktENjdOWndzZnRvQVByeVRDSGZNVFV1VFNIN3NNMFdVODlwclVKSFozeU9pZWovWTlVU3NrRXEzd0Jrcm5HR2c0aEhqQjZ2bXdGdWFoVStFbFBPcEFETlRmNTFkQVZuVjU1RmVRNjU3ajVNeldqaDZFVm9WNXlobG1MbFFTcW5Qajg2VkRPTjRKMGdWYkQwT0JPdUJIVGtmcTFwbi8rbXFncDNNNkI1UElYOHg5UDd1bk1sQXBxVGdXMmVFTzNzSTI5Z2M5TWJ3QkFyU3VOYXJJbDFndndHdGpMci9FTDBzRlliYXFkWEROZi8wN090RERkZ1k2UlZvdm5YQzBmUE1IMll2Ri9ZSVZEVmdUalB0WFBkY2xrNCtGa0dGTFJhU1JJODZvMC8xNkMxeTRtVm1LdjRPMlR4NUEyTVhjQ1BXRUxuS1lXMnNZSDhEQzhtYmk3dWZTN2N1WGsxdW96WFFBTXphRUlrVktBVWl1NkNmaEI1T2g4OEIxL1I2VmV2YU9lYjBDYTVXN0FwMklvK2VFV2ZWdXZ1RloyV2FkTUU5MVFZSnlTZUVNUlU2YzhEc2hMWVFjSVdnUVpQTlVURW12VzZobzRJRGlpajlmRVVQUVFIVWhXOFlCVEc4OG0xa1hOM1h2cXBuZ1Jyd3E0SEZ0RGt0SmdpQTFRSUJBRzNQSVY4V1Z5dFFHNWg0cjZYYWNUaC9mWDhRRVQyNkovT0R3UzN4c3I0QnllaS8zaW0zTzZMZi9RMW4zNGlkZkp2OGVuelcwV2w0RkZRcVIvUFdlakhwQ1JxekFlVFJHdVZORlZxc0xVRFd1dW93NzZSQnIzK05OZGlXcXFFdWRkTVcyazh0dmR3eVY5VTJTcThXZTlZOGNVSUU5ZG1rNEFYbDBBbmpNNmhwSW5GMlNHVEttQ3pwSlhHdm82alp5NEpIN1I1TDlmN1dCSGFZR3Zac0I3cEFtMjdVa0xYMVVJR00xb28zU0ljSUo5SGh2MEVTSkwrb0VPeVJHVzRFMkRhMGlwc2VVK1h2QTNTTHV0eEVZVThZUUlsaXp5c0RFdUZQZWxQdjZpdzE1Zm45VS83THZ5dHBxMkoxSmlEZi9DV1BxL252ZXVKdzR6VlluYVJEQ1hKdVNtSlhtdjFCOUtmMkluMHZwcXJFUEYyYzNwVnRBSWpNSUtZMGxCQUVtWjBybk84RnBhK2JSVUJCdDlmQnZXb0c0Y3NjM29ONW5iM3VIQU05TE5qL1NyamE2UXlrMW56R2pXWmpsRW8xT1Z4MTBuanVtNTlYbWVtOW5rSGZmSTVVU2Z6aUNTa0Q3QVB6a3pNd0g5cU1KTFhFcWNiTFFxVlplN3oxbVpCa2FLR1J1WkxZZ0pHS0tYcjdIWDBMeWFGSjdOdlNuN2x0NUpmMGVOWDhCbEczTDJDWDh5TlRtYWQ4N2VBWUV1M2dJZWlSMEdGZnp6ZDdQdmlnZDNzTXRuUm5OelBzQ0ZXUnF3Zlp6QXhOaTYxVWNuSGlFdHdrZ2o5YjFncm1SbkppWDVGN0lwdkVydnpUYkY3MUgxL1FzTGVGYnZzeTFxSitTYnh1RzIwSHVNNjdENzl4anZpc1NaK1krK2dTcU55TnIxS2Z3cGxkK3Q0US8wblM2ZXo2dVAwU2pwMjBLaVd4QlQxSC9taXJ3b3VxZ2I1K29XMHdVRUk0U3NXekVOUy9zTTZoZ2FrZnN0d2o0M0xvaWVkQWNkenZPVnp5SE5mS3I5UlQ4SWhyaGFoTS9VNUtMWnFGN201aWM4WmlhbDA4M0JJd3p0WDBQSjErYjAyWDU3RlFadDFCR2NtcHA0dE03V0dDdWhaOHBUdUtvUTFsWVg1cFp0MjJWQXFaeXdqMXhsdHFMK3FyOWJzNjB5bFovQ1ZhOHArRHl0QmRLdUhSM2dRU3F6NzlDM3ZYOU5wZVUxTEJ5TGtyRmhWM2pzR01PS3R5SGhNc0xhMmNLVm0ya283YXl1Vkc4L2xwVjRNemxxS0hJaFd4SS83SHZGYjMwb1JDNCtraUg5UHc5K2o3U0hkSlUvNXV5NS80aDl2ZWU4NFR5MGVubTFpQzIxVjJhZnVYOVBkSDI4NUdUeVFCTWdDMHN4VmtOUGZNMUdRb2owMW96RjhadnUzT2p6OG9VcWQ2QytIZVgzajl3Y1lLcEhLNzB2OGRBcS8rMmRsaW9YM05URS8zeWwwZEhnZm5ENHg3UElPRE5udWUrK0VmV0N2TGp5WCtEOFdZUnJ2OS9GMjgxdjI1aSszMi9YK3QrRHQ1K0czZExGWlJHOC9menN0a3VQYi92ZDhrZFprdEdHbVY5dFhWU0x6YVhQMDM3MEltaHVVYmdGcGw4MzZSYTMxTFRWTmZMZVJQWlRpWHFSS3dNbjZRaUJOc3JGdEpHRzBqZEQzZWtvQzNJK1RXRHlpTTVIUXo2dlV5Z3Y5L0pzakpwTlk3UHREcXdnVks1OVp2VmYwTzljMlNCbXRlN1RvVUErdjBjL0JiT0djdHRtdXlMdWc1K0kreE1UcmI2TndPR0s5OS9zWWJEZUhuOXNrZWZ2NVc3RGQvQlZINldMMzJ5SU1sMitMOE8zbi90OXVIOWN6eFZwNmlwVUhCVm1ySEIyTXpXanAyK1poVGxqT2cyS0wzS2ZqMjRQN3RmdTVQZWYvbGpzV0RFZW50MkV5OXh4RHBZeTRFL0xkTnhoeHk5am1YYTM5eHU3OWU0a1l5Y0xTVFFvZFBSazdZdTd6U3dILzIwQUIzSDRTOTJLNGtyT0xqdTNHSm9XTHQzUzcyYjhkZmt2ZkRqL2o0TjlNdWhZb3V1MXZJME9SRTkvdUhrM09ZdUE3RkRZSmg2T2RXK200eEUrUnIyQ3RKN0hJQkJzcitWaTZxbzNiYmNQRlpyTTlMQTd4ZHZNL1pmK0c0c2tiTk1OTUtwQk5xQkpoNStmZHd1Vkh5MEF4WDFScEJIdXIzdjViR09oRndndVZ3VGtLSVdHTlRTN2FORG1OZWNLOVBTZlZzdDd0NzNRZFl6dUplL0R6SUUxV1FiWjk2R3ovQnh6bWgwTCt0a3UyZWZxMitiZFhEN1dXOHg2c3Y4eXdVTEgrbkt0VDI3bi9HZnJoM1FabVBtZUlBT3RHT2laTGZ3ZzZIOWtrVkpaSjZHakhoZjNqRkhCNjdzSXpLcU4xODIrVmJoNzJ0NUc2R21UYXltVFVqL1FPNXVBbkhrUHZnKytVbVVWL0c0MjUwaTY4UG5TNC94Tk84d014WCs0Vy8yYmVWWE1vNUxaemdIOGVlL1p5aVFMU2VsQVVjUHJTVjZ5Qno0ZEhxajN3T3dPKzdNNVhraGRpTkoyRkxheDlQcHg3dG43eVU2T1l4TDFDNi9mSzc4SVg2Ynh6dVNRcEx4RCs1NkFPRFFHTXFnekRNUFhmUlhUWWFoTDN6bml0MWZkNXptam5jMGI5bWVkSnYvZUJ3TWViNk9mYmZoOGtpLzIvbXdLanlSd0c5M09hMWVRQy9TejBSa3ppY2xLQ2xrbndlNVdEUDlNWGRXamtvVzJTbjllVGNTUGJ0YzhzT0NvbFZybk9Ccnh4OG1ja2lZU1ZKZzl6cW1WYmtlNHNIR1ByOHhZejVjN0xnTmZLWjl3K3EvM2J6MU1jdlAwV2J3NXZQemVMNU4vcnZHQ2R0SmUzLzJFaWdzcjc4cW9Sd3I4clc4TEdLVzU5YWlhb3dJZ3NRMTQ3RUN5MXVPei9qZG42T2lKMUErY1NmK3hQMGJQNTczd2tWVW1tUjlhbENDZFBzYWJJYjY5dmI2am9XVVA5OWRlWjF1KzlxSDB0MC9ycnJGUkxRMnNkOUJ1cVRkRDZ2VE5SaFlJMjNiNkN6UjlBYTlNMFNDME04WTZCWFY2bGpiRWluMGVmeXlaeDFmSTA1Z0Z5L21YUzczVzAzdlkxdEEyOEpsakw0S1YyZlRFTWJuL2IwZnJSdXk3K3c5ditzTCtTRXZ5UDFkYi9iYmM0Qk12L0NKTGovdkQyOCtjMmVmdC8wSjlmbkc3QVc3c1FLZXRCWXpEZHFUQXpldjlMbGNWbHFPaGJkYkE3dVhIdmY2a0RmWStVanVlTVpqNTNUcVNOa2ZpT3VJY01MdDdwZzNvVGc2UDd0OCtwQUo3cWN0SEo1YzVJNFVDUHA2K1l4emRiUHZob1J6QXRONXp5ZUNidWtHY0ZqZXYyZVUzd0xWWkJhbUVLdTFsMUljMjB1L2RtNHM2THhjdmk1TkpUMkYzQVF6YTc5bjRDR2NJWGNqZVZWK05VenoxYlpqeTdGK0VzdnJ3UE9LSThoM29TMWlUaVM5OFBEWGUxNzFia0FnWURoalR5Ui84dzBVS1JDNk1xRWhZTnljVnJZUDNOOUVXOU1KU2Zrd3cvM29UeEp2clBFcEJwbWh3OXBCYXlIZVBaYkliTFRlWGgxamF1VTBISDhkcHBrWGJqc1lPL2U4eVYzNG1zVitMUzc4d3hnSWdVN1RBWFlDbUFDVklkeFVMcHNyNHlqZnkweTZnSzJmeVp1THk1eHZ3cFBBOElUNnY2UklhN2orNzhJVkFBUkpnc2xXbFVBTVlPYlcwNkZHTU9mWllsMjlNRmtSaHZBT29LYWQ0azRJM3lPeFlPY29KMDVMRHNQVWs4K3Z3MGNpbUlyaktJbmpyalU4ZmV0cktBMDdja0ZISWd0L2NyMWdUNUZoNEtaVkpvNGZoVmEvSlVDSitYRE9KRExvSmdlOXdjMmhPT3NvOUlkRG45Rk5vQzh5VUJvYU1mdHJ3aUwvdXJRbEwycTA5dGZlWHoxakdVZmtsUWl2ZmZJNURuV0pHcUpJV3FvSmhacDdGOTRUblQ2bENielJYSEd3WFRJM24vWS9uK1p2WCtWQlZPWWpGMTdYTkJZeFFVZDNwTzAza2VZK0NIUWEycDRlVWlqc2Z2ME45R1d1KzZKVzZvM3ZmcmlSYTJHN2t0dnBjcmlic2diK1JIL2pQM3NQNmNaUUI4RFkyTGRsQ1Y1VEpnakpQTFd3ZlBGcGlML0Ftc0I4bDVNMGVDekpnK1Jrcnk4dEw2blB0eTlaN1VQdXM1TXV2YTJlVlprUUlFWkpXWEhucS9tUUI1aFl1LzQyaWV3RnhibW1IS2MyUEdUcVltSzQvdGQyMmFoL3IrU2RkTjhMMTdoSnREaG5ybTJmck9TNVBFSS9rT0RHOTNDZXBTdS90SnpVWFlFTTl4ODM1dnhpa0ViZmgrSVVWTWl6U2N4VlQ3MjlaenpFWlFmRzJmeGc0RWhJZUFHN1Nrd0FmMU83c0xtTVBPVDZlWDUzL3lWdHRyZDdEKzJTUndyRVpPZ3lTcmw2RVN2VURCVXBIWHJtTXN5YnZleVBlSjc1dHE3SWJPQnU5OTdPakxyOG1NY1ZvQTJMVE1oc3FQZzIrajk4SDluQlRPMHJOYjFER094ZmdjQzJmOWZoOE4wK2NPaVorMmJ2eXYyWXhsNkJnbjhyN3Y5MGZHKzlLNmpwL1c5VnBTekhDcS9rS2ZkZE5KZk9YTWV2WFBXdWZRbHZlWDhrd0xJQS90ODhWbnliejlTMmsvSDAyZW5CWkpIQzRPOFNhaVAvdDFkOFpiK2txeWhyUjZHcGEvbTFZamE3anROL3BjWUl4ZWJXRkR5L0RSeXl0MzUxY2pJS3YrZld5cDJ2cnZRWGMrb1g1VGpKdm0yVVpyYmt3OW5kcTJ2M3ZkN2FzbERCNDl5L2hUYm1CWndtbkxUYm1WY3Y0SHI3cnQydWVkQjZsdFlWT3VqWG1IRS9hZllXWm1obm1XcDVZdWowMUJuSnZtNFgxZkxGdS9WMjJlT3dIVEhrUXVieFdoMGoxUWtPOVBtWnNLSHFSVTg1RFhWckFaUVM3S2Y0WjhQTzd1bERuNGFxMFd2T2VMMmw4emVsLzc4RTdlY1VXcjBJM2RaODVNV1BsS2d1NHUwVVZCZlgrZ0orZVdxenFaVDVuTHlSK3M4dSswZm42czdCdWJIUDBaaTFSSjZxN1RRLzhQY3pGbHMrWDFqR2R6bzIxeU1UaDJHWUJ3R2x2YWN2aXJDcDBLNTl5V3MxdEsyeHRVWUloWVFXUFlhTStaUHVpajFGb2phWkdtbmJnbmU4QUhiT3o3alF0V05iMXluNzQ4N3h0bXNZQzVZMU0rK3J5eDlSejFNQ1VYZld5U3ZWeHR3WmhXOWRaL3pvK3ZuL20zeFg1MFA1QmNBSTR5bG85UHJBY3IrU1E2VEczaEZDckxKSWpaUHExeDB6TzV0VWE2OXc5ZStuci84aGV2L1RSSXU1MDNRTDBucjN3MVRkV2NoYUZOczc0dFo3Ulpka0hGN3RjTEcxaWRNRWlkWFBWRk1saXJwU2ZoMTFUQWxlL1JYbFJGWUgwbCsrZjhzcSs4NzZPaC93YWZqY2xaekcyMVVMWk9FQmxRWDhCM0dINURPcWkrSjU4SXMzemJZbHlJQXdaSFFreHlQYVNTUi9KOFlJa21ZeDdtYTFrM1p1eVY4TDdjRDd6L3N5K3FnMHRWZXl2Y28zdCtOZHk3cGdhK2NQT3YxNnlhbUlBVUcramdPcjBIazgwM3BMdjNqM3Z5alhmOUptKzkyVFh5U2NlQW9FcFhUcGc5SlpKaUZkY2RJK3FNRVcybnlEc00rbEtkODBNT3hNVTRCSDd2eWlKQVJ5bVNBVW5BRTJRMzhLditjcGhqd0h1cmNkcVk5anY2U25mbDJsbGNQMk9DREE1T2lEWlhDNzFmMzNjeDlya3Vlc2J4c1NUMXg1cUNPQXpWdnQ3U0ZJRFNQajJDbHJEMDZkVFU1ZkZHNTl4Y2FNNzdwK2VUeThuN1QydUdORG1HaXJYeEhQVldvMkZNOWlMKy9IZVBUdEJxWUhkdWZ2ZTFVWlozbXFaczNQK2twcWxqakQraWFlcW9yNytnYVl5bFo3TW5QOUdURzZXc244amU0RHhGTDY2MzY1ZTl6aCttejdIcjJuak9QNi9SR252NjMwU2oxZGRNTmRveVNFTzhMNUlZaldjc3lTT1poM0tXcEdEaGxydlh6N0tDYXJqTTA5WGJSVC8yLzBBZWJ1M3AvZWRkdHFaZTl4VnJXdmpXYlFXbW8zSE4zeDV2OU15enRXUDUyZFRLU1Q0QjdWdnhUbzQ0cE1uQXh6cU1iYksrR1Z1dStVOEhyL09UZDRpbmJiS3FJdWNlOGU5VTVhTm5RRW5xaWxVcSsvK3IvSTN5NmJMQzE4K3JtY085WVRtRVU0MmpvYmhsUVRDcWM4MkN6QVI4am1tZDMwSDNOWms1QWdSRzlpNUdRSm9mN3Y5SDh0L1MvYnBNMlVCYjlwLzJ2a1BhY2EvNHYyQ1pjaitWOXpmdVlQa1ozRWF0enp4SFA0WE9hT1hOaE1iemNGaEx5cFhTNk9ka2lPZERydWlXR3FTdzJyWk1mSEs5NW91cVBMWS9IOHZUUHk1TFh6cnJYNVMzdk5wTGNiK3cyVjA0MUs2bXRTb1NBL0NhZHI2ZE1KOU5iMTBkdWJ2eHQxZWZsd3VyWUdpK3FIMHoweFRtbHJ4VTd3UWVhM0pZT0VhQmRKbHZkL08zK1RiUzU0TjhicSsva2kvK2pPNi9zUjQ5QzI5NXJ4ZnZkOWRQR09KblY3NmFlU1N5Q1RMbDJza1J4YjkySVliakRSQktzRUdxSjBFdTBETS8ra2cyK0pGd0s4VkY5K3hYYkpFNk5FNkIwdDM3WENpZ3RTS1o5TEQ5SzhMaGFBa0VyZGY3M1JnZkdQdTZtemVMZkE1MHZNNEVLYkxOUmtIcVY0L21qajZqZCs0K3U2a1htSWh3N013QmZwUTNHbU5RWlo3RWxobVhXMm9FUnVwQ3ZzZzZIREc3akx5UTNvWGN5SHdiamZqREg2cVNIRjN1ekhxS0dhbnBGYjRmWUZGUU1ZN0pMSGkzRHRCN3c5NjFFUStnalFQSUtmcXNkNUNxRUNGdVByTjJqS0xXUFdKL1I3d3lrMUd1cTlwMzg1Q2creG9xM2N6bnppZVBYMTliNzR2UENaZnA0NFByTE9jTHp1S3ZqSHp4QzhVNldyWlF1STZ4Q3podkIzN0dmQnVabkw3MWJJUDFGVXYwTndudk91dm1pQm1CQmpNNUZEWHJqTStyNzg5UFlhRXRaMDc0bGk1dEI5RTVXU0JkUnFMSmFjeVJ0aDBwL09NdEYzZCtxdTlEMjBoVWFmUmU5K040SUNiWU5KODZDOExlY1hRNStxejNtUUIxeUhaSDJXZldEbGcxSnovRjlxeHhseTV6WnVWNUptUFBXYjlnL3ZhTE5TcmRJbFN1eER3S3UzeVQ5WitlRXpUS0ZQanVoMXZQRml4L295OURKU204TkFHZmRSS0xjNWRiSnNEdFpjckhOeWRjdm4xY24vNVZmWHRYWjl6UXIrL3U1NWhDemNrNllWcnQ1bGRsNlVHZDhwRGN2VzhYZTczNlBZL0sxbVcrZG5wOS9SL29JZ3k5eHdrSjVPV2JQc0kxbmRhQzdpajN0R055aHlRc0duSCtsMlR0MDdxazFHWEdha0c0M3Q3bDZUOWhOOTc1N2IxUG4wZkRObHlXNWo0dmQ0L3JESkxKTFAySUdXY0prMWk4OHAzTFU4QWJWMHFLL3lubmVyZlZ1Skd2SXNSZHJ1MmxDMXZZaGNQMWpSSXkvWDN5eVZiUjI3bXVLMzBXcVpjbXg0VmpDTTFzTWNZeUNaVkU5Rkp2NTZjSjgzYXBuNFlqcEI5M1FXcXRqU0hHY2F0c1ozTDBtR1RqcDkzY3M0MUI2SUR0a3QrUURzUDlOMWZrL0RIZnFXNWZEV2VaZ1N4ekFJOStXK2VobUFqTHlpMlp2aWtycGN6d1loS2tNdHhSZFpBY1AvcGJtdVcvcGFzci9kN2J2UEY3eklFNHROYmVyQmUvajZ0eGFWeU5lOGViOXJqVUoxamZQYUNYWDIrdlN6d0ZDdlJKb2YyUFpwY1phT21LN1hJKzJudXl0cy82R0ErK1U5Mm4vT2ZQN3lNZjlndCtUdHZ4YUtWcnJ1ZU8zNzBud1NyWkdMdHA5ZG1yWnh5azFqbTBrL285TDNVa2t1V1pIUjU5ZnBSNEE0UDkvOW43OXVkRXRlemZmOFhLM0IvdXJkdnBBSW9kVTlWVk4wWkZuWWp4aWZEdHFUTThkZ1RkZ0NPZzBhbnp2OS9pRFFvSWlDWjlqbDAxYzZMQ2ZxNzkyV3V2L1ZscjhlWVpCWmxXR0lwRUxkNWEzUHJPZ2dXaC9YRmE0ZHRXbUlCUS9LV0UrVnZiYzVLb0UvMHpxWXlzc2hVYzk2UjlQTHdHMHV0a0tmSE8zOE1INm9uNnMrQkJ0dlhqdGpXMURsRXdKamgzTTF2RzRsSFdkbjJwM3VWT3RqazE1cVhHaUZ4NlRUNWJuNVhpZlRBajI3eGNRM2tpbXI3R1VxaklZQlBqNk5rTDJma2k2MnVvY3lzbDNQTkZ6bWdSTmpFUzB1WHB6dFNGQnJaTnRpSzg0RHVCd3VzOEl1eTQ4blFiWnhkejJwbFBEeHdGRXM3S1U0V2RrUWl2dURxaG9IRllWK1JlY0R2dXhRamZNWlN3NHN2REhhQk96VWZDdStiYWNUa3RTaGN5R053TDdTNXV5bGlSOHlrUUxhVXYxYkhlcUxKOVhUenJEREhGVHIwVGlMMnhaNG5tamh6VFZVWnVpVDE1OE5GdjBCVVNvOHU5L1FEdmo0Y1NLWGVYZldxeTd6VWdKTEZtdWJlZm96MjVXZWxSdlgyUG1IelFDMUVtRjcwUGNqR1ZhV3lBTUl1NjJHdk15OHlZWEREWGtpc1o2alFseEZJYjQrWWhKZ3RCSUI3S0tqU3VnemFwMHVNT1NpNVdNazAxZDB5aldTRVg4ekt6NFBka1k0bVRSQWVqNVFIT2pIdmJQalVwMDJOKzMyOU1kdlI0L2tIdmUxdG0zSkw2QkkzMTlrMk1wSmdGMHhqS1BhSzU3VGNFMk1QSVpkNjdyQTdoY3JIcXZ2eU5ZdTZrTXN0NEFaampyN21xMzlaQUcwYjRpdHZHblovc3VYMVZoaUt6VitmQzRqaVdUT3c3OG5ERllGWjhsVG1QaVdKdk1jSDZNaVBTNCs2eU41NWovWVlnay9zZTBoOHZFWHJCU0V3RHd0NytHV2ZHZ2tqdWV4VnkzQlg3amRhaXQ2L0RIdFdwTUF0NjN4dlRLQ09UUzVLZ3QvVDR1VUppa3oyTkRhNTF4MkhQWDl4OVJ0ell4c1c4OXVlcUdoclg1Y1Z4NFd3Y2QyUXJjVysxL3p1OTRObmVsVFA3djhGd1hidzgzWEs3bXZmWmFWUDgzYXU5THUxNFNXMzY0M1h4YlBSZTBDVXpvMCs5czJRcHdZbzMxTGswUHAzQktNdHloM3M0VmdjY25LQnNlM2ZsSHNiUHVwQW5BcDhwWjI2VTRKZ3l6NWZHZzF6M2R5SGZvcUVZRTVzaUlDdkM1V1hid1YxL2ZJY2lzNzNoYnBnRkdkUXJFbmdFQjVnYkdsUGs0cGliekpmMnc0dG1wVEV5czdyR2xhRkZmMHJqRnNFRUEzMitwSE9EQ0c4Tm9VQ2hWNmNZaHZyN1daNDRZUk4rdGpGejRhYlJtMXZiRkFFWDlDeVdqbUwvUHJIZEZCeDZhQ3FTOU9HN2ZjbDc3NXd0WkdlT1AwdVI0aUhOeDZkMTlOTEFiekJqbEsxS0UxWm1Kci84bU5CQXdteTRzYU90V3ZISjhydjRocU8rWm5YdE5ianlzQVVJdUkrUTZ3T0lNN2ZFanhXTnRmWnBqaGhCK2JaVkwzRWp6QVluWllYRnBrdDZsSDg4RHQ5UFIyVEhOMEp6V21GOTdJZzlTZ2JhbjA4K0NwS05EdEV5bUpkaitqVkREY1V6NkxxeGRZZkhzYWh4djlxWWZ3VXE5TitGM2h5SGlaZWJnd3hoSTd5NndyS2RKdUtKaVpVTjEyeDBTbWJUbVp4YU82YmNPM0xsNDh4NVZBYlZ6Z3VpdTNqK1NubjA3cHFENi9uMjZ5T2ErYUc3cVJXdHVlWkhlejdXR3l3bm9sblhvS21QR0NxNkZ3VzZ3Wmt5amZvMFJ1ZW9GbzR1N1ppUE9uSTYrbXc2VjVLTWJRaEZ1RTdxOC9hTHJkVno1bTk3eGg1MlBTcnlqVjc4MjlLTG8yVEhwMzJONm51KzNZVTBaV2VKNWN2RG5kbStPRmtLWE5HUDdmY3NQUFpweVJubDZtUjVoMWtMYnBUU3kxQktBMWVxVWUwRmNzMDROSnNrVWNNRVRJUWNuQm84MWtMWUdTazdtWCtyblphVmRta3BVQjl3UU9HNGdMVkNNcDZPeHBtRzRwZE1YK3BMQmRHSll1Y0NtbXZKaXZidjF2VUt2WlNleHRpaW0yZW1tcWVuZDU1Ri9TdVlEbDR3cHAvRWpCaDdRaEUwdWtSTVNTVjN4eEVXczlOQWc3SjE1TXFhbWU2YTN0V2dPT3c0U1UwL3ovWGdSZ2t2a0JJZVVhYktsVWtrS3ZUSUplWTFyNzNCbytQR0JZMTNmNmV5UnAyS3B2bnhSRzA1b0hDRW5jUlFoUzlBQWN3aDR5M1F0czRPKytPTU5rVlQvaTVKanoxZk55dVUvcGVGR3BlYTBvaGtkaWRMMmFjZ0pseC8vaTZFUVFYVGszeDhHS1RVSjlLNEF0ajkyNW02RHpzTHJIUFUwNHROV2U0eUdMNEp1Z3NNWnlLa3kxTXJ2R3ZjK3M2Q0JmbGNBOUpSU21QM2hTdFRaZE83NzZURk8xL3YrZ0pVMmRSNlg3R1ljQzBhOXltTXlPY3lrRk9YdUI0VitHOUQ3NDJ5aXdkcE16NFZ3N0Z2S3h4UmsyaHFHMEZIUE9uMmxmRHVqY3A0b3pLbXBUSm1sdGtZdWZHZnl4aU9vUmg2K28xeS9yZWtuQi96UWE1RnhiM1JhMi8wMnR6MDJramJUc0JWd3BTRlJKazFjUzRuenRweTV0V0ZtcDl2Y3BaQ3pvN3ZVc0pwaGZ0eWNFeUZyeXBuYzc3ZDNUZ2NoaVpEdFpZV0oydEtRaXR3Ykp1TTVsNG85UjJIMmJyTjBBcERiWjdwcDE3RzlJeXl1T1hsbXBObGZBaHBhcWlaY3pQQnBtYWRTMzV2NnR6Tmp3SmtJYm1lV0k1bTg2TTNPRUZKRmxkc1JpNXlaOUpzcGdtbHF2SkVNM01JVmM0dVB6cVVSQnlYMHpuSEJmbWNKN0tRb1FKUjI5Tll5N0xyWnVXYlhTTHp3SWlvN2RqWnlscmZYTXV5VlhsdERKNnh2MkNZMVlQTUdTMmoweFFIZzlIZm5idDVkcWFPTE9QNmRjTUtuM0tKa0pUNUdtZ2FEMWxOdTJlaHhHb2dheDZKYmppbVpzOUtJY01SVU9TeGFhb2NFcDdnWTNhY3lsZktCSWJXbnBuMWNxVTJIYm5sSVhaNUhjSXI3Mm81SGJpSWNUR0JremFCMHQ1QWJRTEZTOWZMNldTTjJhNFRvN0NGK3pUeFNHY1R3eTZYaEpsamFLWXA4NGhrNUtVK3RNYjArbmtoRG9pVDJ3dmtoampzNDZrREpGV0psYm1nY3dGTjRRWlhIcnE1dHVaSGNoOTE0VDNybVlka21aNU5OY0hjRUN6WmZjNHNJMTRabVRmckpLS3F0NjZxQjBTbHNFeHY4NVE5aEl6Y1FybjJKeW9GQitONUNVY29QNVdxaFExWm5WK0M5WWljakc4RXdzNXp5S09hbEZ1K2RsM2hmSm1maCtWZDZlWEF0ZUQ3WkZiRHlpZkpiY3ZnNUJwaTV3YzhpQjFFb1BncnhZaWNUT0t2VlBDNVN0WEN5aDBxdnM0K0s5L09KK0JxdnZVVWx2TWRyb01SS3RNVXZnQWpOUFJiM0pvenNlS1ZhdXBPdTRyWXkwUHlrU0crZWZZMUVWUThvUzBycnVLWmtsUXZYVmMzeUZoMlJQLzZVajNkZUY3ZlVmWlFMaTV4VUl6QnBOVEdpNlQ0eUZoVzU1SUMxc3FXbm5WRkV6T1lXWGVmMlVGSHFZdThpVEd6SERuUVBtdFBDTFU1WEQ0OXE2K0c1ZTVHbUQyN3VRWWdJRm82VDN6WWprQkJMQ1hjZzZKWDF5QTRsc0Z5M1RpdHpFeDA1MDduaU03ZlRZZEtkUm5HRTYyZFdiNWdwVHROU1dnaVdsdDJZbC80dS9qRXpFVFJQT3ZhdVNTUUkyS0dHMWZJR3hNMEpCZkg4ZDFqNXZERUdrUUU3REhwREh6ZStaSXc5YnRobWR2VklVYzQrc2YyU210dmgzeWMrSDFYa042MEswWnZza2xrRTNtcU1MTjVYamszbjdQbS8yZ3YyQ0ZxYjdiZC9YT1F3Y2h6cG5FbmplWFpZeTg0M241NXJORFJHK3RmRTdoeWJhb3hScVN6bEVzTGNEeHYxMHQ0dHJxZUFGa1Q2UHp1QjU2WTVEb3YzUWcyVGNzNGF0dk84NDRPSGhybnRPZFJRVG9IOTBobTV2NlY4b3dwcmdkdXRkUGEycW4vcGxzcFIzS25KVU14b2tCOUlLR2JnN1BsNDI5bDlNbDVXQWdiR0toZDl3aHZvNWo2L0E3MTVzeE5DTldCeU1tMGtHZGcwOEZCUGJPTWhkOHYxTGdkTWt5RjVwT2JMWFZHYmhsMGVhbUhubHNjR3c1dXNwa3NtNjl5ck1FcjdyQ3Iwck9lVG85UXV6MG5vMGdrWVdWWWwwa2R2VUg2c29udVBpbDUzZSs5OTJabTlzcEpuc09aRFZMNTViY2RPaHhtMXVWQ2g5b0NzVE5VYmppQnZNZ1QwR1BsMndhbGFZVzJXRlNXWVU4UHBYcE9mUml1dTk3QkVMVGQ5WUpxOVB3dmJPeDd6czVRaWpNRUpTV0d5bVI4c3N0eWs5NTVZekZKTUo0a3pGM3lnWFVKaEt5MHFOZmhaRmhQeFRhdzZTU1pRekpPTE9yS2REbkd1djloS0JLSnRsenFrQ0dhWjFDakR0NVBGeWJ2RXNJK3RxaFAxUENObGxlUUxnOStJd3BVQVhObEtyYnk0SUlVdU9SNS9qektYQnl6SmN5d29VZEg4aEVUTGhFYTd0aDBsc0Zvd0dkbTlpMmduNGtBcEFCOXE2NlhLeFZLL0M0akV2V1oyYkRNbGJ2ckNWSFRXSXJFMDZBU0owOFJBYXZ0V011NUZ5NUFTb1F5VmVvd1dSZUhRbHZZOExJKzRMQ1BGVjJPemd2bTFZZDY5UjJTQVVOQjU1S2wrYWpPa0dTSDhudGZnWHRWNEJpa0R1eVpWRmJCaE1VTWF2YlJPSHdSRlArWnZQMnZWRUdRdExXeDBpVlY0UXhoRHJJR2JCNXcyTERKenNpZE1LdGI1b09CTWwweXB2cWJZaTN5UkczSkVIRFBLOU90ZGZTWHV5aERDREJQSU9jSlVWc09nMlV0M2JJaWo1bGU4TldCSmU5dUFFbkJsdTFaWnk0UW9zaDVNcEE1T1BIdTZqSm9rYW1ISzc3Y1JmbTJaUlo0RWFpaEVzeVYvRnRvRklYTTR3ZTB6R1BXSE5ZM3ZPVDAreVgzZkg1Y21BUWQzUEZqMTFTMGRoV25zWVNJNDNPYXdwZW4zMFZYSFBRRFBEdllyTmh0bSs0NjdhRktVeFZQdXkzRStlQTBnZDJVclpFWExIbXZ6bnZYUDVMRzQ5d1hEdHArcExQRVkwUitSNVNVR2p4SFFXUGlCWEFtQzFtbmFZT2VuNWJOc054LzdmV2UvVFRsbk1URDY4Z3hWVEVPOXZKU0hXR0psdUdaeVUrY0dNSk9LaWZYdFBQODBUamY5c25yN0pOSlRrVXhlNE10WjVkWXQ4bU9SckhQSCs4RGc4S2NkNzRjZnA2YkFDRS9ObDdZTXZaOGxpNXZtZXk1c29tTmRWTWU2b0xjV25HRU5VWnp4NkhPdVpheUFvaE9PYm1GMFJUVWJMbVA5dWN3Wlh3d1kwU1crckQ2VEw5RXp3bEh0U3BUQ2hjUDZ0d3hvOVNPdEFmNnFubk83c1FtQ2dqM2J4SzZ3ang4OXFpdjR3TFhSOEY2a3JtdWhqTnh4WmVQN1E4SDV2YkRNY2pNT1R5ZXN6aXNmdjQ0YTY5MmZUSGFVNE1scGlMWEhxcGdhdUxGRkdNcDBucld0VlBGMEVCUVRoWWhUWDBnYkJ1YTliUUVHUzRzK1llT3JZUEtIREE5NWx3YUVRU2J3bFdHYW1rQ0llTFcrcHN4Szdwc1laeHIwNmgybWxBZXVYMmJPR3Z5K2JmVXhaM2dRcWZuS2s1SEgxRk14eDB2ci82VDlwYTFLZ05kQklhMk5pRElhbXJoNVpwNWhGQ1oyWFEvVWFZYU0xajVzUk5tSHRzdkRPZXorbzdEVEhWRmhJSTVaTlFIZkZXZ3lGSGJmNzRvUStndndXU3hQNnA3ZENJM2h4S3FkMlRWZThtY0tVbnZKTGJsOHhoUUU3T3QxQlJoaVNuS28xMDBFN3hkWHdVOUpROFJ6RGs4eHUzQXkyRmk4TWRqY0tZN21sOTJlcFVudVQxRmxYT0tEY1VSRUJHSUQzamtzdFkyMStrZ0ZSc3F0M3RYYWpvK2lyOVNIeXVoUGRTWUF6Y3dVNDFuWmlUaXVkYWRna01OckRjU0QrNGxSUWRyaFlVWkFYSE16TG9tWHNOT3cvS1I5SHhuVWxDbjkrNjdRWHBPU21BOERsaEFCR2hOTGZNY3k2em9tQ0JXMXFUSmNNR004QUF0Nll3N0ljV3J6d2o0RDMzcXZSQW4xUU45Qzh4VFpLQ2FFKzFQY1ZhS0dkTWpXaU05NjhMVVFKSmlYQlBCSU9iOUpCQ3dhUHNIN1E1U1JLKytRYm5qT3JnQWJld3dxUHdJamFET0hjV3Y4Tlo0S21DUmdiNldlTzBjWEJtN2ljSzJhWlF0Yjg3MVFJS3hmUGZMaExlWitQTXd5cGNRTFNiUVRFQkI4bVgxY04yRnNDT1BraFpLeXBhWWlNM0g1TmozcnhXRXBqbjMyM1VDdjZJVWp2RFl4ZGpYQXNxQ2oxLzU3OFZUSkxSTFZGZ2kydkE1QVlDS0dmdWsvU0paNWdwTEpwaG8wL3dpY2g5VTZyMzFlMHFIaWVwdmlzQldxZkFtUGJQclRFWC84dktlNFU3Q0c0OHZjUUFNSkpsTXQ4OXVBU2VxNnZLY2ZYYUtUU1dXcUczWWpQdXM0TDZYZDU5dEM1Q1d4UTJIYWFmMldaRWgwQlZmSnMyRDdZeWh1aXFIMWRZUmF5QURuNnUxNUNob0p6MkFianYwL1NmalFObnQyeWtjb0ttaHpqcEpYTHo1aThQaW9zYmpzNHcxWDB3WERvNTkzam1OQ0dTNzVjcmRPSjVKOU53RXNOekQxR2w5dzd0Y25OU0dtNHh6SDhFYmlWbWYvdjdxdFhVNk1QdlpsNTV4c2pFb0lwRzhOVzVPTUhycjd6aTdjWDg4UUhwYk5aVmhKQytlcHVMZStmdGZQdHhNYitjSXVDUVVZK2NJeEduNFhQNXJNV09RV3NjL1ZkNU5mMGx0d0E2Y0sycHlwejNFZVdJeTd5enhEVVBZMkJEam5oalUxU3VlM1RBTHJ5SWd4MEliYnIwd0FNRzY1OFdzaDdUMkthc2RZM1UrbG10TEc3c0xTZHhoam1uY25QWTViQWduUkcwblBLZkRRcGJuVlVQUjgwTGlnQ0x0cThibkxPcmxWS1F4ZXpua013MDNmYlZoMGxvNDBHSkRSZHVybys3VklUdlFRcDAydmZESDVScHV2U256MkJkTDJUaWpud25xNGY1by9sNXdkeGwvdmlybzkvVnpZQy9udkRocW43Vk1XWXBaTWRUQURvSGtISHVpWkNzWXNTU1dmaEE1MTdFNVNVTXE3T3ZNdnVQaXNlWmZkVDRqVlBxQXlpdWh6dDBaS1diWnZ2eDE0WG96RHpjc05qVTZSQXNWaUVlZG95eGEvSXFUK1RsRHdMMmpTaWVzVFlzYXExdGx0bzUvbnhLMU5VUGhwMDFrdWN1dUZIM2t6YUhHK0czS3NPMVp0SFZudkkvbnAyWFBTOXl4d01YNk5GdWhyQ3FTcnE3emJvVmpxbWF3cytHR24yZmFDblVPdzFjQ1VkdmxvSThjMXkyZG9vOTQ5Wkpldlo5R0gwbHF5eGV3U0V6UURTZERoQ3QzZmp2dE95QVArZWdqeDJQd3VmU1JpUFlVVmM2TlBtTENvUURlV1FQcTl4ekxMNEVpM0F0Z0JkV2RERTRkRGJ5QVYvT0IzRnFZVU15OFBQL2ZnNVE3a2N5UlFOUnVpYVpJYy90YnZsS2g5M0psVHpoS2gyYkx1aGM4eW05bkpxdEo0dnVmY1RRNFNGbG80YjQzcHMydVNHTTY1T1JCRnF2eHFUNStraGR3V0pZK0NZdjlnSEh1Mk9STks5bm96VDBHc1JmTjFGMUh3eGR2TFNpZVIwL0RrZ3RuL25yYmMrZk9uSWNVOVpseXVEMC9WV09ncjNFTThYMitGSWQyVm9wVVk1bk9tek5TNTBsY1U4ZDdUOVE4cEV3ZEZMZW04STNRbkZaWTM0cWNhcXh6cGtYYitVRzU2aHBMb1N1aGZVSkduZUNIL0E1M25qK3BHeFFqcTBmMTlneTZYRWY3MGpQYWE5VDFQTzl6MUZUbnlsM2NLbVBjSmRuQnRkSXl4L2NuN21oRGpwKzMzT0F5YVFGNUwyRFdkUDhxZjZ3NENpTDhEdGNaQ3Qzd3lqSnVIYnRqbGc4WDI4TU5UOVEwRGhOd2Mrek10Yy9ZdXR4ZWFIZk45aUZ1RU1hb05SbElGejdtMjExSVU4Tkc2TjJUUWNTaWNDUCtYSk9yRFVjWkJ6NUVXcDVxRTJ5cU1SUnBwVnlQME8yc0tNeGpvaVV4MUVkMGl2ell0UGFPbWVoRitBRjI5UlVuazVwQURXSG5wWHRzTnJIM1NLbnpVcG0venhBbEt1MDdQYXR2STdPd1VQaGVJRm9HamJsMVBSc1QyZXhUYTgrTThMNFY1TGVOMXJyYkxHMG5OOXlzdnVGa2V5K0swaGNQMWdiQ1dkRm5hZ3FZNkJDTTFVQUsrV1ZVVU5FcWgrR0gzdUk2UFJQSExEWXRoM1VVNjdjeVMweU5LWVh2elRNQWp6RXIxeU5zZ3BFcVF3MVJqcGpXT1FXVzZkbnlOczlYbk9lSXVWVzVNb2xFc1FNNHFsV1pZRG9VOWlIdktQdDhoWW1RZzFPRHgxb0lPeU5sbG5JOEJGdmtnaVdtUzRINmdBTUt4d1dzaFY4a1JhdmlZK0NrWERmMzZ1VUFxeGw4ZWJnejl3dWhIYU5ESGN0S09wbnpaSDY0WUp2MjgwYzZSZ3E1Y0NQOVI1alM1OUZsMVVXKy9Sd1o2SmRUU0lTbThFVlV4SWJvOWhjcFd5NWozTVB4VjJhMnJBYjNwcWorQTdsbU1JTW9tVWRGMENMWHpJd1AyYUFLd0JSWEI5Rm9xZ3U1RmdrNVlyb1FpTm91RWpkc3VVZG9UT3haengrZFBUTmd6UEdWUTJaNUNlSElJVXRua0ZsbUZoeUdiazBzdDJ4OVJDQll1SDlXT3k0dk1LY2piSXIzcFhwRW44VU5YeDVHUkJVNWpTVjJIWUxLVVBpVVUwaFJJT0Nla2FGMWJyRGpFNHFRYVU4MVp0SXl3RXdRUVY2OWlXakpqQXdOZGpiRUUyd2RJaU16SzA2R3lHbHYxL1AxSUpwaVpKYkNWMEo3R1pJem5xZ3RCeFNPc0JPL3pVY1lLWnZZQ1hjTU5Xd0tNMnYvOHNiS3hKY1JKUmhjdVF1WjVoRGxaV2d3eUxUQ1VDVHFCTGt1WW8yMFFOczZCMWxYYUVsNCtEcXFyeTE4U0Y0enNlOTNYdW9ibnBqdWFQTjhhQVhJcmlROWErditzNFMxNjJKL1FYcUFaNSt4MThkcHpJNWR1NWFYOFphWmRVVnIvS1Y2bDVzblBPdnNhMGxqNzdhdFc5Wi9kRjd3RVVOOVFIcEd3dGVsMWE5eit4VEVsT3ZQMzBVeHJPaTA4djVhVGh1NE53ME8yUDNybW1mc0ZTOVBsOFAyZEdldWYzOWZOTmMrVkRpNUZzU0tGakRYdUdPamp4bm5ETHBSUGx4SUtXT3grMHJ1ZFpOTnpyejdzRU5zT0MyZnR0NmRZbi8vNTZuNnVYSWQ4bkxMbW9OT0V4b24yNXdhRzV5MnB0WXYwbUo2UUtkOFBqa1hHZkFoZU1jejNmZFB6dk56N0QxSzdCaG14WXRjZHRuNW5HNTNVVzdaMnR2QnVldnpCTDFreFZFdGhSbmhPNEhDNnp4aVp5Uno3bU5pbzc4VVlKT05yTmM4OC9jYXo5dkw0R1NFblEwenNhcTdFdHF3d1dFNHdzeEU1RlVKanQxemJGUVZxNTE1NTJkVVh3Z3pFdUV3eE5TM0ZNdTJyTGhSWmdXTnc3b2lGeGdqaGhKVzVobjB0TzZZOEs2SkYrWHBYaUJxK3F2U2hRd0c5MEs3aTVzeVY2VHV5VktveUdBVFF5QmFTbCtxWTcxUlpmdTZlTllaWW9vbDF3TjFtaExncXp4Y01kaDA3OWpOeGQ1aWd2VmxScVRIM1dWdlBNZjZEVUVtOXoya1AxNGk5SUtSbUFhRXZmMHp6b3dGa2R6M0t1UzRLL1liclVWdlg0YzlxbE5oRnZTK042WlJSaWFYSkVGdjZmRnpoY1FtZXhvcmhBM3FNZEpmRmR2ZWJQRXRpTmFLazZjN2h6bHZ6MFZzb2duWFN5RXdWeU5yZnpxKzgzcEJSWTRhWUdSakZSclhRWnRVNlhFSEpSY3JtYWFhTzZiUnJKQ0xlWmxaOEh1eXNjUkpvb1BSOGdCbnhyMXRuNXFVNlRHLzd6Y21PM284LzZEM3ZTMHpia2w5Z3NaNit5WkdVc3lDYVF6bEh0SGM5aHNDN0dIazhqSnluaUFEQWZtOEpoYWR2MWJjOWc5RlpxL09oVVhUNkwxVXRxL1VFQXJ6VkcxWXNwUUErYkk5emhlZDB5dGhySU1IY1hlL3Jud1lBZm13ZEJnLzQ3dzNyenBOb1V0eU1haUd4blZwbnRXYk8zSk1WeG01SmZia3dVZS9RVmRJakM3MzlnTzhQeDVLcE54ZDlxbkp2dGVBa01TYTVkNStqdmJrWnFWSDlmWTlZdkpCTDBTWlhQUSt5TVZVcHJFQndpenFZcTh4THpOamNwSDducGxvZWpMVUlXeTVTTEVQMi8rOWdvM0F4V25udndFY1FuZk1yRzdxV2U3bkEveEtiRDlDVTN5MTA2WS9YaGZQUnU4RlhUSXpPbFU3R0FJcXpJeDB4dmlpODNtZE8wVUhDK0x1RDBQeTdtVlBQakVINDk4UDkwMDlJSVhjSXpRbFhQN2UrZ0NmUFl5ZkRVVm1lOFBuQ0h3TzZpUmUwcW9rYkE2TktYTHh0WnlDU3djKzlEVjd6NnZLdXpTWDJaV1dqMUUzclFqdHJtZ3hrR1ZteFNDb3lMZDdHWmgxOXZ1V3Y2djVQbWE5bjVkaFo1NVdaSllTU0hyMm5LQk4yWFVPc0pyQnlGQVpVNjJ0RngrWlFyZENlM2twalFxQzluQkhUMEpqVmUyMGRPRmEvdDRjaHNQUVhDVXg5R1lpd3N1dHdKalc5L1NMbFVyUUxvZVlha3lRL1hhbDhUck1WZTJrd3RMQnlHSW1tMjNWNmRtemZuanpZVEZaSTZ4K0xEYkZlMlBWUFhsOFhKOUpHT2pmOHlWUzlxRjRhSDI5SUI4WlRuUU9VMUdIWU55TVEwTm45MjZteXFFZVduZTdmUEludElXTkwzL0QvYVcwd2FnMmhPY0Q4ZkxKYzdPbEZhZmY3QnRIdGJhdmgrTkZXSE1Wd2JDd3hyYnFqbWRZYnBQSzcyUW92K09YWDFRK2hYbnFHSzVCWEE3V1pkL3d0OHlUNUxTU1Y4N041eXpmM0VYRUdJM21IKytOemlvZHV6eHpncHlZVFRFaDZIenFqWEZXM3pCRXFBekpLU056M3ZmVGdjelQwM3pUSmhBb0FQempnMmRmMCswbUxqajU4MmNGQnZIbXlqZXJGNVJFSUdyT0RvTktPMllueld5VG15Q0dLM2ZjVFNRdVdjeGxhT0JmSTBoOTdOaGxTd2lRaGg1K1ZzS2VBbzZKNlpQOHBCbVBjTEtKM20xOWY4TDZ2cEtNWGg4dkxpNnJ6U3NHbm9uZnZ5MzNDS0tHQ2kvMWVWeGlDOGVGWWg2ZDBDTFdCQldYY0NOeXZQSWt5N2lvamhCVC91RVloUTVxa1hLRWlxQTFOZWpJZDc1Y0lpT0RLdzliZ0lEN2lQM3VJQjg3dXVLV2dRUWkyVjAyanBPUXhPRmVvM20rakwvVTU2ZVRWc0FrZVM0ZzRjYjVCOHJrSkIxUmVzL3BwQlY5cWQ1bGxsN2Z3bkx4bSsybGpteWRucXM0V1l0T1dwTGk4SmNxQ2x2Y2djK1BpSlgrZ09kSFpNcHA3VHlNbHZ1WDh5VStqTkQ1bC9Rai92eG9hcmw4aUFOejQvakpXWkhFNXYxR2d1VTlHRDJTcU8xY28wSy84WHdwQlNFUURkSnFYN1hUbUcrdkdnRXlNaWQ2RFBpa0NudDJDb01DNFd3aUkwTkdjSGhmL0F3WnRCOTY2OHhJa1g0N0V2QXBJZVRYTkVWazdnSTI1TjhsdEZyaWVzb1ZicTBBbzB4Qy9lT0NNd21tenhnV0VRYndzdzd6bnB4bGlDNGFXRGNPYjhEQ0hBektMRFUxOVFETGp5Q2JUSmp2VEsvZy8zNExDZmRiaFlSTFBZY0ZoWW03RkY3UHBnaUhvVlpianVkeU9PSE1keGRGUnd5K2xueWxDcU1YSjNQdS92WHo3czkvL2ZudHptWjczRDM5OTg0UE5HZCtrcFQ1R21qYUMyUTFiUWcwMVZqeklQelVsSVdHcWI4c0g3WHZrdnJndkhDdnpDWGx3OVJTYklYR1ZIRFdCcmo3ZGdjVWxvTkE4TDl3OVI5VkJ1dDc5M1hlclBEdXoyOTNhNDdsclFyWGdOV0IvNWJHcXl2djQ1L2U1LzlHbDYrdFdONnJ4SHJjMXF2TUYvU2RWZENyeWdwMUZySUtiejd4NTUvZjdtUldrZDZCWnJiOS92NytsL0tQMHNqcS8xTXAxTWtISGNncnlPb2dJVjZ0cGJQOVV0aVZOQVZyVFZLVnA5SUcvYVVzSlVWNEtvM3NSNS90UjM4cE10QlpVN2w3K3FXVVNwRGxBTlNzUDBzbEVVRDV1eVkrOENLNzFnK2FjVi81am1MZkVmdEJkclg2dmpRNHNGYUFEcXg1TVVmaDRJMjRSeVZGMDgxaGVDcUY1aVR1OFkzYm8xOTNxTjJFdTdoSFYreGF2MWZmVTdaRFpoVjJEb1I3YnZkVWFnTW94ejNIcS9KS1ZZQ2lQNVg4Q1RBZnR2c2NGcXlqbWozeGNKNzhwYkNHcnNybVZJUW5acXd1Z2ZKVU1xWHFsNUpkSUR3K1ZhSXN2RmhQOWRqVlRReXVKd2IzeDgrSEpjS1poclNURGcxTkIrdTFDa0hFWEp1QTlwMDFkRkZkUzN0V2wxVGx1d09kQVNtd1N4aXFFTnprSUVrT1Vxend0UUdCUFdEM0pYWWxFV3ZWV0xrRGFINzM2ODV0NE5yWjM0Sy8raXhJL3p1Z0NDdFZVdlRBVjRvcWdNREhsU29FUG1tQVh3UDM2UTFZYzhFS29LVHAvcWN0cS9OaWZGdDVWVjBMa2hLVW12aW1ROEJxb0loYWswZklXeTFhK0JuUy9ENVVpcjJZN3FKYk5BZDY3aGI0ZzE5Z3FjNEdubHh3anRGVWdMNVYxMHRKbVorY1FVZVNpMjlEY3MvQkJpaHg0bXFyWVFGSkw3NnpENXJPNmtaTS9jWktjT292cWtKTDB5eCtpQVZKNDlVTldPOU90c09ERXhndmJqRlZCeHFaZlcvaUpFVXd4K25zTGFwdUYzVGJxYzdkcVZRSWh1RGRHakpYcEJJbXczd3NRbDFJVlpWbWNBdkE2KzYrR0gwT01UdVhTb1dPVXBteUs4aG42RXMzUmVrcm5Kdk8wN1FPOVlnQ3QvSW9KUzVCUll2UThhNjE5ZjQxbEk1L2xQcXlwSmM2ZGtrbGV6OHZyY0JhbGpSVDVMV1M5Rjc2OS8yOXZabmYyNy8vdXlScDVxNXBXVysrMzFTS0FyWC9PSlU4NlVnTUFTdllhSENpQzZlR3I3QXppNjk2ZnJKUysxVlZ1L0JXZXA1NmQ5UHJ2dExHbWxjeC9NMDF3b084d21tTTZEZGgvUlN6NlQwck9IdDd0QVJySzhCYnM2RHZWc0E3c0hUZXpLOVc2bHAzcCtqZXFWWFU5WlhtenJzTGgrYURUNlZLcGV4K29iUHJPZERmcks4UG5tVlhxN2UxcXF1OENwM1N6RjgwQUFHdnErdW42ODl6ekREblhoUTVGZ09yS0twdUFZVjJXeHlmZnFkd3NDU0MxNC9tdDlLcXhjb1MzTDJwVU9KM1Q2V1JwTXdoR09rc3Z3ejhMQUh0cWVRdW5jN2JwcEswb01McjZCSHhQbnNMWmZ6eUZyVzJnaThmTGF5SWhSdTdZRlBWcFAzMTE3Q2ZyU2hpR2JPcmxSYlF4QnJlczdlOTdTc3Uzd041bEUwRi9qVTROWm5HUFBPb1orcjJHcXlneExQYVV3bTFQMjRrYzRMYWtxYXI2OTJySkV2NlV3bTFKRVdXbENGZ2hkMEk4S29pYUU4bDYxdFhtdDNPQnVYUi9BZkRIYzhnbDVuSEtjZElaWkxSN0hLYVJWWXpUbHlwNU1tYitVOVFOSGRmY0ZTcGxyVDJqNUhtdTZ5a2dIVndKbHlFUGl6WS9pZko3Qnc4bGRaZ0xtbTZkN0lOczNrQ0NQYTBzUWZyLzJraWkrSFZKMURsSGdXQS9zQlpYbUNyUEZ0RHk0ODE5QjE1LzRIOTRIaTJnbU0vd0kvYUR3SEhxbytQUEFkcTc0Q3ZJUlZFcUw1WHVlbzdlOVNVTndOQ3Q0dWRkMUxWMzlaQUE0b2VmQkJLNzREZjhSQzRXNkQ3YjdVR0kxMWRQWVcvTFpYQVIyQU0vWCs4S3N1c0lrVDhjbDk2MkxLU2ZxK0poaTZvV3lYNEJMdWVhNGNWMzVjZWJNbjJhRXlSZzIwK2VIKy9NamdvYWFLcjBQMzhYLy83cmQvNGczenVOVWR2enkvTi8vT1FIcDdDQlZ1QUpLbkt2U1Q4VEd2aUNiNGZKSzFBVnROK1JnbkQ4V3NoNnRiUG1JYzhVMnh4M2JWTUp2Y2VRdjkwQVByd3NRMExKWUhWSldYdW5pdCtQajBHZEpPa0orOTVzTmFsZDRsbmRmRHp3ZERXRDFEbFdmZ1ErRnF6UHFRcWJBbDJzWVVzd1M1WWhnWjRZeTNwdXhkVjBjR0hmaWh2YTBONTFraFZHYXFxN2pLVGpuNmZhR0J0b2pvYThadGpTbmpFd3IreEVLcmJ0N1cwa1NDWWc2YkdzOUE2Tnp5VjNsbW9IVlNpQWQ3RXJiZTEraTRkcjBWWHZ4MGFpaTdKb0dIVEFjUFA4T3lLNVNRbzZSTFFqbGFoc0k1WXlmZWw1OWZYd3k5WlFZaDRrR3lPLzZoM3lNWWZvK1p3Mm5scEhvd0NZSVcrQW5mbUNMWWtDTFNkcGdNNW9wOUEyVHdkenE0TnFLNFlIMWE5WWFFQldtdFZqZ0NXZHdsQXdUWHBSUDc0eHVyaWs3ZkJmamVyU3E3ZVdrVVhiNE8xeEtJYjh0cjQ0MjNZZk8wL055SmI4VlFLeUR5VU9QTi9zaVNib3NaLzE5UXdzRytBQWpUdGJhMXlSd0wxemtyUVdJT3h1QWFhcUVMaHFZU0hIekJQQ2dUUWo3cTFzbnJ6SUFJVzZ1TCs2RmZyL0lFaUdGNDUvRW5qUldCMnNEMGV2NFYva3hSSmwxallBSkQxRlNVVU9kaU53RnBTaGRpZk5ZUG5nYVlGK25Pd1VNMWxveHE2WDBEd1oxTitwUXhqVmY0YmoxWHdYSHdvdk1FanJxOFhPR3JVMjhHQjJkY3pJbzZ6eCtWcUp3bysyb1JTbFh4ZzhJcHJkSmJDTnlvMFpOQlREU1YybklJYjRtRzVGbWZXeG95NDdlM3dGUmQranpjdi96cmxjTThEL3pHQXBoOXZGUHpLTUNVR2tZL2FCV1IxdlhzcTFaQ2U1UDZtcUFJWXVTZTNRQTFoZlZ6Vm5rcFFVZ3hQa2RGQ0JuRXluU25jUERhdFplY0tqRml6UEhnTGkza1o4VVRMbm9Jb3ZUMXU1TzJyNjZlalBYa05UcmN2YUxiTmJzVUkzblpHMkRHTzdrMERSbzFPd0szZ1p0YTRxRm1EdDhmNDJQeGJDbDFYSHc2SmR1KzZvbG8vbTUyMWx1aGR3UFFST0ErV29zOEkyWVVxSXRTYUkxdi9LTDAxNmlWSkt5bXFYdEtNbFFublFDaTlxK3RTZ3dXeXFveUFybjAzbjdOQTkrbmhZUzdwb3NGOTUxWDV3ZTlkOEU5SjB3eWdQYURJSTRwVlVyZldXelN1UnE4OUhHdjVYcU01OEs2dVFZa1hXYk9jZVVrWEpjM1dpTDZWZUJId3k1SXVBZ3ZWcERVUUFnQlVjdVFzMktQd0pBa3FyejJzd1R0WUE0VUhENnkxT2Q2emhpNHExdi92SDhDSERoUk40aUR3bDNyZ01LVTkvR08xQmxiZG1xUUQ3Y0FRNmI3aFdBVmlyb3FuWHQ4cHUrdTJENE5oUDMrN2d5aHd0UjlKWGpwYlpnRGxYWWwxcm5udGR4M3BCZCt0eDc4N0w0ZWJFYkJ1dW5hWjVuOE1hY05Denlyajg3L3NmZXVZTzVGSXFMRjc3NHJmNFV1YmdDcW5yc0E2QkdUdVF5L0Q1dk80R2Y1dTh0WUlmWGZNMDRqa1BUbXFzOXZYRml0Qnh4QW5DYUQ1L203ZGxaZElWWEcwRm0rTWgyQWpnZTFSTC93ZThGQUNpbTR2a3FjRHhTTFFwdnpYci83N1laTjFXSDBQS1lhT3Z1L1B6TU1HZlFpTXlOMjNPMHRzN3A3KzU3L1JEbnN4RW5mMzdjNUVpYnVudXpDWDRPN2JuVm5uM2ROZEJwUmRxTnk5eGMxNWlQQ3V1d3M1N09Yd3RNdTBqcUxIOTNpTC9YWG5ncHExWE8rZVNxczF1TGNnQ01KdjV0L0dhcjVtQmZCdHBXcTYvNFA1d2ZrbHFxQjdBVUNnZy91VkpaNW1zZlkyYzIrcmlHdGdOZUtiOWNrNk5BRUJDRGU4TFFCdlR6c0gzbjI3czhsbWQwLy9jeGVZYlZQay9mazJQd1ZtM1Azby92cXZiM2VRMWZRLzFvWnk5L1RmTzAxblRXWG5EOWFVYlF6QjhIdWtmSStVeCtqalU3bjhWSzUrLzRGZ1ZSekRLamh6OSszTzdJRXBIa25QbDMvOFFLbzEvTkY4ZmlXeW1ybWlSNjZrM1AzNTdjNldzRDhzQ1pPQTFaa29HWE9Rd1pleXUzOEZnNXBrdzRnQWtmMU1nRGowd1l0SGgvUDg4VEtDeGcwZy92SUFjWW9GbjZSVnh6TkovUU9HVXhFZlZMSzExRHpkendHbktsNnRJR2dOVFF0T3RScUdWaXBsL0t1Q2s4T01MUTZqZ21UZHdxQXFtcjk3UTZ3YlloMGcxclg4em9LU1ZSemYrUER3YzZpWWZ3cmtQV0sxS2xaRGFqOVNRdDVqdFl4VmNSejc4YVVncndCRnJDQU43SHpWNjNaZXU2bGpPZnp4RWtJM2hOUXJKejdScDJCTkRhM1ZxbVUwTGRiVXNNb1BCSzJVc1MrSE5jWG9WY1VxVklWcFVqY0F1bWxYRjNIZStodXBWVFg4c1lyVUt1VnFXcWg3ckdGVkZFZS9BTkxkZXp1RUEzaGRsVHNUNk15LzdGSkgxajUxQXUwNDZ5VWYyYm9xbHgvUjduMm4yWUtCN1FaZlh3bStmRGVsRTlUL2ZMSnpjeG9vMG1rZzhuNzR3SGNnMlRrZ05ER3BIUVBNQm9XNDBuT2dQRzNRNzdqdkljQ3k3THRRd2F1Y3dLSW9Vc1VlT1V5bzhHd1ZxMVhmeTQ4L3lpaGJadGwzaEh2L2dUK2k0SjBGajFpRnJhRDhqeDhJKy9qT1YzSjVDRmdjL1VNaTIzRWZiYWEycUdyNno2ejNyZCt5dnZEOWtQZitYZHZ3eDQzeDZleUh6eDgvYXg5U3JGZCtadGpRMC9LYVA0bFlmSUw2bm9taVhnakJQSTRxSGtPN2R4UzlLbzZYc2R5cy9ZaTNEK2oyV2RqMmEyQXBXTzZxNlNzdG0rU1FrOTE0TEZBWldaVXBWY2hzU2lMNkhVV3F5SThhVmltblZCSXJHRkpHYXVoaitTdG9pWlptVjdTU2FQMUZCWWhwMTFJU3ZVZ3F1WFhFMnlIM2I2c2xyb0t4Y0c1SzRwZFJFa1B6OHRmVUVZKzY2TGdhT3MzUHAycGwxK3lzWnR6TGhtN2QvUCtNMEd6TzF2K0NGVG1jUndjL2YvcWN4NXVxZUZNVnY1S3FXSmhGOGNkM0JDc2plQTB2cCtLbVZMRHZDRktwbHFzVnZISUpaZkZmMys2Y1hlUHVDWTNNWFBIL0F3QUEvLyt4S0FLZUdvY0dBQT09
  kind: Secret
  metadata:
    creationTimestamp: "2025-03-03T18:33:30Z"
    labels:
      modifiedAt: "1741026822"
      name: tomer-ingress
      owner: helm
      status: deployed
      version: "1"
    name: sh.helm.release.v1.tomer-ingress.v1
    namespace: tomer
    resourceVersion: "2223629"
    uid: 7f8dc0c5-2d5e-4190-bc2a-8055b4cce817
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2025-03-03T19:50:28Z"
    labels:
      modifiedAt: "1741031437"
      name: tomer-prom
      owner: helm
      status: deployed
      version: "1"
    name: sh.helm.release.v1.tomer-prom.v1
    namespace: tomer
    resourceVersion: "2298128"
    uid: 04e44ba4-8e1a-41b1-8b1d-6f1142a9d496
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJkakNDQVJ1Z0F3SUJBZ0lRYmRMTVVLL1lmajBxb0doa3dtanByekFLQmdncWhrak9QUVFEQWpBUE1RMHcKQ3dZRFZRUUtFd1J1YVd3eE1DQVhEVEkxTURNd016RTBNek14TlZvWUR6SXhNalV3TWpBM01UUXpNekUxV2pBUApNUTB3Q3dZRFZRUUtFd1J1YVd3eE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRW54WEpXNm1ICjJPbytteWF5SEJYWnZ3a2VsTTNPRVdZemlWSHFNcFFqa1RZZU83ekVYSlNpM0tPNWJZZUJzN3AwcHllcEpmQWMKdkhRbXBybFVnYndhMktOWE1GVXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CTUdBMVVkSlFRTU1Bb0dDQ3NHQVFVRgpCd01CTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRlBmYllNcXlnLys5Q29nbEozK09mYnlHCm9FWWJNQW9HQ0NxR1NNNDlCQU1DQTBrQU1FWUNJUURoZ3FqVXhOeldTUVFrK0hhYW5JanBkZVZnTld2NnFwWEcKalN0QTFxSUhqQUloQUlpRmNwMzJYTHp0dXBjQ3gzR1ltWEtSZ1FMOXNaaFQvbEloaEZmdzJXY2gKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ6ekNDQVhTZ0F3SUJBZ0lRTFFKYlBZZmNCSllPblpWcStkbmVoakFLQmdncWhrak9QUVFEQWpBUE1RMHcKQ3dZRFZRUUtFd1J1YVd3eE1DQVhEVEkxTURNd016RTBNek14TlZvWUR6SXhNalV3TWpBM01UUXpNekUxV2pBUApNUTB3Q3dZRFZRUUtFd1J1YVd3eU1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRTZ0UDlZOTlKCmhtbHZ3UWpxL0ZJaktyUFdBSHJrbldwWEJKcnVXaGJHUXN0SFc5NmJCSGZ1bTN2Y2RCWnFkTzc5b1dDbVhkWkwKc2RMU09QRHpXRlpPZGFPQnJ6Q0JyREFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3dDZ1lJS3dZQgpCUVVIQXdFd0RBWURWUjBUQVFIL0JBSXdBREIzQmdOVkhSRUVjREJ1Z2pCMGIyMWxjaTFwYm1keVpYTnpMV2x1ClozSmxjM010Ym1kcGJuZ3RZMjl1ZEhKdmJHeGxjaTFoWkcxcGMzTnBiMjZDT25SdmJXVnlMV2x1WjNKbGMzTXQKYVc1bmNtVnpjeTF1WjJsdWVDMWpiMjUwY205c2JHVnlMV0ZrYldsemMybHZiaTUwYjIxbGNpNXpkbU13Q2dZSQpLb1pJemowRUF3SURTUUF3UmdJaEFJSmdvUjBoUmptanBySWk0VmxseHdha04xOTFVOG43MFRJdEU0STdFRGFMCkFpRUFyOXhFZHVBZjdldEYrdDNMbnZ0eklBLytlNDhiNS8zZVU4bEsrNGdEdHQ0PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUQ3aGx5cUhFV1lIRTRDM3NVRTRxeVo0dzAvbVRFVXUyMHN2K1ppZlEybmhvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFNnRQOVk5OUpobWx2d1FqcS9GSWpLclBXQUhya25XcFhCSnJ1V2hiR1FzdEhXOTZiQkhmdQptM3ZjZEJacWRPNzlvV0NtWGRaTHNkTFNPUER6V0ZaT2RRPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
  kind: Secret
  metadata:
    creationTimestamp: "2025-03-03T14:38:15Z"
    name: tomer-ingress-ingress-nginx-admission
    namespace: tomer
    resourceVersion: "1839911"
    uid: 0c7c5093-8318-4f25-ad97-7ea5e057c646
  type: Opaque
- apiVersion: v1
  data:
    ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJkVENDQVJ1Z0F3SUJBZ0lRSThWVytsbjdVYVorb0RJcVBvSzRTakFLQmdncWhrak9QUVFEQWpBUE1RMHcKQ3dZRFZRUUtFd1J1YVd3eE1DQVhEVEkxTURNd016QTVNRGswTTFvWUR6SXhNalV3TWpBM01Ea3dPVFF6V2pBUApNUTB3Q3dZRFZRUUtFd1J1YVd3eE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRTQ1Mi9DNVJPCkNNWXRKVXhqaVc5SGtDUGcvY3NhVEllR2hVTFVSQldhaWZjRXVzYm5vUWIxTWNqVXRBelNIYkNrK3FQREVVQkwKVWJMOU5EREorOXpSazZOWE1GVXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CTUdBMVVkSlFRTU1Bb0dDQ3NHQVFVRgpCd01CTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRkwvY2todUpRMWlMMGhJMzQrMmVDdGRTCndXMW1NQW9HQ0NxR1NNNDlCQU1DQTBnQU1FVUNJQ3V5YWE3R1RER2pOZEhIZVpRVjVvYU00WWhIVHBFSmlJZU4KUGNzaG9uMUlBaUVBcTZoY0JIVzhyZEpjaDlTMGprMFRub1RwR3kvYnpzV2syOEw1dVZmeDNPOD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ0VENDQVZxZ0F3SUJBZ0lRYkdzSjhVdlZ6RUNubjFmZDlTTXllVEFLQmdncWhrak9QUVFEQWpBUE1RMHcKQ3dZRFZRUUtFd1J1YVd3eE1DQVhEVEkxTURNd016QTVNRGswTTFvWUR6SXhNalV3TWpBM01Ea3dPVFF6V2pBUApNUTB3Q3dZRFZRUUtFd1J1YVd3eU1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRWh4VFkrd0FsCkY2cjY0TmpPKzljSnBiMTRlTlFyK1EyeElNb0ZONDFEczdBME5ZWkRxejlTL1Ezb2MwSnA0dDU1T3R0M3I3M3AKVEltcllLMytxVERNdzZPQmxUQ0JrakFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3dDZ1lJS3dZQgpCUVVIQXdFd0RBWURWUjBUQVFIL0JBSXdBREJkQmdOVkhSRUVWakJVZ2lOMGIyMWxjaTFyZFdKbExYQnliMjFsCmRHaGxkWE10YzNSaFl5MXZjR1Z5WVhSdmNvSXRkRzl0WlhJdGEzVmlaUzF3Y205dFpYUm9aWFZ6TFhOMFlXTXQKYjNCbGNtRjBiM0l1ZEc5dFpYSXVjM1pqTUFvR0NDcUdTTTQ5QkFNQ0Ewa0FNRVlDSVFDUTh5Vi9Hemx2QUJRQgpyTVEzTnoxTjdtc21kNTUyN2k2SnNhcTc5OUFXUkFJaEFQUXpodFhSVjhhNEMwazFLbU1QbnVDSzlNcms1QXhLCmJBeW1ybXVESlNDcwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUkzbVlCSldLeGRsSzl0Z0h5OElZM3ducm95VTdhRVpPT3lOMXlwakFlVm5vQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFaHhUWSt3QWxGNnI2NE5qTys5Y0pwYjE0ZU5RcitRMnhJTW9GTjQxRHM3QTBOWVpEcXo5UwovUTNvYzBKcDR0NTVPdHQzcjczcFRJbXJZSzMrcVRETXd3PT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
  kind: Secret
  metadata:
    creationTimestamp: "2025-03-03T09:14:43Z"
    name: tomer-kube-prometheus-stac-admission
    namespace: tomer
    resourceVersion: "1446705"
    uid: f7abb29d-ac01-44b0-84a2-66f611166d1e
  type: Opaque
- apiVersion: v1
  data:
    admin-password: cHJvbS1vcGVyYXRvcg==
    admin-user: YWRtaW4=
    ldap-toml: ""
  kind: Secret
  metadata:
    annotations:
      meta.helm.sh/release-name: tomer-prom
      meta.helm.sh/release-namespace: tomer
    creationTimestamp: "2025-03-03T19:50:32Z"
    labels:
      app.kubernetes.io/instance: tomer-prom
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: grafana
      app.kubernetes.io/version: 11.5.2
      helm.sh/chart: grafana-8.10.1
    name: tomer-prom-grafana
    namespace: tomer
    resourceVersion: "2297417"
    uid: 878a202c-9ede-43ba-aa16-88ed6e7799dd
  type: Opaque
- apiVersion: v1
  data:
    ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJkVENDQVJ1Z0F3SUJBZ0lRYlhzZGhIVjVodStEdWVNOGcvQkdDekFLQmdncWhrak9QUVFEQWpBUE1RMHcKQ3dZRFZRUUtFd1J1YVd3eE1DQVhEVEkxTURNd016QTVNREV6TlZvWUR6SXhNalV3TWpBM01Ea3dNVE0xV2pBUApNUTB3Q3dZRFZRUUtFd1J1YVd3eE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRU9QWmR5ZWFDCmFCNUlaRTU5MUpaVDZLL0lKaHZ4cUpodEFpV2dpOEpWRkNxQ3p3YkpmbXNZa3hvODBTQXVsYk9obU1LZlRJbjEKZGtwaG5RVGFiUVhKVWFOWE1GVXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CTUdBMVVkSlFRTU1Bb0dDQ3NHQVFVRgpCd01CTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRkRBR1REeTN2YUxoY2ZYZUxrd1ZNaWtKCitZbDFNQW9HQ0NxR1NNNDlCQU1DQTBnQU1FVUNJRDIyMWtwelBKcVcxRk4wT3JMOEh2MTN0cnlDNDQ0MjdqWmgKR1ZaNmdKNGJBaUVBK1M3ei85REdqUEJKaEtpNHo4MFBFRHhYK0lCZ2I1Tmx3ZUVvTjQ3U0d3Yz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ0RENDQVZ1Z0F3SUJBZ0lSQUtNUzVVTG55RXA0SFBZcmlSTjNnMzB3Q2dZSUtvWkl6ajBFQXdJd0R6RU4KTUFzR0ExVUVDaE1FYm1sc01UQWdGdzB5TlRBek1ETXdPVEF4TXpWYUdBOHlNVEkxTURJd056QTVNREV6TlZvdwpEekVOTUFzR0ExVUVDaE1FYm1sc01qQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJFd1JvcmtjCmdsWEhNaUEzL1EwbUJIemxQSWlPVnZGMzJOSnkveW96Tnk2UWtwSE5HWU5qTHNDMUIxT09OK0RHRXpLQkFDVFMKYjk1VFMrZ2tBU0RzNnZlamdaVXdnWkl3RGdZRFZSMFBBUUgvQkFRREFnV2dNQk1HQTFVZEpRUU1NQW9HQ0NzRwpBUVVGQndNQk1Bd0dBMVVkRXdFQi93UUNNQUF3WFFZRFZSMFJCRll3VklJamRHOXRaWEl0Y0hKdmJTMXJkV0psCkxYQnliMjFsZEdobGRYTXRiM0JsY21GMGIzS0NMWFJ2YldWeUxYQnliMjB0YTNWaVpTMXdjbTl0WlhSb1pYVnoKTFc5d1pYSmhkRzl5TG5SdmJXVnlMbk4yWXpBS0JnZ3Foa2pPUFFRREFnTkhBREJFQWlCSW4wdnN1cmwvVUxCNApPVkkyWnkyQ3UvTnpqKy9GRWJXdmpBOGM1MVpaTXdJZ0podG1veDZSV2dGSWZjaTl5amh3c0xFNVFIcHZlZUlKClhBekJnSWdFWWdVPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUFwd0YzRlpYOFBHcWZMZ2hkNWhsVnFEMEtwejQzc1J0ZW50bTMwSWFpVHdvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFVEJHaXVSeUNWY2N5SURmOURTWUVmT1U4aUk1VzhYZlkwbkwvS2pNM0xwQ1NrYzBaZzJNdQp3TFVIVTQ0MzRNWVRNb0VBSk5KdjNsTkw2Q1FCSU96cTl3PT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
  kind: Secret
  metadata:
    creationTimestamp: "2025-03-03T09:06:35Z"
    name: tomer-prom-kube-prometheus-admission
    namespace: tomer
    resourceVersion: "1440580"
    uid: 2f82e2f4-f8c7-43e6-ae79-aed7a357810f
  type: Opaque
kind: List
metadata:
  resourceVersion: ""
